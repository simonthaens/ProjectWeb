<?php /* This file was automatically generated by make.php. DO NOT EDIT. */ ?>

<?php
/**
 * Vanilla 2 Exporter
 *
 * This script exports other forum databases to the Vanilla 2 import format.
 * To use this script, copy it to your web server and open it in your browser.
 * If you have a large database, make the directory writable so that the export file can be saved locally and zipped.
 *
 * @copyright 2010-2014 Vanilla Forums Inc.
 * @license GNU GPLv2
 * @package VanillaPorter
 */
define('APPLICATION', 'Porter');
define('APPLICATION_VERSION', '2.1.9');

error_reporting(E_ERROR | E_PARSE | E_CORE_ERROR | E_COMPILE_ERROR | E_USER_ERROR | E_RECOVERABLE_ERROR);
ini_set('display_errors', 'on');
ini_set('track_errors', 1);

// Make sure a default time zone is set
if (ini_get('date.timezone') == '') {
    date_default_timezone_set('America/Montreal');
}

// Recognize if we're running from cli.
if (PHP_SAPI == 'cli') {
    define('CONSOLE', true);
}

/** @var array Supported forum packages: classname => array(name, prefix, features) */
global $Supported;

// Support Files

/* Contents included from class.exportmodel.php */
?><?php
/**
 * @copyright Vanilla Forums Inc. 2010-2015
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

/**
 * Object for exporting other database structures into a format that can be imported.
 */
class ExportModel {

    /** Character constants. */
    const COMMENT = '//';
    const DELIM = ',';
    const ESCAPE = '\\';
    const NEWLINE = "\n";
    const NULL = '\N';
    const QUOTE = '"';

    /** @var bool */
    public $CaptureOnly = false;

    /** @var array Any comments that have been written during the export. */
    public $Comments = array();

    /** @var ExportController * */
    public $Controller = null;

    /** @var string The charcter set to set as the connection anytime the database connects. */
    public $CharacterSet = 'utf8';

    /** @var int The chunk size when exporting large tables. */
    public $ChunkSize = 100000;

    /** @var array * */
    public $CurrentRow = null;

    /** @var string Where we are sending this export: 'file' or 'database'. * */
    public $Destination = 'file';

    /** @var string * */
    public $DestPrefix = 'GDN_z';

    /** @var array * */
    public static $EscapeSearch = array();

    /** @var array * */
    public static $EscapeReplace = array();

    /** @var object File pointer */
    public $File = null;

    /** @var string A prefix to put into an automatically generated filename. */
    public $FilenamePrefix = '';

    /** @var string Database host. * */
    public $_Host = 'localhost';

    /** @var bool Whether mb_detect_encoding() is available. * */
    public static $Mb = false;

    /** @var object PDO instance */
    protected $_PDO = null;

    /** @var string Database password. * */
    protected $_Password;

    /** @var string The path to the export file. */
    public $Path = '';

    /**
     * @var string The database prefix. When you pass a sql string to ExportTable() it will replace occurances of :_ with this property.
     * @see ExportModel::ExportTable()
     */
    public $Prefix = '';

    /** @var array * */
    public $Queries = array();

    /** @var array * */
    protected $_QueryStructures = array();

    /** @var string The path to the source of the export in the case where a file is being converted. */
    public $SourcePath = '';

    /** @var string */
    public $SourcePrefix = '';

    /** @var bool * */
    public $ScriptCreateTable = true;

    /** @var array Structures that define the format of the export tables. */
    protected $_Structures = array();

    /** @var bool Whether to limit results to the $TestLimit. */
    public $TestMode = false;

    /** @var int How many records to limit when $TestMode is enabled. */
    public $TestLimit = 10;

    /** @var bool Whether or not to use compression when creating the file. */
    protected $_UseCompression = true;

    /** @var string Database username. */
    protected $_Username;

    /** @var bool Whether or not to stream the export the the output rather than save a file. */
    public $UseStreaming = false;

    /**
     * Setup.
     */
    public function __construct() {
        self::$Mb = function_exists('mb_detect_encoding');

        // Set the search and replace to escape strings.
        self::$EscapeSearch = array(self::ESCAPE, self::DELIM, self::NEWLINE, self::QUOTE); // escape must go first
        self::$EscapeReplace = array(
            self::ESCAPE . self::ESCAPE,
            self::ESCAPE . self::DELIM,
            self::ESCAPE . self::NEWLINE,
            self::ESCAPE . self::QUOTE
        );

        // Load structure.
        $this->_Structures = VanillaStructure();
    }

    /**
     * Create the export file and begin the export.
     *
     * @param string $Path The path to the export file.
     * @param string $Source The source program that created the export. This may be used by the import routine to do additional processing.
     * @param array $Header
     * @return resource Pointer to the file created.
     */
    public function BeginExport($Path = '', $Source = '', $Header = array()) {
        $this->Comments = array();
        $this->BeginTime = microtime(true);

        // Allow us to define where the output file goes.
        if ($Path) {
            $this->Path = $Path;
        } elseif ($this->Controller->Param('destpath')) {
            $this->Path = $this->Controller->Param('destpath');
            if (strstr($this->Path, '/') !== false && substr($this->Path, 1, -1) != '/') {
                // We're using slash paths but didn't include a final slash.
                $this->Path .= '/';
            }
        }

        // Allow the $Path parameter to override this default naming.
        if (!$Path) {
            $this->Path .= 'export_' . ($this->FilenamePrefix ? $this->FilenamePrefix . '_' : '') . date('Y-m-d_His') . '.txt' . ($this->UseCompression() ? '.gz' : '');
        }

        // Start the file pointer.
        $fp = $this->_OpenFile();

        // Build meta info about where this file came from.
        $Comment = 'Vanilla Export: ' . $this->Version();
        if ($Source) {
            $Comment .= self::DELIM . ' Source: ' . $Source;
        }
        foreach ($Header as $Key => $Value) {
            $Comment .= self::DELIM . " $Key: $Value";
        }

        // Add meta info to the output.
        if ($this->CaptureOnly) {
            $this->Comment($Comment);
        } else {
            fwrite($fp, $Comment . self::NEWLINE . self::NEWLINE);
        }

        $this->Comment('Export Started: ' . date('Y-m-d H:i:s'));

        return $fp;
    }

    /**
     * Write a comment to the export file.
     *
     * @param string $Message The message to write.
     * @param bool $Echo Whether or not to echo the message in addition to writing it to the file.
     */
    public function Comment($Message, $Echo = true) {
        if ($this->Destination == 'file') {
            $Char = self::COMMENT;
        } else {
            $Char = '--';
        }

        $Comment = $Char . ' ' . str_replace(self::NEWLINE, self::NEWLINE . self::COMMENT . ' ',
                $Message) . self::NEWLINE;

        fwrite($this->File, $Comment);
        if ($Echo) {
            if (defined('CONSOLE')) {
                echo $Comment;
            } else {
                $this->Comments[] = $Message;
            }
        }
    }

    /**
     * End the export and close the export file.
     *
     * This method must be called if BeginExport() has been called or else the export file will not be closed.
     */
    public function EndExport() {
        $this->EndTime = microtime(true);
        $this->TotalTime = $this->EndTime - $this->BeginTime;

        $this->Comment($this->Path);
        $this->Comment('Export Completed: ' . date('Y-m-d H:i:s'));
        $this->Comment(sprintf('Elapsed Time: %s', self::FormatElapsed($this->TotalTime)));

        if ($this->TestMode || $this->Controller->Param('dumpsql') || $this->CaptureOnly) {
            $Queries = implode("\n\n", $this->Queries);
            if ($this->Destination == 'database') {
                fwrite($this->File, $Queries);
            } else {
                $this->Comment($Queries, true);
            }
        }

        if ($this->UseStreaming) {
            //ob_flush();
        } else {
            if ($this->UseCompression() && function_exists('gzopen')) {
                gzclose($this->File);
            } else {
                fclose($this->File);
            }
        }
    }

    /**
     * Export a table to the export file.
     *
     * @param string $TableName the name of the table to export. This must correspond to one of the accepted Vanilla tables.
     * @param mixed $Query The query that will fetch the data for the export this can be one of the following:
     *  - <b>String</b>: Represents a string of SQL to execute.
     *  - <b>PDOStatement</b>: Represents an already executed query result set.
     *  - <b>Array</b>: Represents an array of associative arrays or objects containing the data in the export.
     * @param array $Mappings Specifies mappings, if any, between the source and the export where the keys represent the source columns and the values represent Vanilla columns.
     *      - If you specify a Vanilla column then it must be in the export structure contained in this class.
     *   - If you specify a MySQL type then the column will be added.
     *   - If you specify an array you can have the following keys: Column, and Type where Column represents the new column name and Type represents the MySQL type.
     *  For a list of the export tables and columns see $this->Structure().
     */
    public function ExportTable($TableName, $Query, $Mappings = array()) {
        $BeginTime = microtime(true);

        $RowCount = $this->_ExportTable($TableName, $Query, $Mappings);

        $EndTime = microtime(true);
        $Elapsed = self::FormatElapsed($BeginTime, $EndTime);
        $this->Comment("Exported Table: $TableName ($RowCount rows, $Elapsed)");
        fwrite($this->File, self::NEWLINE);
    }

    /**
     *
     *
     * @param $TableName
     * @param $Query
     * @param array $Mappings
     */
    protected function _ExportTableImport($TableName, $Query, $Mappings = array()) {
        // Backup the settings.
        $DestinationBak = $this->Destination;
        $this->Destination = 'file';

        $_FileBak = $this->File;
        $Path = dirname(__FILE__) . '/' . $TableName . '.csv';
        $this->Comment("Exporting To: $Path");
        $fp = fopen($Path, 'wb');
        $this->File = $fp;

        // First export the file to a file.
        $this->_ExportTable($TableName, $Query, $Mappings, array('NoEndline' => true));

        // Now define a table to import into.
        $this->_CreateExportTable($TableName, $Query, $Mappings);

        // Now load the data.
        $Sql = "load data local infile '$Path' into table {$this->DestDb}.{$this->DestPrefix}$TableName
         character set utf8
         columns terminated by ','
         optionally enclosed by '\"'
         escaped by '\\\\'
         lines terminated by '\\n'
         ignore 2 lines";
        $this->Query($Sql);

        // Restore the settings.
        $this->Destination = $DestinationBak;
        $this->File = $_FileBak;
    }

    /**
     * Convert database blobs into files.
     *
     * @param $Sql
     * @param $BlobColumn
     * @param $PathColumn
     * @param bool $Thumbnail
     */
    public function ExportBlobs($Sql, $BlobColumn, $PathColumn, $Thumbnail = false) {
        $this->Comment("Exporting blobs...");

        $Result = $this->Query($Sql);
        $Count = 0;
        while ($Row = mysql_fetch_assoc($Result)) {
            // vBulletin attachment hack (can't do this in MySQL)
            if (strpos($Row[$PathColumn], '.attach') && strpos($Row[$PathColumn], 'attachments/') !== false) {
                $PathParts = explode('/', $Row[$PathColumn]); // 3 parts

                // Split up the userid into a path, digit by digit
                $n = strlen($PathParts[1]);
                $DirParts = array();
                for ($i = 0; $i < $n; $i++) {
                    $DirParts[] = $PathParts[1]{$i};
                }
                $PathParts[1] = implode('/', $DirParts);

                // Rebuild full path
                $Row[$PathColumn] = implode('/', $PathParts);
            }

            $Path = $Row[$PathColumn];

            // Build path
            if (!file_exists(dirname($Path))) {
                $R = mkdir(dirname($Path), 0777, true);
                if (!$R) {
                    die("Could not create " . dirname($Path));
                }
            }

            if ($Thumbnail) {
                $PicPath = str_replace('/avat', '/pavat', $Path);
                $fp = fopen($PicPath, 'wb');
            } else {
                $fp = fopen($Path, 'wb');
            }
            if (!is_resource($fp)) {
                die("Could not open $Path.");
            }

            fwrite($fp, $Row[$BlobColumn]);
            fclose($fp);
            $this->Status('.');

            if ($Thumbnail) {
                if ($Thumbnail === true) {
                    $Thumbnail = 50;
                }

                $ThumbPath = str_replace('/avat', '/navat', $Path);
                GenerateThumbnail($PicPath, $ThumbPath, $Thumbnail, $Thumbnail);
            }
            $Count++;
        }
        $this->Status("$Count Blobs.\n");
        $this->Comment("$Count Blobs.", false);
    }

    /**
     * Process for writing an entire single table to file.
     *
     * @see ExportTable()
     * @param $TableName
     * @param $Query
     * @param array $Mappings
     * @param array $Options
     * @return int
     */
    protected function _ExportTable($TableName, $Query, $Mappings = array(), $Options = array()) {
        $fp = $this->File;

        // Make sure the table is valid for export.
        if (!array_key_exists($TableName, $this->_Structures)) {
            $this->Comment("Error: $TableName is not a valid export."
                . " The valid tables for export are " . implode(", ", array_keys($this->_Structures)));
            fwrite($fp, self::NEWLINE);

            return;
        }

        if ($this->Destination == 'database') {
            $this->_ExportTableDB($TableName, $Query, $Mappings);

            return;
        }

        // Check for a chunked query.
        $Query = str_replace('{from}', -2000000000, $Query);
        $Query = str_replace('{to}', 2000000000, $Query);

        if (strpos($Query, '{from}') !== false) {
            $this->_ExportTableDBChunked($TableName, $Query, $Mappings);

            return;
        }

        // If we are in test mode then limit the query.
        if ($this->TestMode && $this->TestLimit) {
            $Query = rtrim($Query, ';');
            if (stripos($Query, 'select') !== false && stripos($Query, 'limit') === false) {
                $Query .= " limit {$this->TestLimit}";
            }
        }

        $Structure = $this->_Structures[$TableName];

        $LastID = 0;
        $IDName = 'NOTSET';
        $FirstQuery = true;

        $Data = $this->Query($Query);

        // Loop through the data and write it to the file.
        $RowCount = 0;
        if ($Data !== false) {
            while (($Row = mysql_fetch_assoc($Data)) !== false) {
                $Row = (array)$Row; // export%202010-05-06%20210937.txt
                $this->CurrentRow =& $Row;
                $RowCount++;

                if ($FirstQuery) {
                    // Get the export structure.
                    $ExportStructure = $this->GetExportStructure($Row, $Structure, $Mappings, $TableName);
                    $RevMappings = $this->FlipMappings($Mappings);
                    $this->WriteBeginTable($fp, $TableName, $ExportStructure);

                    $FirstQuery = false;
                }
                $this->WriteRow($fp, $Row, $ExportStructure, $RevMappings);
            }
        }
        if ($Data !== false) {
            mysql_free_result($Data);
        }
        unset($Data);

        if (!isset($Options['NoEndline'])) {
            $this->WriteEndTable($fp);
        }

        mysql_close();

        return $RowCount;
    }

    /**
     *
     *
     * @param $TableName
     * @param $Query
     * @param array $Mappings
     */
    protected function _CreateExportTable($TableName, $Query, $Mappings = array()) {
        if (!$this->ScriptCreateTable) {
            return;
        }

        // Limit the query to grab any additional columns.
        $QueryStruct = rtrim($Query, ';') . ' limit 1';
        $Structure = $this->_Structures[$TableName];

        $Data = $this->Query($QueryStruct, true);
//      $Mb = function_exists('mb_detect_encoding');

        // Loop through the data and write it to the file.
        if ($Data === false) {
            return;
        }

        // Get the export structure.
        while (($Row = mysql_fetch_assoc($Data)) !== false) {
            $Row = (array)$Row;

            // Get the export structure.
            $ExportStructure = $this->GetExportStructure($Row, $Structure, $Mappings, $TableName);

            break;
        }
        mysql_close($Data);

        // Build the create table statement.
        $ColumnDefs = array();
        foreach ($ExportStructure as $ColumnName => $Type) {
            $ColumnDefs[] = "`$ColumnName` $Type";
        }
        $DestDb = '';
        if (isset($this->DestDb)) {
            $DestDb = $this->DestDb . '.';
        }

        $this->Query("drop table if exists {$DestDb}{$this->DestPrefix}$TableName");
        $CreateSql = "create table {$DestDb}{$this->DestPrefix}$TableName (\n  " . implode(",\n  ",
                $ColumnDefs) . "\n) engine=innodb";

        $this->Query($CreateSql);
    }

    /**
     *
     *
     * @see _ExportTable()
     * @param $TableName
     * @param $Query
     * @param array $Mappings
     */
    protected function _ExportTableDB($TableName, $Query, $Mappings = array()) {
        if ($this->HasFilter($Mappings) || strpos($Query, 'union all') !== false) {
            $this->_ExportTableImport($TableName, $Query, $Mappings);

            return;
        }

        // Check for a chunked query.
        if (strpos($Query, '{from}') !== false) {
            $this->_ExportTableDBChunked($TableName, $Query, $Mappings);

            return;
        }

        $DestDb = '';
        if (isset($this->DestDb)) {
            $DestDb = $this->DestDb . '.';
        }

        // Limit the query to grab any additional columns.
        $QueryStruct = $this->GetQueryStructure($Query, $TableName);
        $Structure = $this->_Structures[$TableName];

        $ExportStructure = $this->GetExportStructure($QueryStruct, $Structure, $Mappings, $TableName);

        $Mappings = $this->FlipMappings($Mappings);

        // Build the create table statement.
        $ColumnDefs = array();
        foreach ($ExportStructure as $ColumnName => $Type) {
            $ColumnDefs[] = "`$ColumnName` $Type";
        }
        if ($this->ScriptCreateTable) {
            $this->Query("drop table if exists {$DestDb}{$this->DestPrefix}$TableName");
            $CreateSql = "create table {$DestDb}{$this->DestPrefix}$TableName (\n  " . implode(",\n  ",
                    $ColumnDefs) . "\n) engine=innodb";
            $this->Query($CreateSql);
        }

        $Query = rtrim($Query, ';');
        // Build the insert statement.
        if ($this->TestMode && $this->TestLimit) {
            $Query .= " limit {$this->TestLimit}";
        }

        $InsertColumns = array();
        $SelectColumns = array();
        foreach ($ExportStructure as $ColumnName => $Type) {
            $InsertColumns[] = '`' . $ColumnName . '`';
            if (isset($Mappings[$ColumnName])) {
                $SelectColumns[$ColumnName] = $Mappings[$ColumnName];
            } else {
                $SelectColumns[$ColumnName] = $ColumnName;
            }
        }

        $Query = ReplaceSelect($Query, $SelectColumns);

        $InsertSql = "replace {$DestDb}{$this->DestPrefix}$TableName"
            . " (\n  " . implode(",\n   ", $InsertColumns) . "\n)\n"
            . $Query;

        $this->Query($InsertSql);
    }

    /**
     *
     *
     * @see _ExportTableDB()
     * @param $TableName
     * @param $Query
     * @param array $Mappings
     */
    protected function _ExportTableDBChunked($TableName, $Query, $Mappings = array()) {
        // Grab the table name from the first from.
        if (preg_match('`\sfrom\s([^\s]+)`', $Query, $Matches)) {
            $From = $Matches[1];
        } else {
            trigger_error("Could not figure out table for $TableName chunking.", E_USER_WARNING);

            return;
        }

        $Sql = "show table status like '{$From}';";
        $R = $this->Query($Sql, true);
        $Row = mysql_fetch_assoc($R);
        mysql_free_result($R);
        $Max = $Row['Auto_increment'];

        if (!$Max) {
            $Max = 2000000;
        }

        for ($i = 0; $i < $Max; $i += $this->ChunkSize) {
            $From = $i;
            $To = $From + $this->ChunkSize - 1;

            $Sql = str_replace(array('{from}', '{to}'), array($From, $To), $Query);
            $this->_ExportTableDB($TableName, $Sql, $Mappings);
        }
    }

    /**
     *
     *
     * @param $Columns
     * @return array
     */
    public function FixPermissionColumns($Columns) {
        $Result = array();
        foreach ($Columns as $Index => $Value) {
            if (is_string($Value) && strpos($Value, '.') !== false) {
                $Value = array('Column' => $Value, 'Type' => 'tinyint(1)');
            }
            $Result[$Index] = $Value;
        }

        return $Result;
    }

    /**
     *
     *
     * @param $Mappings
     * @return array
     */
    public function FlipMappings($Mappings) {
        $Result = array();
        foreach ($Mappings as $Column => $Mapping) {
            if (is_string($Mapping)) {
                $Result[$Mapping] = array('Column' => $Column);
            } else {
                $Col = $Mapping['Column'];
                $Mapping['Column'] = $Column;
                $Result[$Col] = $Mapping;
            }
        }

        return $Result;
    }

    /**
     * For outputting how long the export took.
     *
     * @param int $Start
     * @param int $End
     * @return string
     */
    static function FormatElapsed($Start, $End = null) {
        if ($End === null) {
            $Elapsed = $Start;
        } else {
            $Elapsed = $End - $Start;
        }

        $m = floor($Elapsed / 60);
        $s = $Elapsed - $m * 60;
        $Result = sprintf('%02d:%05.2f', $m, $s);

        return $Result;
    }

    /**
     *
     *
     * @param $Value
     * @return int|mixed|string
     */
    static function FormatValue($Value) {
        // Format the value for writing.
        if (is_null($Value)) {
            $Value = self::NULL;
        } elseif (is_numeric($Value)) {
            // Do nothing, formats as is.
        } elseif (is_string($Value)) {
            if (self::$Mb && mb_detect_encoding($Value) != 'UTF-8') {
                $Value = utf8_encode($Value);
            }

            $Value = str_replace(array("\r\n", "\r"), array(self::NEWLINE, self::NEWLINE), $Value);
            $Value = self::QUOTE
                . str_replace(self::$EscapeSearch, self::$EscapeReplace, $Value)
                . self::QUOTE;
        } elseif (is_bool($Value)) {
            $Value = $Value ? 1 : 0;
        } else {
            // Unknown format.
            $Value = self::NULL;
        }

        return $Value;
    }

    /**
     * Execute an sql statement and return the result.
     *
     * @param type $Sql
     * @param type $IndexColumn
     * @return type
     */
    public function Get($Sql, $IndexColumn = false) {
        $R = $this->_Query($Sql, true);
        $Result = array();

        while ($Row = mysql_fetch_assoc($R)) {
            if ($IndexColumn) {
                $Result[$Row[$IndexColumn]] = $Row;
            } else {
                $Result[] = $Row;
            }
        }

        return $Result;
    }

    /**
     * Determine the character set of the origin database.
     *
     * @param string $Table
     * @return string|bool Character set name or false.
     */
    public function GetCharacterSet($Table) {
        // First get the collation for the database.
        $Data = $this->Query("show table status like ':_{$Table}';");
        if (!$Data) {
            return false;
        }
        if ($StatusRow = mysql_fetch_assoc($Data)) {
            $Collation = $StatusRow['Collation'];
        } else {
            return false;
        }

        // Grab the character set from the database.
        $Data = $this->Query("show collation like '$Collation'");
        if (!$Data) {
            return false;
        }
        if ($CollationRow = mysql_fetch_assoc($Data)) {
            $CharacterSet = $CollationRow['Charset'];
            if (!defined('PORTER_CHARACTER_SET')) {
                define('PORTER_CHARACTER_SET', $CharacterSet);
            }

            return $CharacterSet;
        }

        return false;
    }

    /**
     *
     *
     * @return array
     */
    public function GetDatabasePrefixes() {
        // Grab all of the tables.
        $Data = $this->Query('show tables');
        if ($Data === false) {
            return array();
        }

        // Get the names in an array for easier parsing.
        $Tables = array();
        while (($Row = mysql_fetch_array($Data, MYSQL_NUM)) !== false) {
            $Tables[] = $Row[0];
        }
        sort($Tables);

        $Prefixes = array();

        // Loop through each table and get its prefixes.
        foreach ($Tables as $Table) {
            $PxFound = false;
            foreach ($Prefixes as $PxIndex => $Px) {
                $NewPx = $this->_GetPrefix($Table, $Px);
                if (strlen($NewPx) > 0) {
                    $PxFound = true;
                    if ($NewPx != $Px) {
                        $Prefixes[$PxIndex] = $NewPx;
                    }
                    break;
                }
            }
            if (!$PxFound) {
                $Prefixes[] = $Table;
            }
        }

        return $Prefixes;
    }

    /**
     *
     *
     * @param $A
     * @param $B
     * @return string
     */
    protected function _GetPrefix($A, $B) {
        $Length = min(strlen($A), strlen($B));
        $Prefix = '';

        for ($i = 0; $i < $Length; $i++) {
            if ($A[$i] == $B[$i]) {
                $Prefix .= $A[$i];
            } else {
                break;
            }
        }

        return $Prefix;
    }

    /**
     *
     *
     * @param $Row
     * @param $TableOrStructure
     * @param $Mappings
     * @param string $TableName
     * @return array
     */
    public function GetExportStructure($Row, $TableOrStructure, &$Mappings, $TableName = '_') {
        $ExportStructure = array();

        if (is_string($TableOrStructure)) {
            $Structure = $this->_Structures[$TableOrStructure];
        } else {
            $Structure = $TableOrStructure;
        }

        // See what columns to add to the end of the structure.
        foreach ($Row as $Column => $X) {
            if (array_key_exists($Column, $Mappings)) {
                $Mapping = $Mappings[$Column];
                if (is_string($Mapping)) {
                    if (array_key_exists($Mapping, $Structure)) {
                        // This an existing column.
                        $DestColumn = $Mapping;
                        $DestType = $Structure[$DestColumn];
                    } else {
                        // This is a created column.
                        $DestColumn = $Column;
                        $DestType = $Mapping;
                    }
                } elseif (is_array($Mapping)) {
                    if (!isset($Mapping['Column'])) {
                        trigger_error("Mapping for $Column does not have a 'Column' defined.", E_USER_ERROR);
                    }

                    $DestColumn = $Mapping['Column'];

                    if (isset($Mapping['Type'])) {
                        $DestType = $Mapping['Type'];
                    } elseif (isset($Structure[$DestColumn])) {
                        $DestType = $Structure[$DestColumn];
                    } else {
                        $DestType = 'varchar(255)';
                    }
//               $Mappings[$Column] = $DestColumn;
                }
            } elseif (array_key_exists($Column, $Structure)) {
                $DestColumn = $Column;
                $DestType = $Structure[$Column];

                // Verify column doesn't exist in Mapping array's Column element
                $MappingExists = false;
                foreach ($Mappings as $TestMapping) {
                    if ($TestMapping == $Column) {
                        $MappingExists = true;
                    } elseif (is_array($TestMapping) && array_key_exists('Column',
                            $TestMapping) && ($TestMapping['Column'] == $Column)
                    ) {
                        $MappingExists = true;
                    }
                }

                // Also add the column to the mapping.
                if (!$MappingExists) {
                    $Mappings[$Column] = $DestColumn;
                }
            } else {
                $DestColumn = '';
                $DestType = '';
            }

            // Check to see if we have to add the column to the export structure.
            if ($DestColumn && !array_key_exists($DestColumn, $ExportStructure)) {
                // TODO: Make sure $DestType is a valid MySQL type.
                $ExportStructure[$DestColumn] = $DestType;
            }
        }

        // Add filtered mappings since filters can add new columns.
        foreach ($Mappings as $Source => $Options) {
            if (!is_array($Options)) {
                // Force the mappings into the expanded array syntax for easier processing later.
                $Mappings[$Source] = array('Column' => $Options);
                continue;
            }

            if (!isset($Options['Column'])) {
                trigger_error("No column for $TableName(source).$Source.", E_USER_NOTICE);
                continue;
            }

            $DestColumn = $Options['Column'];

            if (!array_key_exists($Source, $Row) && !isset($Options['Type'])) {
                trigger_error("No column for $TableName(source).$Source.", E_USER_NOTICE);
            }

            if (isset($ExportStructure[$DestColumn])) {
                continue;
            }

            if (isset($Structure[$DestColumn])) {
                $DestType = $Structure[$DestColumn];
            } elseif (isset($Options['Type'])) {
                $DestType = $Options['Type'];
            } else {
                trigger_error("No column for $TableName.$DestColumn.", E_USER_NOTICE);
                continue;
            }

            $ExportStructure[$DestColumn] = $DestType;
            $Mappings[$Source] = $DestColumn;
        }

        return $ExportStructure;
    }

    /**
     *
     *
     * @param $Query
     * @param bool $Key
     * @return array
     */
    public function GetQueryStructure($Query, $Key = false) {
        $QueryStruct = rtrim($Query, ';') . ' limit 1';
        if (!$Key) {
            $Key = md5($QueryStruct);
        }
        if (isset($this->_QueryStructures[$Key])) {
            return $this->_QueryStructures[$Key];
        }

        $R = $this->Query($QueryStruct, true);
        $i = 0;
        $Result = array();
        while ($i < mysql_num_fields($R)) {
            $Meta = mysql_fetch_field($R, $i);
            $Result[$Meta->name] = $Meta->table;
            $i++;
        }
        $this->_QueryStructures[$Key] = $Result;

        return $Result;
    }

    /**
     *
     *
     * @param $Sql
     * @param $Default
     * @return mixed
     */
    public function GetValue($Sql, $Default) {
        $Data = $this->Get($Sql);
        if (count($Data) > 0) {
            $Data = array_shift($Data); // first row
            $Result = array_shift($Data); // first column

            return $Result;
        } else {
            return $Default;
        }
    }

    /**
     *
     *
     * @param $Structure
     * @param $GlobalStructure
     * @return string
     */
    protected function _GetTableHeader($Structure, $GlobalStructure) {
        $TableHeader = '';

        foreach ($Structure as $Column => $Type) {
            if (strlen($TableHeader) > 0) {
                $TableHeader .= self::DELIM;
            }
            if (array_key_exists($Column, $GlobalStructure)) {
                $TableHeader .= $Column;
            } else {
                $TableHeader .= $Column . ':' . $Type;
            }
        }

        return $TableHeader;
    }

    /**
     * Are there any filters set on this table?
     *
     * @param $Mappings
     * @return bool
     */
    public function HasFilter(&$Mappings) {
        foreach ($Mappings as $Column => $Info) {
            if (is_array($Info) && isset($Info['Filter'])) {
                return true;
            }
        }

        return false;
    }

    /**
     * Do standard HTML decoding in SQL to speed things up.
     *
     * @param string $TableName
     * @param string $ColumnName
     * @param string $PK
     */
    public function HTMLDecoderDb($TableName, $ColumnName, $PK) {
        $Common = array('&amp;' => '&', '&lt;' => '<', '&gt;' => '>', '&apos;' => "'", '&quot;' => '"', '&#39;' => "'");
        foreach ($Common as $From => $To) {
            $FromQ = mysql_escape_string($From);
            $ToQ = mysql_escape_string($To);
            $Sql = "update :_{$TableName} set $ColumnName = replace($ColumnName, '$FromQ', '$ToQ') where $ColumnName like '%$FromQ%'";

            $this->Query($Sql);
        }

        // Now decode the remaining rows.
        $Sql = "select * from :_$TableName where $ColumnName like '%&%;%'";
        $Result = $this->Query($Sql, true);
        while ($Row = mysql_fetch_assoc($Result)) {
            $From = $Row[$ColumnName];
            $To = HTMLDecoder($From);

            if ($From != $To) {
                $ToQ = mysql_escape_string($To);
                $Sql = "update :_{$TableName} set $ColumnName = '$ToQ' where $PK = {$Row[$PK]}";
                $this->Query($Sql, true);
            }
        }
    }

    /**
     * Determine if an index exists in a table
     *
     * @param $IndexName Name of the index to verify
     * @param $Table Name of the table the target index exists in
     * @return bool True if index exists, false otherwise
     */
    public function IndexExists($IndexName, $Table) {
        $IndexName = mysql_real_escape_string($IndexName);
        $Table = mysql_real_escape_string($Table);

        $Result = $this->Query("show index from `{$Table}` WHERE Key_name = '{$IndexName}'", true);

        return $Result && mysql_num_rows($Result);
    }

    /**
     *
     *
     * @return resource
     */
    protected function _OpenFile() {
//      if($this->UseStreaming) {
//         /** Setup the output to stream the file. */
//
//         // required for IE, otherwise Content-Disposition may be ignored
//         if(ini_get('zlib.output_compression'))
//            ini_set('zlib.output_compression', 'Off');
//
//         @ob_end_clean();
//
//
//         $fp = fopen('php://output', 'ab');
//         header("Content-Disposition: attachment; filename=\"{$this->Path}\"");
//         header('Content-Type: text/plain');
//         header("Content-Transfer-Encoding: binary");
//         header('Accept-Ranges: bytes');
//         header("Cache-control: private");
//         header('Pragma: private');
//         header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
//      } else {
        $this->Path = str_replace(' ', '_', $this->Path);
        if ($this->UseCompression()) {
            $fp = gzopen($this->Path, 'wb');
        } else {
            $fp = fopen($this->Path, 'wb');
        }
//      }
        $this->File = $fp;

        return $fp;
    }

    /**
     * Execute a SQL query on the current connection.
     *
     * Wrapper for _Query().
     *
     * @param string $Query The sql to execute.
     * @return resource The query cursor.
     */
    public function Query($Query, $Buffer = false) {
        if (!preg_match('`limit 1;$`', $Query)) {
            $this->Queries[] = $Query;
        }

        if ($this->Destination == 'database' && $this->CaptureOnly) {
            if (!preg_match('`^\s*select|show|describe|create`', $Query)) {
                return 'SKIPPED';
            }
        }

        return $this->_Query($Query, $Buffer);
    }

    /**
     * Execute a SQL query on the current connection.
     *
     * @see Query()
     * @param $Sql
     * @param bool $Buffer
     * @return resource
     */
    protected function _Query($Sql, $Buffer = false) {
        if (isset($this->_LastResult) && is_resource($this->_LastResult)) {
            mysql_free_result($this->_LastResult);
        }
        $Sql = str_replace(':_', $this->Prefix, $Sql); // replace prefix.
        if ($this->SourcePrefix) {
            $Sql = preg_replace("`\b{$this->SourcePrefix}`", $this->Prefix, $Sql); // replace prefix.
        }

        $Sql = rtrim($Sql, ';') . ';';

        $Connection = @mysql_connect($this->_Host, $this->_Username, $this->_Password);
        mysql_select_db($this->_DbName);
        mysql_query("set names {$this->CharacterSet}");

        if ($Buffer) {
            $Result = mysql_query($Sql, $Connection);
        } else {
            $Result = mysql_unbuffered_query($Sql, $Connection);
            if (is_resource($Result)) {
                $this->_LastResult = $Result;
            }
        }

        if ($Result === false) {
            echo '<pre>',
            htmlspecialchars($Sql),
            htmlspecialchars(mysql_error($Connection)),
            '</pre>';
            trigger_error(mysql_error($Connection));
        }

        return $Result;
    }

    /**
     * Send multiple SQL queries.
     *
     * @param string|array $SqlList An array of single query strings or a string of queries terminated with semi-colons.
     */
    public function QueryN($SqlList) {
        if (!is_array($SqlList)) {
            $SqlList = explode(';', $SqlList);
        }

        foreach ($SqlList as $Sql) {
            $Sql = trim($Sql);
            if ($Sql) {
                $this->Query($Sql);
            }
        }
    }

    /**
     * Set database connection details.
     *
     * @param null $Host
     * @param null $Username
     * @param null $Password
     * @param null $DbName
     */
    public function SetConnection($Host = null, $Username = null, $Password = null, $DbName = null) {
        $this->_Host = $Host;
        $this->_Username = $Username;
        $this->_Password = $Password;
        $this->_DbName = $DbName;
    }

    /**
     * Echo a status message to the console.
     *
     * @param $Msg
     */
    public function Status($Msg) {
        if (defined('CONSOLE')) {
            echo $Msg;
        }
    }

    /**
     * Returns an array of all the expected export tables and expected columns in the exports.
     *
     * When exporting tables using ExportTable() all of the columns in this structure will always be exported
     * in the order here, regardless of how their order in the query.
     *
     * @return array
     * @see vnExport::ExportTable()
     */
    public function Structures() {
        return $this->_Structures;
    }

    /**
     * Whether or not to use compression on the output file.
     *
     * @param bool $Value The value to set or NULL to just return the value.
     * @return bool
     */
    public function UseCompression($Value = null) {
        if ($Value !== null) {
            $this->_UseCompression = $Value;
        }

        return $this->_UseCompression && $this->Destination == 'file' && !$this->UseStreaming && function_exists('gzopen');
    }

    /**
     * Returns the version of export file that will be created with this export.
     * The version is used when importing to determine the format of this file.
     *
     * @return string
     */
    public function Version() {
        return APPLICATION_VERSION;
    }

    /**
     * Checks whether or not a table and columns exist in the database.
     *
     * @param string $Table The name of the table to check.
     * @param array $Columns An array of column names to check.
     * @return bool|array The method will return one of the following
     *  - true: If table and all of the columns exist.
     *  - false: If the table does not exist.
     *  - array: The names of the missing columns if one or more columns don't exist.
     */
    public function Exists($Table, $Columns = array()) {
        static $_Exists = array();

        if (!isset($_Exists[$Table])) {
            $Result = $this->Query("show table status like ':_$Table'", true);
            if (!$Result) {
                $_Exists[$Table] = false;
            } elseif (!mysql_fetch_assoc($Result)) {
                $_Exists[$Table] = false;
            } else {
                mysql_free_result($Result);
                $Desc = $this->Query('describe :_' . $Table);
                if ($Desc === false) {
                    $_Exists[$Table] = false;
                } else {
                    if (is_string($Desc)) {
                        die($Desc);
                    }

                    $Cols = array();
                    while (($TD = mysql_fetch_assoc($Desc)) !== false) {
                        $Cols[$TD['Field']] = $TD;
                    }
                    mysql_free_result($Desc);
                    $_Exists[$Table] = $Cols;
                }
            }
        }

        if ($_Exists[$Table] == false) {
            return false;
        }

        $Columns = (array)$Columns;

        if (count($Columns) == 0) {
            return true;
        }

        $Missing = array();
        $Cols = array_keys($_Exists[$Table]);
        foreach ($Columns as $Column) {
            if (!in_array($Column, $Cols)) {
                $Missing[] = $Column;
            }
        }

        return count($Missing) == 0 ? true : $Missing;
    }

    /**
     * Checks all required source tables are present.
     *
     * @param array $RequiredTables
     * @return array|string
     */
    public function VerifySource($RequiredTables) {
        $MissingTables = false;
        $CountMissingTables = 0;
        $MissingColumns = array();

        foreach ($RequiredTables as $ReqTable => $ReqColumns) {
            $TableDescriptions = $this->Query('describe :_' . $ReqTable);
            //echo 'describe '.$Prefix.$ReqTable;
            if ($TableDescriptions === false) { // Table doesn't exist
                $CountMissingTables++;
                if ($MissingTables !== false) {
                    $MissingTables .= ', ' . $ReqTable;
                } else {
                    $MissingTables = $ReqTable;
                }
            } else {
                // Build array of columns in this table
                $PresentColumns = array();
                while (($TD = mysql_fetch_assoc($TableDescriptions)) !== false) {
                    $PresentColumns[] = $TD['Field'];
                }
                // Compare with required columns
                foreach ($ReqColumns as $ReqCol) {
                    if (!in_array($ReqCol, $PresentColumns)) {
                        $MissingColumns[$ReqTable][] = $ReqCol;
                    }
                }

                mysql_free_result($TableDescriptions);
            }
        }

        // Return results
        if ($MissingTables === false) {
            if (count($MissingColumns) > 0) {
                $Result = array();

                // Build a string of missing columns.
                foreach ($MissingColumns as $Table => $Columns) {
                    $Result[] = "The $Table table is missing the following column(s): " . implode(', ', $Columns);
                }

                return implode("<br />\n", $Result);
            } else {
                return true;
            } // Nothing missing!
        } elseif ($CountMissingTables == count($RequiredTables)) {
            $Result = 'The required tables are not present in the database. Make sure you entered the correct database name and prefix and try again.';

            // Guess the prefixes to notify the user.
            $Prefixes = $this->GetDatabasePrefixes();
            if (count($Prefixes) == 1) {
                $Result .= ' Based on the database you provided, your database prefix is probably ' . implode(', ',
                        $Prefixes);
            } elseif (count($Prefixes) > 0) {
                $Result .= ' Based on the database you provided, your database prefix is probably one of the following: ' . implode(', ',
                        $Prefixes);
            }

            return $Result;
        } else {
            return 'Missing required database tables: ' . $MissingTables;
        }
    }

    /**
     * Start table write to file.
     *
     * @param $fp
     * @param $TableName
     * @param $ExportStructure
     */
    public function WriteBeginTable($fp, $TableName, $ExportStructure) {
        $TableHeader = '';

        foreach ($ExportStructure as $Key => $Value) {
            if (is_numeric($Key)) {
                $Column = $Value;
                $Type = '';
            } else {
                $Column = $Key;
                $Type = $Value;
            }

            if (strlen($TableHeader) > 0) {
                $TableHeader .= self::DELIM;
            }

            if ($Type) {
                $TableHeader .= $Column . ':' . $Type;
            } else {
                $TableHeader .= $Column;
            }
        }

        fwrite($fp, 'Table: ' . $TableName . self::NEWLINE);
        fwrite($fp, $TableHeader . self::NEWLINE);
    }

    /**
     * End table write to file.
     *
     * @param $fp
     */
    public function WriteEndTable($fp) {
        fwrite($fp, self::NEWLINE);
    }

    /**
     * Write a table's row to file.
     *
     * @param $fp
     * @param $Row
     * @param $ExportStructure
     * @param $RevMappings
     */
    public function WriteRow($fp, $Row, $ExportStructure, $RevMappings) {
        $this->CurrentRow =& $Row;

        // Loop through the columns in the export structure and grab their values from the row.
        $ExRow = array();
        foreach ($ExportStructure as $Field => $Type) {
            // Get the value of the export.
            $Value = null;
            if (isset($RevMappings[$Field]) && isset($Row[$RevMappings[$Field]['Column']])) {
                // The column is mapped.
                $Value = $Row[$RevMappings[$Field]['Column']];
            } elseif (array_key_exists($Field, $Row)) {
                // The column has an exact match in the export.
                $Value = $Row[$Field];
            }

            // Check to see if there is a callback filter.
            $Filtered = false;
            if (isset($RevMappings[$Field]['Filter'])) {
                $Callback = $RevMappings[$Field]['Filter'];

                $Row2 =& $Row;
                $Value = call_user_func($Callback, $Value, $Field, $Row2, $Field);
                $Row = $this->CurrentRow;
                $Filtered = true;
            }

            // Format the value for writing.
            if (is_null($Value)) {
                $Value = self::NULL;
            } elseif (is_integer($Value)) {
                // Do nothing, formats as is.
                // Only allow ints because PHP allows weird shit as numeric like "\n\n.1"
            } elseif (is_string($Value) || is_numeric($Value)) {
                // Check to see if there is a callback filter.
                if (!isset($RevMappings[$Field])) {
                    //$Value = call_user_func($Filters[$Field], $Value, $Field, $Row);
                } else {
                    if (self::$Mb && mb_detect_encoding($Value) != 'UTF-8') {
                        $Value = utf8_encode($Value);
                    }
                }

                $Value = str_replace(array("\r\n", "\r"), array(self::NEWLINE, self::NEWLINE), $Value);
                $Value = self::QUOTE
                    . str_replace(self::$EscapeSearch, self::$EscapeReplace, $Value)
                    . self::QUOTE;
            } elseif (is_bool($Value)) {
                $Value = $Value ? 1 : 0;
            } else {
                // Unknown format.
                $Value = self::NULL;
            }

            $ExRow[] = $Value;
        }
        // Write the data.
        fwrite($fp, implode(self::DELIM, $ExRow));
        // End the record.
        fwrite($fp, self::NEWLINE);
    }

    /**
     * SQL to get the file extension from a string.
     *
     * @param string $ColumnName
     * @return string SQL.
     */
    public static function FileExtension($ColumnName) {
        return "right($ColumnName, instr(reverse($ColumnName), '.'))";
    }
}

?>
<?php


/* Contents included from class.exportcontroller.php */
?><?php
/**
 * @copyright Vanilla Forums Inc. 2010-2015
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

/**
 * Generic controller implemented by forum-specific ones.
 */
abstract class ExportController {

    /** @var array Database connection info */
    protected $DbInfo = array();

    /** @var array Required tables, columns set per exporter */
    protected $SourceTables = array();

    /** @var bool Whether to stream result; deprecated. */
    protected $UseStreaming = false;

    /** @var ExportModel */
    protected $Ex = null;

    /** Forum-specific export routine */
    abstract protected function ForumExport($Ex);

    /**
     * Construct and set the controller's properties from the posted form.
     */
    public function __construct() {
        $this->HandleInfoForm();

        $this->Ex = new ExportModel;
        $this->Ex->Controller = $this;
        $this->Ex->SetConnection($this->DbInfo['dbhost'], $this->DbInfo['dbuser'], $this->DbInfo['dbpass'],
            $this->DbInfo['dbname']);
        $this->Ex->Prefix = $this->DbInfo['prefix'];
        $this->Ex->Destination = $this->Param('dest', 'file');
        $this->Ex->DestDb = $this->Param('destdb', null);
        $this->Ex->TestMode = $this->Param('test', false);
        $this->Ex->UseStreaming = false; //$this->UseStreaming;
    }

    /**
     * Set CDN file prefix if one is given.
     *
     * @return string
     */
    public function CdnPrefix() {
        $Cdn = rtrim($this->Param('cdn', ''), '/');
        if ($Cdn) {
            $Cdn .= '/';
        }

        return $Cdn;
    }

    /**
     * Logic for export process.
     */
    public function DoExport() {
        global $Supported;

        // Test connection
        $Msg = $this->TestDatabase();
        if ($Msg === true) {

            // Test src tables' existence structure
            $Msg = $this->Ex->VerifySource($this->SourceTables);
            if ($Msg === true) {
                // Good src tables - Start dump
                $this->Ex->UseCompression(true);
                $this->Ex->FilenamePrefix = $this->DbInfo['dbname'];
                set_time_limit(60 * 60);

//            ob_start();
                $this->ForumExport($this->Ex);
//            $Errors = ob_get_clean();

                $Msg = $this->Ex->Comments;

                // Write the results.
                if ($this->Ex->UseStreaming) {
                    exit;
                } else {
                    // Send no path if we don't know where it went.
                    $RelativePath = ($this->Param('destpath', false)) ? false : $this->Ex->Path;
                    ViewExportResult($Msg, 'Info', $RelativePath);
                }
            } else {
                ViewForm(array('Supported' => $Supported, 'Msg' => $Msg, 'Info' => $this->DbInfo));
            } // Back to form with error
        } else {
            ViewForm(array('Supported' => $Supported, 'Msg' => $Msg, 'Info' => $this->DbInfo));
        } // Back to form with error
    }

    /**
     * User submitted db connection info.
     */
    public function HandleInfoForm() {
        $this->DbInfo = array(
            'dbhost' => $_POST['dbhost'],
            'dbuser' => $_POST['dbuser'],
            'dbpass' => $_POST['dbpass'],
            'dbname' => $_POST['dbname'],
            'type' => $_POST['type'],
            'prefix' => preg_replace('/[^A-Za-z0-9_-]/', '', $_POST['prefix'])
        );
        $this->UseStreaming = array_key_exists('savefile', $_POST) ? false : true;
    }

    /**
     * Retrieve a parameter passed to the export process.
     *
     * @param string $Name
     * @param mixed $Default Fallback value.
     * @return mixed Value of the parameter.
     */
    public function Param($Name, $Default = false) {
        if (isset($_POST[$Name])) {
            return $_POST[$Name];
        } elseif (isset($_GET[$Name])) {
            return $_GET[$Name];
        } else {
            return $Default;
        }
    }

    /**
     * Test database connection info.
     *
     * @return string|bool True on success, message on failure.
     */
    public function TestDatabase() {
        // Connection
        if ($C = @mysql_connect($this->DbInfo['dbhost'], $this->DbInfo['dbuser'], $this->DbInfo['dbpass'])) {
            // Database
            if (mysql_select_db($this->DbInfo['dbname'], $C)) {
                mysql_close($C);
                $Result = true;
            } else {
                mysql_close($C);
                $Result = "Could not find database '{$this->DbInfo['dbname']}'.";
            }
        } else {
            $Result = 'Could not connect to ' . $this->DbInfo['dbhost'] . ' as ' . $this->DbInfo['dbuser'] . ' with given password.';
        }

        return $Result;
    }
}

?>
<?php


/* Contents included from functions/core-functions.php */
?><?php

/**
 * Error handler.
 *
 * @param $errno
 * @param $errstr
 */
function ErrorHandler($errno, $errstr) {
    if (defined(DEBUG) || ($errno != E_DEPRECATED && $errno != E_USER_DEPRECATED)) {
        echo "Error: ({$errno}) {$errstr}\n";
        die();
    }
}

/**
 * Debug echo tool.
 *
 * @param $Var
 * @param string $Prefix
 */
function decho($Var, $Prefix = 'debug') {
    echo '<pre><b>' . $Prefix . '</b>: ' . htmlspecialchars(print_r($Var, true)) . '</pre>';
}

/**
 * Write out a value passed as bytes to its most readable format.
 */
function FormatMemorySize($Bytes, $Precision = 1) {
    $Units = array('B', 'K', 'M', 'G', 'T');

    $Bytes = max((int)$Bytes, 0);
    $Pow = floor(($Bytes ? log($Bytes) : 0) / log(1024));
    $Pow = min($Pow, count($Units) - 1);

    $Bytes /= pow(1024, $Pow);

    $Result = round($Bytes, $Precision) . $Units[$Pow];

    return $Result;
}

/**
 * Test filesystem permissions.
 */
function TestWrite() {
    // Create file
    $file = 'vanilla2test.txt';
    @touch($file);
    if (is_writable($file)) {
        @unlink($file);

        return true;
    } else {
        return false;
    }
}

/**
 *
 *
 * @param $Key
 * @param null $Collection
 * @param string $Default
 * @return string
 */
function GetValue($Key, $Collection = null, $Default = '') {
    if (!$Collection) {
        $Collection = $_POST;
    }
    if (array_key_exists($Key, $Collection)) {
        return $Collection[$Key];
    }

    return $Default;
}

/**
 * Create a thumbnail from an image file.
 *
 * @param $Path
 * @param $ThumbPath
 * @param int $Height
 * @param int $Width
 * @return bool
 */
function GenerateThumbnail($Path, $ThumbPath, $Height = 50, $Width = 50) {
    list($WidthSource, $HeightSource, $Type) = getimagesize($Path);

    $XCoord = 0;
    $YCoord = 0;
    $HeightDiff = $HeightSource - $Height;
    $WidthDiff = $WidthSource - $Width;
    if ($WidthDiff > $HeightDiff) {
        // Crop the original width down
        $NewWidthSource = round(($Width * $HeightSource) / $Height);

        // And set the original x position to the cropped start point.
        $XCoord = round(($WidthSource - $NewWidthSource) / 2);
        $WidthSource = $NewWidthSource;
    } else {
        // Crop the original height down
        $NewHeightSource = round(($Height * $WidthSource) / $Width);

        // And set the original y position to the cropped start point.
        $YCoord = round(($HeightSource - $NewHeightSource) / 2);
        $HeightSource = $NewHeightSource;
    }

    try {
        switch ($Type) {
            case 1:
                $SourceImage = imagecreatefromgif($Path);
                break;
            case 2:
                $SourceImage = imagecreatefromjpeg($Path);
                break;
            case 3:
                $SourceImage = imagecreatefrompng($Path);
                imagealphablending($SourceImage, true);
                break;
        }

        $TargetImage = imagecreatetruecolor($Width, $Height);
        imagecopyresampled($TargetImage, $SourceImage, 0, 0, $XCoord, $YCoord, $Width, $Height, $WidthSource,
            $HeightSource);
        imagedestroy($SourceImage);

        switch ($Type) {
            case 1:
                imagegif($TargetImage, $ThumbPath);
                break;
            case 2:
                imagejpeg($TargetImage, $ThumbPath);
                break;
            case 3:
                imagepng($TargetImage, $ThumbPath);
                break;
        }
        imagedestroy($TargetImage);
    } catch (Exception $e) {
        echo "Could not generate a thumnail for " . $TargetImage;
    }
}

/**
 *
 *
 * @param $Sql
 * @return array
 */
function ParseSelect($Sql) {
    if (!preg_match('`^\s*select\s+(.+)\s+from\s+(.+)\s*`is', $Sql, $Matches)) {
        trigger_error("Could not parse '$Sql'", E_USER_ERROR);
    }
    $Result = array('Select' => array(), 'From' => '');
    $Select = $Matches[1];
    $From = $Matches[2];

    // Replace commas within function calls.
    $Select = preg_replace_callback('`\(([^)]+?)\)`', '_ReplaceCommas', $Select);
//   echo($Select);
    $Parts = explode(',', $Select);

    $Selects = array();
    foreach ($Parts as $Expr) {
        $Expr = trim($Expr);
        $Expr = str_replace('!COMMA!', ',', $Expr);

        // Check for the star match.
        if (preg_match('`(\w+)\.\*`', $Expr, $Matches)) {
            $Result['Star'] = $Matches[1];
        }

        // Check for an alias.
        if (preg_match('`^(.*)\sas\s(.*)$`is', $Expr, $Matches)) {
//         decho($Matches, 'as');
            $Alias = trim($Matches[2], '`');
            $Selects[$Alias] = $Matches[1];
        } elseif (preg_match('`^[a-z_]?[a-z0-9_]*$`i', $Expr)) {
            // We are just selecting one column.
            $Selects[$Expr] = $Expr;
        } elseif (preg_match('`^[a-z_]?[a-z0-9_]*\.([a-z_]?[a-z0-9_]*)$`i', $Expr, $Matches)) {
            // We are looking at an alias'd select.
            $Alias = $Matches[1];
            $Selects[$Alias] = $Expr;
        } else {
            $Selects[] = $Expr;
        }
    }

    $Result['Select'] = $Selects;
    $Result['From'] = $From;
    $Result['Source'] = $Sql;

    return $Result;
}

/**
 * Replace commas with a temporary placeholder.
 *
 * @param $Matches
 * @return mixed
 */
function _ReplaceCommas($Matches) {
    return str_replace(',', '!COMMA!', $Matches[0]);
}

/**
 *
 * @param type $Sql
 * @param array $Columns An array in the form Alias => Column or just Column
 * @return type
 */
function ReplaceSelect($Sql, $Columns) {
    if (is_string($Sql)) {
        $Parsed = ParseSelect($Sql);
    } else {
        $Parsed = $Sql;
    }

    // Set a prefix for new selects.
    if (isset($Parsed['Star'])) {
        $Px = $Parsed['Star'] . '.';
    } else {
        $Px = '';
    }

    $Select = $Parsed['Select'];

    $NewSelect = array();
    foreach ($Columns as $Index => $Value) {
        if (is_numeric($Index)) {
            $Alias = $Value;
        } else {
            $Alias = $Index;
        }

        if (isset($Select[$Value])) {
            $NewSelect[$Alias] = $Select[$Value];
        } else {
            $NewSelect[$Alias] = $Px . $Value;
        }
    }
    $Parsed['Select'] = $NewSelect;

    if (is_string($Sql)) {
        return SelectString($Parsed);
    } else {
        return $Parsed;
    }
}

/**
 *
 *
 * @param $Parsed
 * @return string
 */
function SelectString($Parsed) {
    // Build the select.
    $Parts = $Parsed['Select'];
    $Selects = array();
    foreach ($Parts as $Alias => $Expr) {
        if (is_numeric($Alias) || $Alias == $Expr) {
            $Selects[] = $Expr;
        } else {
            $Selects[] = "$Expr as `$Alias`";
        }
    }
    $Select = implode(",\n  ", $Selects);

    $From = $Parsed['From'];

    $Result = "select\n  $Select\nfrom $From";

    return $Result;
}

/**
 *
 *
 * @param $Paths
 * @param string $Delimiter
 * @return mixed
 */
function CombinePaths($Paths, $Delimiter = '/') {
    if (is_array($Paths)) {
        $MungedPath = implode($Delimiter, $Paths);
        $MungedPath = str_replace(array($Delimiter . $Delimiter . $Delimiter, $Delimiter . $Delimiter),
            array($Delimiter, $Delimiter), $MungedPath);

        return str_replace(array('http:/', 'https:/'), array('http://', 'https://'), $MungedPath);
    } else {
        return $Paths;
    }
}

/**
 * Take the template package, add our new name, and make a new package from it.
 *
 * @param string $Name
 */
function SpawnPackage($Name) {

    if ($Name && strlen($Name) > 2) {
        $Name = preg_replace('/[^A-Za-z0-9]/', '', $Name);
        $Template = file_get_contents(__DIR__ . '/../tpl_package.txt');
        file_put_contents(__DIR__ . '/../packages/' . $Name . '.php', str_replace('__NAME__', $Name, $Template));
        echo "Created new package: " . $Name . "\n";
    } else {
        echo "Invalid name: 2+ alphanumeric characters only.";
    }
}

?>
<?php


/* Contents included from functions/render-functions.php */
?><?php
/**
 * Views for Vanilla 2 export tools.
 *
 * @copyright Vanilla Forums Inc. 2010-2015
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

/**
 * HTML header.
 */
function PageHeader() {
echo '<?xml version="1.0" encoding="UTF-8"?>';
?>
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
<head>
    <title>Vanilla Porter - Forum Export Tool</title>
    <!-- Contents included from style.css -->
<style>
body {
   font-family: 'lucida grande','Lucida Sans Unicode', tahoma, sans-serif;
   background: url('http://vanillaforums.com/porter/slicesplash.jpg') top center no-repeat #C7E6FB;
   margin: 0px;
   padding: 0px;
   text-align: center;
}
a,
a:link,
a:active,
a:visited {
   color: #2786C2;
   text-decoration: none;
   }
a:hover {
   color: #FF0084 !important;
   text-decoration: underline;
   }
div.Title {
   background:#E2F4FF none repeat scroll 0 0;
   border-top: 1px solid #A5D0E7;
   border-bottom: 1px solid #A5D0E7;
   margin: 50px 0;
   padding: 30px 0 4px;
}
div.Title h1 {
   text-align: left;
   width: 600px;
   margin: 0 auto;
}
div.Title img {
   top: 20px;
   position: absolute;
}
div.Title p {
   padding: 0 0 0 270px;
   margin: 0;
   font-size: 30px;
}

h1 {
   font-family: Helvetica, Arial, Verdana;
   color: #02455B;
   width: 568px;
   margin: 0 auto;
   padding: 0;
   font-size: 180%;
}
div.Form {
   text-align: center;
}
div.Form ul {
   width: 500px;
   margin: 0 auto;
   padding: 0;
}

div.Errors {
   background: #d00;
   padding: 20px 8px !important;
   margin: 0 0 10px;
   border-bottom: 1px solid #C0E7F5;
}
.Errors li {
   padding: 4px 0 !important;
   border: 0px !important;
   margin: 0px !important;
   color: #fff !important;
   font-size: 16px;
   line-height: 150%;
}
.Errors li pre,
.Errors li code {
   border-radius: 3px;
   -moz-border-radius: 3px;
   -webkit-border-radius: 3px;
   border: 1px solid #b00;
   background: #c00;
   margin: 10px 0 0;
   padding: 4px 8px;
   display: block;
   font-size: 13px;
   font-weight: normal;
   font-family: monospace;
}
.Errors li a {
   color: #ffff00;
   text-decoration: underline;
}
.Errors li a:hover {
   color: #ff0 !important;
   text-decoration: none;
}
.Hidden {
   display: none;
}
/* Forms */
form {
   margin: 0 0 20px;
   text-align: right;
}
form ul {
   text-align: left;
   list-style: none;
   margin: 0px;
   padding: 10px;
}
form ul li {
   padding: 10px 0;
   font-size: 18px;
}
form ul li.Warning {
   padding-bottom: 0;
   border-bottom: 0;
   font-size: 17px;
}
form ul li.Warning div {
   font-size: 14px;
   line-height: 1.6;
   color: #000;
   padding: 16px 0 8px;
}
form label {
   font-family: Arial, Helvetica, Verdana;
   font-weight: bold;
   display: block;
   padding: 8px 0 0;
   font-size: 110%;
   color: #02455B;
}
form label span {
   font-size: 13px;
   color: #555;
   font-weight: normal;
   padding: 0 0 0 10px;
}
form select {
   border-radius: 4px;
   -moz-border-radius: 4px;
   -webkit-border-radius: 4px;
   font-size: 110%;
   padding: 8px;
   width: 496px;
   border: 1px solid #ccc;
   color: #555;
}
form input.InputBox {
   border-radius: 4px;
   -moz-border-radius: 4px;
   -webkit-border-radius: 4px;
   font-size: 110%;
   padding: 8px;
   width: 480px;
   border: 1px solid #ccc;
   color: #555;
}
form input.InputBox:focus {
   color: #000;
   background: #FFFEDE;
   border: 1px solid #aaa;
}
form li.Last {
   padding: 12px 0 2px;
   border-bottom: 0;
}
div.Button {
   text-align: right;
   padding: 12px 0 30px;
   width: 496px;
   margin: 0 auto;
}
div.Button a,
input.Button {
   cursor: pointer;
   font-family: arial, helvetica, verdana;
   font-size: 25px;
   font-weight: bold;
   color: #02475A;
   text-shadow: 0 1px 0 #fff;
   margin: 0;
   padding: 3px 10px;
   background: url('http://vanillaforums.com/porter/buttonbg.png') repeat-x center left #f8f8f8;
   border: 1px solid #999;
   border-radius: 3px;
   -moz-border-radius: 3px;
   -webkit-border-radius: 3px;
   box-shadow: 0px 0px 2px #999;
   -moz-box-shadow: 0px 0px 2px #999;
   -webkit-box-shadow: 0px 0px 2px #999;  
}
div.Button a {
   padding: 4px 8px;
}
div.Button a:hover,
input.Button:hover {
   text-decoration: none;
   color: #111;
   border: 1px solid #666;
}
div.Button a:focus,
input.Button:focus {
   background: #eee;
}
/* readme.html */
div.Info {
   text-align: left;
   width: 568px;
   margin: 0 auto 0px;
   line-height: 1.6;
}
div.Info h1 {
   padding: 6px 0 0;
   margin: 0;
}
div.Info p {
   color: #000;
   padding: 3px 0 6px;
   margin: 0;
}
div.Info li {
   color: #000;
   padding: 1px 0;
   margin: 0;
}
.Version {
   font-size: 9pt;
   font-weight: normal;
}
.Info .DownloadLink {
   padding: 10px 0 100px;
}

/* Feature list */
.Info dl { }
.Info dt {
   float: left;
   clear: left;
   width: 180px;

}
.Info dt, dd {
   border-bottom: 1px solid #E2F4FF;
   height: 30px;
}

/* Feature table */
table.Features {
   padding: 0 0 50px;
   margin: 0 auto;
}
table.Features td {
   padding: 2px 12px;
   border-right: 1px solid #E2F4FF;
   border-bottom: 1px dashed #E2F4FF;
}
.FeatureName {
   text-align: left;
}
.No {
   color: darkred;
   font-width: bold;
   font-size: 1.2em;
}
.Yes {
   color: limegreen;
   text-shadow: 0px 1px #555;
   font-width: bold;
   font-size: 1.2em;
}
.FeatureTitle {
   margin-bottom: 0;
}

/* Feature table column headings */
th.Platform {
  /* Something you can count on */
  height: 140px;
  white-space: nowrap;
  font-weight: normal;
}
th.Platform > div {
  transform:
    /* Magic Numbers */
    translate(25px, 51px)
    /* 45 is really 360 - 45 */
    rotate(315deg);
  width: 30px;
}
th.Platform > div > span {
  border-bottom: 1px solid #E2F4FF;
  padding: 5px 4px;
}
</style>
</head>
<body>
<div id="Frame">
    <div id="Content">
        <div class="Title">
            <h1>
                <img src="http://vanillaforums.com/porter/vanilla_logo.png" alt="Vanilla"/>

                <p>Vanilla Porter <span class="Version">Version <?php echo APPLICATION_VERSION; ?></span></p>
            </h1>
        </div>
        <?php
        }

        /**
         * HTML footer.
         */
        function PageFooter() {
        ?>
    </div>
</div>
</body>
</html><?php

}

/**
 * Message: Write permission fail.
 */
function ViewNoPermission($msg) {
    PageHeader(); ?>
    <div class="Messages Errors">
        <ul>
            <li><?php echo $msg; ?></li>
        </ul>
    </div>

    <?php PageFooter();
}

/**
 * Form: Database connection info.
 */
function ViewForm($Data) {
    $forums = GetValue('Supported', $Data, array());
    $msg = GetValue('Msg', $Data, '');
    $CanWrite = GetValue('CanWrite', $Data, null);

    if ($CanWrite === null) {
        $CanWrite = TestWrite();
    }
    if (!$CanWrite) {
        $msg = 'The porter does not have write permission to write to this folder. You need to give the porter permission to create files so that it can generate the export file.' . $msg;
    }

    if (defined('CONSOLE')) {
        echo $msg . "\n";

        return;
    }

    PageHeader(); ?>
    <div class="Info">
        Howdy, stranger! Glad to see you headed our way.
        For help,
        <a href="http://docs.vanillaforums.com/developers/importing/porter" style="text-decoration:underline;"
           target="_blank">peek at the docs</a>.
        To see what data we can grab from your platform,
        <a href="?features=1" style="text-decoration:underline;">see this table</a>.
    </div>
    <form action="<?php echo $_SERVER['PHP_SELF'] . '?' . http_build_query($_GET); ?>" method="post">
        <input type="hidden" name="step" value="info"/>

        <div class="Form">
            <?php if ($msg != '') : ?>
                <div class="Messages Errors">
                    <ul>
                        <li><?php echo $msg; ?></li>
                    </ul>
                </div>
            <?php endif; ?>
            <ul>
                <li>
                    <label>Source Forum Type</label>
                    <select name="type" id="ForumType" onchange="updatePrefix();">
                        <?php foreach ($forums as $forumClass => $forumInfo) : ?>
                            <option value="<?php echo $forumClass; ?>"<?php
                            if (GetValue('type') == $forumClass) {
                                echo ' selected="selected"';
                            } ?>><?php echo $forumInfo['name']; ?></option>
                        <?php endforeach; ?>
                    </select>
                </li>
                <li>
                    <label>Table Prefix <span>Most installations have a database prefix. If you&rsquo;re sure you don&rsquo;t have one, leave this blank.</span></label>
                    <input class="InputBox" type="text" name="prefix"
                           value="<?php echo htmlspecialchars(GetValue('prefix')) != '' ? htmlspecialchars(GetValue('prefix')) : $forums['vanilla1']['prefix']; ?>"
                           id="ForumPrefix"/>
                </li>
                <li>
                    <label>Database Host <span>Usually "localhost".</span></label>
                    <input class="InputBox" type="text" name="dbhost"
                           value="<?php echo htmlspecialchars(GetValue('dbhost', '', 'localhost')) ?>"/>
                </li>
                <li>
                    <label>Database Name</label>
                    <input class="InputBox" type="text" name="dbname"
                           value="<?php echo htmlspecialchars(GetValue('dbname')) ?>"/>
                </li>
                <li>
                    <label>Database Username</label>
                    <input class="InputBox" type="text" name="dbuser"
                           value="<?php echo htmlspecialchars(GetValue('dbuser')) ?>"/>
                </li>
                <li>
                    <label>Database Password</label>
                    <input class="InputBox" type="password" name="dbpass" value="<?php echo GetValue('dbpass') ?>"/>
                </li>
            </ul>
            <div class="Button">
                <input class="Button" type="submit" value="Begin Export"/>
            </div>
        </div>
    </form>
    <script type="text/javascript">
        //<![CDATA[
        function updatePrefix() {
            var type = document.getElementById('ForumType').value;
            switch (type) {
                <?php foreach($forums as $ForumClass => $ForumInfo) : ?>
                case '<?php echo $ForumClass; ?>':
                    document.getElementById('ForumPrefix').value = '<?php echo $ForumInfo['prefix']; ?>';
                    break;
                <?php endforeach; ?>
            }
        }
        //]]>
    </script>

    <?php PageFooter();
}

/**
 * Message: Result of export.
 *
 * @param array $Msgs Comments / logs from the export.
 * @param string $Class CSS class for wrapper.
 * @param string|bool $Path Path to file for download, or false.
 */
function ViewExportResult($Msgs = array(), $Class = 'Info', $Path = false) {
    if (defined('CONSOLE')) {
        return;
    }

    PageHeader();

    echo "<p class=\"DownloadLink\">Success!";
    if ($Path) {
        " <a href=\"$Path\"><b>Download exported file</b></a>";
    }
    echo "</p>";

    if (count($Msgs)) {
        echo "<div class=\"$Class\">";
        echo "<p>Really boring export logs follow:</p>\n";
        foreach ($Msgs as $Msg) {
            echo "<p>$Msg</p>\n";
        }

        echo "<p>It worked! You&rsquo;re free! Sweet, sweet victory.</p>\n";
        echo "</div>";
    }
    PageFooter();
}

/**
 * Output a definition list of features for a single platform.
 *
 * @param string $Platform
 * @param array $Features
 */
function ViewFeatureList($Platform, $Features = array()) {
    global $Supported;

    PageHeader();

    echo '<div class="Info">';
    echo '<h2>' . $Supported[$Platform]['name'] . '</h2>';
    echo '<dl>';

    foreach ($Features as $Feature => $Trash) {
        echo '
      <dt>' . FeatureName($Feature) . '</dt>
      <dd>' . FeatureStatus($Platform, $Feature) . '</dd>';
    }
    echo '</dl>';

    PageFooter();
}

/**
 * Output a table of features per all platforms.
 *
 * @param array $Features
 */
function ViewFeatureTable($Features = array()) {
    global $Supported;
    $Platforms = array_keys($Supported);

    PageHeader();
    echo '<h2 class="FeatureTitle">Data currently supported per platform</h2>';
    echo '<p>Click any platform name for details, or <a href="/" style="text-decoration:underline;">go back</a>.</p>';
    echo '<table class="Features"><thead><tr>';

    // Header row of labels for each platform
    echo '<th><i>Feature</i></th>';
    foreach ($Platforms as $Slug) {
        echo '<th class="Platform"><div><span><a href="?features=1&type=' . $Slug . '">' . $Supported[$Slug]['name'] . '</a></span></div></th>';
    }

    echo '</tr></thead><tbody>';

    // Checklist of features per platform.
    foreach ($Features as $Feature => $Trash) {
        // Name
        echo '<tr><td class="FeatureName">' . FeatureName($Feature) . '</td>';

        // Status per platform.
        foreach ($Platforms as $Platform) {
            echo '<td>' . FeatureStatus($Platform, $Feature, false) . '</td>';
        }
        echo '</tr>';
    }

    echo '</tbody></table>';
    PageFooter();
}

?>
<?php


/* Contents included from functions/filter-functions.php */
?><?php
/**
 * Filter functions for passing thru values during export.
 *
 * @copyright Vanilla Forums Inc. 2010-2015
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

/**
 * Don't allow zero-equivalent dates.
 *
 * @param $Value
 * @return string
 */
function ForceDate($Value) {
    if (!$Value || preg_match('`0000-00-00`', $Value)) {
        return gmdate('Y-m-d H:i:s');
    }

    return $Value;
}

/**
 * Only allow IPv4 addresses to pass.
 *
 * @param $ip
 * @return string|null Valid IPv4 address or nuthin'.
 */
function ForceIP4($ip) {
    if (preg_match('`(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})`', $ip, $m)) {
        $ip = $m[1];
    } else {
        $ip = null;
    }

    return $ip;
}

/**
 * Creates URL codes containing only lowercase Roman letters, digits, and hyphens.
 * Converted from Gdn_Format::Url
 *
 * @param string $str A string to be formatted.
 * @return string
 */
function FormatUrl($Str) {
    $UrlTranslations = array(
        '–' => '-',
        '—' => '-',
        'À' => 'A',
        'Á' => 'A',
        'Â' => 'A',
        'Ã' => 'A',
        'Ä' => 'Ae',
        'Ä' => 'A',
        'Å' => 'A',
        'Ā' => 'A',
        'Ą' => 'A',
        'Ă' => 'A',
        'Æ' => 'Ae',
        'Ç' => 'C',
        'Ć' => 'C',
        'Č' => 'C',
        'Ĉ' => 'C',
        'Ċ' => 'C',
        'Ď' => 'D',
        'Đ' => 'D',
        'Ð' => 'D',
        'È' => 'E',
        'É' => 'E',
        'Ê' => 'E',
        'Ë' => 'E',
        'Ē' => 'E',
        'Ě' => 'E',
        'Ĕ' => 'E',
        'Ė' => 'E',
        'Ĝ' => 'G',
        'Ğ' => 'G',
        'Ġ' => 'G',
        'Ģ' => 'G',
        'Ĥ' => 'H',
        'Ħ' => 'H',
        'Ì' => 'I',
        'Í' => 'I',
        'Î' => 'I',
        'Ï' => 'I',
        'Ī' => 'I',
        'Ĩ' => 'I',
        'Ĭ' => 'I',
        'Į' => 'I',
        'İ' => 'I',
        'Ĳ' => 'IJ',
        'Ĵ' => 'J',
        'Ķ' => 'K',
        'Ł' => 'K',
        'Ľ' => 'K',
        'Ĺ' => 'K',
        'Ļ' => 'K',
        'Ŀ' => 'K',
        'Ñ' => 'N',
        'Ń' => 'N',
        'Ň' => 'N',
        'Ņ' => 'N',
        'Ŋ' => 'N',
        'Ò' => 'O',
        'Ó' => 'O',
        'Ô' => 'O',
        'Õ' => 'O',
        'Ö' => 'Oe',
        'Ö' => 'Oe',
        'Ō' => 'O',
        'Ő' => 'O',
        'Ŏ' => 'O',
        'Œ' => 'OE',
        'Ŕ' => 'R',
        'Ŗ' => 'R',
        'Ś' => 'S',
        'Š' => 'S',
        'Ş' => 'S',
        'Ŝ' => 'S',
        'Ť' => 'T',
        'Ţ' => 'T',
        'Ŧ' => 'T',
        'Ț' => 'T',
        'Ù' => 'U',
        'Ú' => 'U',
        'Û' => 'U',
        'Ü' => 'Ue',
        'Ū' => 'U',
        'Ü' => 'Ue',
        'Ů' => 'U',
        'Ű' => 'U',
        'Ŭ' => 'U',
        'Ũ' => 'U',
        'Ų' => 'U',
        'Ŵ' => 'W',
        'Ý' => 'Y',
        'Ŷ' => 'Y',
        'Ÿ' => 'Y',
        'Ź' => 'Z',
        'Ž' => 'Z',
        'Ż' => 'Z',
        'Þ' => 'T',
        'à' => 'a',
        'á' => 'a',
        'â' => 'a',
        'ã' => 'a',
        'ä' => 'ae',
        'ä' => 'ae',
        'å' => 'a',
        'ā' => 'a',
        'ą' => 'a',
        'ă' => 'a',
        'æ' => 'ae',
        'ç' => 'c',
        'ć' => 'c',
        'č' => 'c',
        'ĉ' => 'c',
        'ċ' => 'c',
        'ď' => 'd',
        'đ' => 'd',
        'ð' => 'd',
        'è' => 'e',
        'é' => 'e',
        'ê' => 'e',
        'ë' => 'e',
        'ē' => 'e',
        'ę' => 'e',
        'ě' => 'e',
        'ĕ' => 'e',
        'ė' => 'e',
        'ƒ' => 'f',
        'ĝ' => 'g',
        'ğ' => 'g',
        'ġ' => 'g',
        'ģ' => 'g',
        'ĥ' => 'h',
        'ħ' => 'h',
        'ì' => 'i',
        'í' => 'i',
        'î' => 'i',
        'ï' => 'i',
        'ī' => 'i',
        'ĩ' => 'i',
        'ĭ' => 'i',
        'į' => 'i',
        'ı' => 'i',
        'ĳ' => 'ij',
        'ĵ' => 'j',
        'ķ' => 'k',
        'ĸ' => 'k',
        'ł' => 'l',
        'ľ' => 'l',
        'ĺ' => 'l',
        'ļ' => 'l',
        'ŀ' => 'l',
        'ñ' => 'n',
        'ń' => 'n',
        'ň' => 'n',
        'ņ' => 'n',
        'ŉ' => 'n',
        'ŋ' => 'n',
        'ò' => 'o',
        'ó' => 'o',
        'ô' => 'o',
        'õ' => 'o',
        'ö' => 'oe',
        'ö' => 'oe',
        'ø' => 'o',
        'ō' => 'o',
        'ő' => 'o',
        'ŏ' => 'o',
        'œ' => 'oe',
        'ŕ' => 'r',
        'ř' => 'r',
        'ŗ' => 'r',
        'š' => 's',
        'ù' => 'u',
        'ú' => 'u',
        'û' => 'u',
        'ü' => 'ue',
        'ū' => 'u',
        'ü' => 'ue',
        'ů' => 'u',
        'ű' => 'u',
        'ŭ' => 'u',
        'ũ' => 'u',
        'ų' => 'u',
        'ŵ' => 'w',
        'ý' => 'y',
        'ÿ' => 'y',
        'ŷ' => 'y',
        'ž' => 'z',
        'ż' => 'z',
        'ź' => 'z',
        'þ' => 't',
        'ß' => 'ss',
        'ſ' => 'ss',
        'А' => 'A',
        'Б' => 'B',
        'В' => 'V',
        'Г' => 'G',
        'Д' => 'D',
        'Е' => 'E',
        'Ё' => 'YO',
        'Ж' => 'ZH',
        'З' => 'Z',
        'Й' => 'Y',
        'К' => 'K',
        'Л' => 'L',
        'М' => 'M',
        'Н' => 'N',
        'О' => 'O',
        'П' => 'P',
        'Р' => 'R',
        'С' => 'S',
        'ș' => 's',
        'ț' => 't',
        'Ț' => 'T',
        'Т' => 'T',
        'У' => 'U',
        'Ф' => 'F',
        'Х' => 'H',
        'Ц' => 'C',
        'Ч' => 'CH',
        'Ш' => 'SH',
        'Щ' => 'SCH',
        'Ъ' => '',
        'Ы' => 'Y',
        'Ь' => '',
        'Э' => 'E',
        'Ю' => 'YU',
        'Я' => 'YA',
        'а' => 'a',
        'б' => 'b',
        'в' => 'v',
        'г' => 'g',
        'д' => 'd',
        'е' => 'e',
        'ё' => 'yo',
        'ж' => 'zh',
        'з' => 'z',
        'и' => 'i',
        'й' => 'y',
        'к' => 'k',
        'л' => 'l',
        'м' => 'm',
        'н' => 'n',
        'о' => 'o',
        'п' => 'p',
        'р' => 'r',
        'с' => 's',
        'т' => 't',
        'у' => 'u',
        'ф' => 'f',
        'х' => 'h',
        'ц' => 'c',
        'ч' => 'ch',
        'ш' => 'sh',
        'щ' => 'sch',
        'ъ' => '',
        'ы' => 'y',
        'ь' => '',
        'э' => 'e',
        'ю' => 'yu',
        'я' => 'ya'
    );

    // Preliminary decoding
    $Str = strip_tags(html_entity_decode($Str, ENT_COMPAT, 'UTF-8'));
    $Str = strtr($Str, $UrlTranslations);
    $Str = preg_replace('`[\']`', '', $Str);

    // Test for Unicode PCRE support
    // On non-UTF8 systems this will result in a blank string.
    $UnicodeSupport = (preg_replace('`[\pP]`u', '', 'P') != '');

    // Convert punctuation, symbols, and spaces to hyphens
    if ($UnicodeSupport) {
        $Str = preg_replace('`[\pP\pS\s]`u', '-', $Str);
    } else {
        $Str = preg_replace('`[\s_[^\w\d]]`', '-', $Str);
    }

    // Lowercase, no trailing or repeat hyphens
    $Str = preg_replace('`-+`', '-', strtolower($Str));
    $Str = trim($Str, '-');

    return rawurlencode($Str);
}

/**
 * Decode the HTML out of a value.
 */
function HTMLDecoder($Value) {
    $CharacterSet = (defined('PORTER_CHARACTER_SET')) ? PORTER_CHARACTER_SET : 'UTF-8';

    switch ($CharacterSet) {
        case 'latin1':
            $CharacterSet = 'ISO-8859-1';
            break;
        case 'latin9':
            $CharacterSet = 'ISO-8859-15';
            break;
        case 'utf8':
            $CharacterSet = 'UTF-8';
            break;
    }

    return html_entity_decode($Value, ENT_QUOTES, $CharacterSet);
}

/**
 * Inverse int value.
 *
 * @param $Value
 * @return int
 */
function NotFilter($Value) {
    return (int)(!$Value);
}

/**
 * Convert a timestamp to MySQL date format.
 *
 * Do this in MySQL with FROM_UNIXTIME() instead whenever possible.
 *
 * @param $Value
 * @return null|string
 */
function TimestampToDate($Value) {
    if ($Value == null) {
        return null;
    } else {
        return gmdate('Y-m-d H:i:s', $Value);
    }
}

/**
 * Wrapper for long2ip that nulls 'false' values.
 *
 * @param $Value
 * @return null|string
 */
function long2ipf($Value) {
    if (!$Value) {
        return null;
    }

    return long2ip($Value);
}

/**
 * Convert 'y/n' to boolean.
 *
 * @param $Value
 * @return int
 */
function YNBool($Value) {
    if ($Value == 'y') {
        return 1;
    } else {
        return 0;
    }
}

/**
 * Guess the Format of the Body.
 *
 * @param $Value
 * @return string
 */
function GuessFormat($Value) {
    if (strpos($Value, '[') !== false) {
        return 'BBCode';
    } elseif (strpos($Value, '<') !== false) {
        return 'Html';
    } else {
        return 'BBCode';
    }
}

/**
 * Derive mimetype from file extension.
 *
 * @param $Value
 * @return string
 */
function MimeTypeFromExtension($Value) {
    switch ($Value) {
        case '.png':
        case '.jpg':
        case '.jpeg':
        case '.gif':
        case '.bmp':
            return 'image/' . substr($Value, 1);
        case '.zip':
        case '.doc':
        case '.docx':
        case '.pdf':
        case '.xls':
        case '.swf':
            return 'application/' . substr($Value, 1);
        case '.txt':
        case '.htm':
        case '.html':
            return 'text/' . substr($Value, 1);
        case '.mov':
        case '.avi':
            return 'video/' . substr($Value, 1);
    }
}

/**
 * Change square brackets to braces.
 *
 * @param $Value
 * @return mixed
 */
function CleanBodyBrackets($Value) {
    if (strpos($Value, '[') !== false) {
        $Result = str_replace(array('<', '>'), array('[', ']'), $Value);

        return $Result;
    }

    return $Value;
}

?>
<?php


/* Contents included from functions/commandline-functions.php */
?><?php

$GlobalOptions = array(
    // Used shortcodes: t, n, u, p, h, x, a, c, f, d, o, s
    'type' => array(
        'Type of forum we\'re freeing you from.',
        'Req' => true,
        'Sx' => ':',
        'Field' => 'type',
        'Short' => 't'
    ),
    'dbname' => array('Database name.', 'Req' => true, 'Sx' => ':', 'Field' => 'dbname', 'Short' => 'n'),
    'user' => array('Database connection username.', 'Req' => true, 'Sx' => ':', 'Field' => 'dbuser', 'Short' => 'u'),
    'password' => array(
        'Database connection password.',
        'Sx' => '::',
        'Field' => 'dbpass',
        'Short' => 'p',
        'Default' => ''
    ),
    'host' => array(
        'IP address or hostname to connect to. Default is 127.0.0.1.',
        'Sx' => ':',
        'Field' => 'dbhost',
        'Short' => 'o',
        'Default' => '127.0.0.1'
    ),
    'prefix' => array(
        'The table prefix in the database.',
        'Field' => 'prefix',
        'Sx' => ':',
        'Default' => '',
        'Short' => 'x'
    ),
    'avatars' => array(
        'Enables exporting avatars from the database if supported.',
        'Sx' => '::',
        'Field' => 'avatars',
        'Short' => 'a',
        'Default' => ''
    ),
    'cdn' => array(
        'Prefix to be applied to file paths.',
        'Field' => 'cdn',
        'Sx' => ':',
        'Short' => 'c',
        'Default' => ''
    ),
    'files' => array(
        'Enables exporting attachments from database if supported.',
        'Sx' => '::',
        'Short' => 'f',
        'Default' => ''
    ),
    'destpath' => array('Define destination path for the export file.', 'Sx' => '::', 'Short' => 'd', 'Default' => ''),
    'spawn' => array('Create a new package with this name.', 'Sx' => '::', 'Short' => 's', 'Default' => ''),
    'help' => array('Show this help, duh.', 'Short' => 'h')
);

// Go through all of the supported types and add them to the type description.
if (isset($Supported)) {
    $GlobalOptions['type']['Values'] = array_keys($Supported);
}

function GetAllCommandLineOptions($Sections = false) {
    global $GlobalOptions, $Supported;

    if ($Sections) {
        $Result['Global Options'] = $GlobalOptions;
    } else {
        $Result = $GlobalOptions;
    }

    foreach ($Supported as $Type => $Options) {
        $CommandLine = V('CommandLine', $Options);
        if (!$CommandLine) {
            continue;
        }

        if ($Sections) {
            $Result[$Options['name']] = $CommandLine;
        } else {
            // We need to add the types to each command line option for validation purposes.
            foreach ($CommandLine as $LongCode => $Row) {
                if (isset($Result[$LongCode])) {
                    $Result[$LongCode]['Types'][] = $Type;
                } else {
                    $Row['Types'] = array($Type);
                    $Result[$LongCode] = $Row;
                }
            }
        }
    }

    return $Result;
}

function GetOptCodes($Options) {
    $ShortCodes = '';
    $LongCodes = array();

    foreach ($Options as $LongCode => $Row) {
        $Sx = V('Sx', $Row, '');
        $Short = V('Short', $Row, '');

        if ($Short) {
            $ShortCodes .= $Short . $Sx;
        }
        $LongCodes[] = $LongCode . $Sx;
    }

    return array($ShortCodes, $LongCodes);
}

function parseCommandLine($Options = null, $Files = null) {
    global $GlobalOptions, $Supported, $argv;

    if (isset($Options)) {
        $GlobalOptions = $Options;
    }
    if (!isset($GlobalOptions)) {
        $GlobalOptions = array();
    }
    if (!isset($Supported)) {
        $Supported = array();
    }

    $CommandOptions = GetAllCommandLineOptions();
    list($ShortCodes, $LongCodes) = GetOptCodes($CommandOptions);

//   print_r($LongCodes);

    $Opts = getopt($ShortCodes, $LongCodes);

    if (isset($Opts['help']) || isset($Opts['h'])) {
        WriteCommandLineHelp();
        die();
    }

    // Spawn new packages from the command line!
    if (isset($Opts['spawn']) || isset($Opts['s'])) {
        $Name = (isset($Opts['spawn'])) ? $Opts['spawn'] : $Opts['s'];
        SpawnPackage($Name);
        die();
    }

    $Opts = ValidateCommandLine($Opts, $CommandOptions);

    if (is_array($Files)) {
        $Opts2 = array();
        foreach ($Files as $Name) {
            $Value = array_pop($argv);
            if (!$Value) {
                echo "Missing required parameter: $Name";
            } else {
                $Opts2[$Name] = $Value;
            }
        }
        if ($Opts2) {
            if ($Opts === false) {
                $Opts = $Opts2;
            } else {
                $Opts = array_merge($Opts, $Opts2);
            }
        }
    }

    if ($Opts === false) {
        die();
    }

    $_POST = $Opts;

    return $Opts;
}

function validateCommandLine($Values, $Options) {
    $Errors = array();
    $Result = array();

//   print_r($Values);
//   print_r($Options);

    $Type = V('type', $Values, V('t', $Values));

    foreach ($Options as $LongCode => $Row) {
        $Req = V('Req', $Row);
        $Short = V('Short', $Row);

        $Sx = V('Sx', $Row);
        $Types = V('Types', $Row);

        if ($Types && !in_array($Type, $Types)) {
//         echo "Skipping $LongCode\n";
            continue;
        }

        if (isset($Values[$LongCode])) {
            $Value = $Values[$LongCode];
            if (!$Value) {
                $Value = true;
            }
        } elseif ($Short && isset($Values[$Short])) {
            $Value = $Values[$Short];
            if (!$Value) {
                $Value = true;
            }
        } elseif (isset($Row['Default'])) {
            $Value = $Row['Default'];
        } else {
            $Value = null;
        }

        if (!$Value) {
            $Default = V('Default', $Row, null);
            if ($Default === null) {
                if ($Req) {
                    $Errors[] = "Missing required parameter: $LongCode";
                }

                continue;
            } else {
                $Value = $Default;
            }
        }

        if ($AllowedValues = V('Values', $Row)) {
            if (!in_array($Value, $AllowedValues)) {
                $Errors[] = "Invalid value for parameter: $LongCode. Must be one of: " . implode(', ', $AllowedValues);
                continue;
            }
        }

        $Field = V('Field', $Row, $LongCode);
        $Result[$Field] = $Value;
    }

    if (count($Errors)) {
        echo implode("\n", $Errors) . "\n";

        return false;
    }


    return $Result;
}

function writeCommandLineHelp($Options = null, $Section = '') {
    if ($Options === null) {
        $Options = GetAllCommandLineOptions(true);
        foreach ($Options as $Section => $Options) {
            WriteCommandLineHelp($Options, $Section);
        }

        return;
    }

    echo "$Section\n";
    foreach ($Options as $Longname => $Options) {
        $Output = "  ";

        if (isset($Options['Short'])) {
            $Output .= '-' . $Options['Short'] . ', ';
        }

        $Output .= "--$Longname";

        // Align our descriptions by passing
        $Output = str_pad($Output, 18, ' ');

        if (V('Req', $Options)) {
            $Output .= 'Required. ';
        }

        $Output .= "{$Options[0]}\n";

        if ($Values = V('Values', $Options)) {
            $Output .= '    Valid Values: ' . implode(', ', $Values) . "\n";
        }

        echo $Output;
    }

    echo "\n";
}

function V($Name, $Array, $Default = null) {
    if (isset($Array[$Name])) {
        return $Array[$Name];
    }

    return $Default;
}

?>
<?php


/* Contents included from functions/structure-functions.php */
?><?php
/**
 * @copyright Vanilla Forums Inc. 2010-2015
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

/**
 * Define acceptable data fields to sent to Vanilla.
 *
 * Format is array of Table => array(Column -> Type).
 *
 * @return array
 */
function VanillaStructure() {
    // Adding new items without matching existing spacing costs 2 toes.
    return array(
        'Activity' => array(
            'ActivityID' => 'int',
            'ActivityTypeID' => 'int',
            'NotifyUserID' => 'int',
            'ActivityUserID' => 'int',
            'RegardingUserID' => 'int',
            'Photo' => 'varchar(255)',
            'HeadlineFormat' => 'varchar(255)',
            'Story' => 'text',
            'Format' => 'varchar(10)',
            'Route' => 'varchar(255)',
            'RecordType' => 'varchar(20)',
            'RecordID' => 'int',
            'InsertUserID' => 'int',
            'DateInserted' => 'datetime',
            'InsertIPAddress' => 'varchar(15)',
            'DateUpdated' => 'datetime',
            'Notified' => 'tinyint',
            'Emailed' => 'tinyint',
            'Data' => 'text'
        ),
        'ActivityComment' => array(
            'ActivityCommentID' => 'int',
            'ActivityID' => 'int',
            'Body' => 'text',
            'Format' => 'varchar(20)',
            'InsertUserID' => 'int',
            'DateInserted' => 'datetime',
            'InsertIPAddress' => 'varchar(15)'
        ),
        'ActivityType' => array(
            'ActivityTypeID' => 'int',
            'Name' => 'varchar(20)',
            'AllowComments' => 'tinyint',
            'ShowIcon' => 'tinyint',
            'ProfileHeadline' => 'varchar(255)',
            'FullHeadline' => 'varchar(255)',
            'RouteCode' => 'varchar(255)',
            'Notify' => 'tinyint',
            'Public' => 'tinyint'
        ),
        'AnalyticsLocal' => array(
            'TimeSlot' => 'varchar(8)',
            'Views' => 'int',
            'EmbedViews' => 'int'
        ),
        'Attachment' => array(
            'AttachmentID' => 'int',
            'Type' => 'varchar(64)',
            'ForeignID' => 'varchar(50)',
            'ForeignUserID' => 'int',
            'Source' => 'varchar(64)',
            'SourceID' => 'varchar(32)',
            'SourceURL' => 'varchar(255)',
            'Attributes' => 'text',
            'DateInserted' => 'datetime',
            'InsertUserID' => 'int',
            'InsertIPAddress' => 'varchar(64)',
            'DateUpdated' => 'datetime',
            'UpdateUserID' => 'int',
            'UpdateIPAddress' => 'varchar(15)'
        ),
        'Ban' => array(
            'BanID' => 'int',
            //'BanType' => array('IPAddress','Name','Email'),
            'BanValue' => 'varchar(50)',
            'Notes' => 'varchar(255)',
            'CountUsers' => 'int',
            'CountBlockedRegistrations' => 'int',
            'InsertUserID' => 'int',
            'DateInserted' => 'datetime',
            'InsertIPAddress' => 'varchar(15)',
            'UpdateUserID' => 'int',
            'DateUpdated' => 'datetime',
            'UpdateIPAddress' => 'varchar(15)'
        ),
        'Category' => array(
            'CategoryID' => 'int',
            'ParentCategoryID' => 'int',
            'TreeLeft' => 'int',
            'TreeRight' => 'int',
            'Depth' => 'int',
            'CountDiscussions' => 'int',
            'CountComments' => 'int',
            'DateMarkedRead' => 'datetime',
            'AllowDiscussions' => 'tinyint',
            'Archived' => 'tinyint',
            'Name' => 'varchar(255)',
            'UrlCode' => 'varchar(255)',
            'Description' => 'varchar(500)',
            'Sort' => 'int',
            'CssClass' => 'varchar(50)',
            'Photo' => 'varchar(255)',
            'PermissionCategoryID' => 'int',
            'PointsCategoryID' => 'int',
            'HideAllDiscussions' => 'tinyint',
            //'DisplayAs' => array('Categories','Discussions','Heading','Default'),
            'InsertUserID' => 'int',
            'UpdateUserID' => 'int',
            'DateInserted' => 'datetime',
            'DateUpdated' => 'datetime',
            'LastCommentID' => 'int',
            'LastDiscussionID' => 'int',
            'LastDateInserted' => 'datetime',
            'AllowedDiscussionTypes' => 'varchar(255)',
            'DefaultDiscussionType' => 'varchar(10)',
            'AllowGroups' => 'tinyint'
        ),
        'Comment' => array(
            'CommentID' => 'int',
            'DiscussionID' => 'int',
            'InsertUserID' => 'int',
            'UpdateUserID' => 'int',
            'DeleteUserID' => 'int',
            'Body' => 'text',
            'Format' => 'varchar(20)',
            'DateInserted' => 'datetime',
            'DateDeleted' => 'datetime',
            'DateUpdated' => 'datetime',
            'InsertIPAddress' => 'varchar(15)',
            'UpdateIPAddress' => 'varchar(15)',
            'Flag' => 'tinyint',
            'Score' => 'float',
            'Attributes' => 'text'
        ),
        'Conversation' => array(
            'ConversationID' => 'int',
            'Type' => 'varchar(10)',
            'ForeignID' => 'varchar(40)',
            'Subject' => 'varchar(100)',
            'Contributors' => 'varchar(255)',
            'FirstMessageID' => 'int',
            'InsertUserID' => 'int',
            'DateInserted' => 'datetime',
            'InsertIPAddress' => 'varchar(15)',
            'UpdateUserID' => 'int',
            'DateUpdated' => 'datetime',
            'UpdateIPAddress' => 'varchar(15)',
            'CountMessages' => 'int',
            'CountParticipants' => 'int',
            'LastMessageID' => 'int',
            'RegardingID' => 'int'
        ),
        'ConversationMessage' => array(
            'MessageID' => 'int',
            'ConversationID' => 'int',
            'Body' => 'text',
            'Format' => 'varchar(20)',
            'InsertUserID' => 'int',
            'DateInserted' => 'datetime',
            'InsertIPAddress' => 'varchar(15)'
        ),
        'Discussion' => array(
            'DiscussionID' => 'int',
            'Type' => 'varchar(10)',
            'ForeignID' => 'varchar(32)',
            'CategoryID' => 'int',
            'InsertUserID' => 'int',
            'UpdateUserID' => 'int',
            'FirstCommentID' => 'int',
            'LastCommentID' => 'int',
            'Name' => 'varchar(100)',
            'Body' => 'text',
            'Format' => 'varchar(20)',
            'Tags' => 'text',
            'CountComments' => 'int',
            'CountBookmarks' => 'int',
            'CountViews' => 'int',
            'Closed' => 'tinyint',
            'Announce' => 'tinyint',
            'Sink' => 'tinyint',
            'DateInserted' => 'datetime',
            'DateUpdated' => 'datetime',
            'InsertIPAddress' => 'varchar(15)',
            'UpdateIPAddress' => 'varchar(15)',
            'DateLastComment' => 'datetime',
            'LastCommentUserID' => 'int',
            'Score' => 'float',
            'Attributes' => 'text',
            'RegardingID' => 'int',
            'GroupID' => 'int'
        ),
        'Draft' => array(
            'DraftID' => 'int',
            'DiscussionID' => 'int',
            'CategoryID' => 'int',
            'InsertUserID' => 'int',
            'UpdateUserID' => 'int',
            'Name' => 'varchar(100)',
            'Tags' => 'varchar(255)',
            'Closed' => 'tinyint',
            'Announce' => 'tinyint',
            'Sink' => 'tinyint',
            'Body' => 'text',
            'Format' => 'varchar(20)',
            'DateInserted' => 'datetime',
            'DateUpdated' => 'datetime'
        ),
        'Event' => array(
            'EventID' => 'int',
            'Name' => 'varchar(255)',
            'Body' => 'text',
            'Format' => 'varchar(10)',
            'DateStarts' => 'datetime',
            'DateEnds' => 'datetime',
            'Timezone' => 'varchar(64)',
            'AllDayEvent' => 'tinyint',
            'Location' => 'varchar(255)',
            'DateInserted' => 'datetime',
            'InsertUserID' => 'int',
            'DateUpdated' => 'datetime',
            'UpdateUserID' => 'int',
            'GroupID' => 'int'
        ),
        'Group' => array(
            'GroupID' => 'int',
            'Name' => 'varchar(255)',
            'Description' => 'text',
            'Format' => 'varchar(10)',
            'CategoryID' => 'int',
            'Icon' => 'varchar(255)',
            'Banner' => 'varchar(255)',
            'Privacy' => 'varchar(255)', // 'Public', 'Private'
            'Registration' => 'varchar(255)', // 'Public', 'Approval', 'Invite'
            'Visibility' => 'varchar(255)', // 'Public', 'Members'
            'CountMembers' => 'int',
            'CountDiscussions' => 'int',
            'DateLastComment' => 'datetime',
            'LastCommentID' => 'int',
            'LastDiscussionID' => 'int',
            'DateInserted' => 'datetime',
            'InsertUserID' => 'int',
            'DateUpdated' => 'datetime',
            'UpdateUserID' => 'int',
            'Attributes' => 'text'
        ),
        'GroupApplicant' => array(
            'GroupApplicantID' => 'int',
            'GroupID' => 'int',
            'UserID' => 'int',
            'Type' => 'varchar(255)', // 'Application', 'Invitation', 'Denied', 'Banned'
            'Reason' => 'varchar(200)',
            'DateInserted' => 'datetime',
            'InsertUserID' => 'int',
            'DateUpdated' => 'datetime',
            'UpdateUserID' => 'int'
        ),
        'Invitation' => array(
            'InvitationID' => 'int',
            'Email' => 'varchar(200)',
            'Name' => 'varchar(50)',
            'RoleIDs' => 'text',
            'Code' => 'varchar(50)',
            'InsertUserID' => 'int',
            'DateInserted' => 'datetime',
            'AcceptedUserID' => 'int',
            'DateExpires' => 'datetime'
        ),
        'Log' => array(
            'LogID' => 'int',
            //'Operation' => array('Delete','Edit','Spam','Moderate','Pending','Ban','Error'),
            //'RecordType' => array('Discussion','Comment','User','Registration','Activity','ActivityComment','Configuration','Group'),
            'TransactionLogID' => 'int',
            'RecordID' => 'int',
            'RecordUserID' => 'int',
            'RecordDate' => 'datetime',
            'RecordIPAddress' => 'varchar(15)',
            'InsertUserID' => 'int',
            'DateInserted' => 'datetime',
            'InsertIPAddress' => 'varchar(15)',
            'OtherUserIDs' => 'varchar(255)',
            'DateUpdated' => 'datetime',
            'ParentRecordID' => 'int',
            'CategoryID' => 'int',
            'Data' => 'mediumtext',
            'CountGroup' => 'int'
        ),
        'Media' => array(
            'MediaID' => 'int',
            'Name' => 'varchar(255)',
            'Path' => 'varchar(255)',
            'Type' => 'varchar(128)',
            'Size' => 'int',
            'InsertUserID' => 'int',
            'DateInserted' => 'datetime',
            'ForeignID' => 'int',
            'ForeignTable' => 'varchar(24)',
            'ImageWidth' => 'smallint',
            'ImageHeight' => 'smallint',
            'ThumbWidth' => 'smallint',
            'ThumbHeight' => 'smallint',
            'ThumbPath' => 'varchar(255)'
        ),
        'Message' => array(
            'MessageID' => 'int',
            'Content' => 'text',
            'Format' => 'varchar(20)',
            'AllowDismiss' => 'tinyint',
            'Enabled' => 'tinyint',
            'Application' => 'varchar(255)',
            'Controller' => 'varchar(255)',
            'Method' => 'varchar(255)',
            'CategoryID' => 'int',
            'IncludeSubcategories' => 'tinyint',
            'AssetTarget' => 'varchar(20)',
            'CssClass' => 'varchar(20)',
            'Sort' => 'int'
        ),
        'Permission' => array(
            'PermissionID' => 'int',
            'RoleID' => 'int',
            'JunctionTable' => 'varchar(100)',
            'JunctionColumn' => 'varchar(100)',
            'JunctionID' => 'int',
            '_Permissions' => 'varchar(255)',
            'Garden.Email.View' => 'tinyint',
            'Garden.Settings.Manage' => 'tinyint',
            'Garden.Settings.View' => 'tinyint',
            'Garden.SignIn.Allow' => 'tinyint',
            'Garden.Users.Add' => 'tinyint',
            'Garden.Users.Edit' => 'tinyint',
            'Garden.Users.Delete' => 'tinyint',
            'Garden.Users.Approve' => 'tinyint',
            'Garden.Activity.Delete' => 'tinyint',
            'Garden.Activity.View' => 'tinyint',
            'Garden.Profiles.View' => 'tinyint',
            'Garden.Profiles.Edit' => 'tinyint',
            'Garden.Curation.Manage' => 'tinyint',
            'Garden.Moderation.Manage' => 'tinyint',
            'Garden.PersonalInfo.View' => 'tinyint',
            'Garden.AdvancedNotifications.Allow' => 'tinyint',
            'Garden.Community.Manage' => 'tinyint',
            'Conversations.Moderation.Manage' => 'tinyint',
            'Conversations.Conversations.Add' => 'tinyint',
            'Vanilla.Approval.Require' => 'tinyint',
            'Vanilla.Comments.Me' => 'tinyint',
            'Vanilla.Discussions.View' => 'tinyint',
            'Vanilla.Discussions.Add' => 'tinyint',
            'Vanilla.Discussions.Edit' => 'tinyint',
            'Vanilla.Discussions.Announce' => 'tinyint',
            'Vanilla.Discussions.Sink' => 'tinyint',
            'Vanilla.Discussions.Close' => 'tinyint',
            'Vanilla.Discussions.Delete' => 'tinyint',
            'Vanilla.Comments.Add' => 'tinyint',
            'Vanilla.Comments.Edit' => 'tinyint',
            'Vanilla.Comments.Delete' => 'tinyint'
        ),
        'Poll' => array(
            'PollID' => 'int',
            'Name' => 'varchar(255)',
            'DiscussionID' => 'int',
            'CountOptions' => 'int',
            'CountVotes' => 'int',
            'Anonymous' => 'int',
            'DateInserted' => 'datetime',
            'InsertUserID' => 'int',
            'DateUpdated' => 'datetime',
            'UpdateUserID' => 'int'
        ),
        'PollOption' => array(
            'PollOptionID' => 'int',
            'PollID' => 'int',
            'Body' => 'varchar(500)',
            'Format' => 'varchar(20)',
            'Sort' => 'smallint',
            'CountVotes' => 'int',
            'DateInserted' => 'datetime',
            'InsertUserID' => 'int',
            'DateUpdated' => 'datetime',
            'UpdateUserID' => 'int'
        ),
        'PollVote' => array(
            'UserID' => 'int',
            'PollOptionID' => 'int'
        ),
        'Rank' => array(
            'RankID' => 'int',
            'Name' => 'varchar(100)',
            'Level' => 'smallint',
            'Label' => 'varchar(255)',
            'Body' => 'text',
            'Attributes' => 'text'
        ),
        'ReactionType' => array(
            'UrlCode' => 'varchar(32)',
            'Name' => 'varchar(32)',
            'Description' => 'text',
            'Class' => 'varchar(10)',
            'TagID' => 'int',
            'Attributes' => 'text',
            'Sort' => 'smallint',
            'Active' => 'tinyint',
            'Custom' => 'tinyint',
            'Hidden' => 'tinyint'
        ),
        'Regarding' => array(
            'RegardingID' => 'int',
            'Type' => 'varchar(255)',
            'InsertUserID' => 'int',
            'DateInserted' => 'datetime',
            'ForeignType' => 'varchar(32)',
            'ForeignID' => 'int',
            'OriginalContent' => 'text',
            'ParentType' => 'varchar(32)',
            'ParentID' => 'int',
            'ForeignURL' => 'varchar(255)',
            'Comment' => 'text',
            'Reports' => 'int'
        ),
        'Role' => array(
            'RoleID' => 'int',
            'Name' => 'varchar(100)',
            'Description' => 'varchar(500)',
            'Sort' => 'int',
            'Deletable' => 'tinyint',
            'CanSession' => 'tinyint',
            'PersonalInfo' => 'tinyint'
        ),
        'Session' => array(
            'SessionID' => 'char(32)',
            'UserID' => 'int',
            'DateInserted' => 'datetime',
            'DateUpdated' => 'datetime',
            'TransientKey' => 'varchar(12)',
            'Attributes' => 'text'
        ),
        'Spammer' => array(
            'UserID' => 'int',
            'CountSpam' => 'smallint',
            'CountDeletedSpam' => 'smallint'
        ),
        'Tag' => array(
            'TagID' => 'int',
            'Name' => 'varchar(255)',
            'FullName' => 'varchar(255)',
            'Type' => 'varchar(20) ',
            'ParentTagID' => 'int',
            'InsertUserID' => 'int',
            'DateInserted' => 'datetime',
            'CategoryID' => 'int',
            'CountDiscussions' => 'int'
        ),
        'TagDiscussion' => array(
            'TagID' => 'int',
            'DiscussionID' => 'int',
            'CategoryID' => 'int',
            'DateInserted' => 'datetime'
        ),
        'User' => array(
            'UserID' => 'int',
            'Name' => 'varchar(50)',
            'Password' => 'varbinary(100)',
            'HashMethod' => 'varchar(10)',
            'Photo' => 'varchar(255)',
            'Title' => 'varchar(100)',
            'Location' => 'varchar(100)',
            'About' => 'text',
            'Email' => 'varchar(200)',
            'ShowEmail' => 'tinyint',
            //'Gender' => array('u','m','f'),
            'CountVisits' => 'int',
            'CountInvitations' => 'int',
            'CountNotifications' => 'int',
            'InviteUserID' => 'int',
            'DiscoveryText' => 'text',
            'Preferences' => 'text',
            'Permissions' => 'text',
            'Attributes' => 'text',
            'DateSetInvitations' => 'datetime',
            'DateOfBirth' => 'datetime',
            'DateFirstVisit' => 'datetime',
            'DateLastActive' => 'datetime',
            'LastIPAddress' => 'varchar(15)',
            'AllIPAddresses' => 'varchar(100)',
            'DateInserted' => 'datetime',
            'InsertIPAddress' => 'varchar(15)',
            'DateUpdated' => 'datetime',
            'UpdateIPAddress' => 'varchar(15)',
            'HourOffset' => 'int',
            'Score' => 'float',
            'Admin' => 'tinyint',
            'Confirmed' => 'tinyint',
            'Verified' => 'tinyint',
            'Banned' => 'tinyint',
            'Deleted' => 'tinyint',
            'Points' => 'int',
            'CountUnreadConversations' => 'int',
            'CountDiscussions' => 'int',
            'CountUnreadDiscussions' => 'int',
            'CountComments' => 'int',
            'CountDrafts' => 'int',
            'CountBookmarks' => 'int',
            'RankID' => 'int'
        ),
        'UserAuthentication' => array(
            'ForeignUserKey' => 'varchar(255)',
            'ProviderKey' => 'varchar(64)',
            'UserID' => 'int'
        ),
        'UserAuthenticationNonce' => array(
            'Nonce' => 'varchar(200)',
            'Token' => 'varchar(128)',
            'Timestamp' => 'timestamp'
        ),
        'UserAuthenticationProvider' => array(
            'AuthenticationKey' => 'varchar(64)',
            'AuthenticationSchemeAlias' => 'varchar(32)',
            'Name' => 'varchar(50)',
            'URL' => 'varchar(255)',
            'AssociationSecret' => 'text',
            'AssociationHashMethod' => 'varchar(20)',
            'AuthenticateUrl' => 'varchar(255)',
            'RegisterUrl' => 'varchar(255)',
            'SignInUrl' => 'varchar(255)',
            'SignOutUrl' => 'varchar(255)',
            'PasswordUrl' => 'varchar(255)',
            'ProfileUrl' => 'varchar(255)',
            'Attributes' => 'text',
            'Active' => 'tinyint',
            'IsDefault' => 'tinyint'
        ),
        'UserAuthenticationToken' => array(
            'Token' => 'varchar(128)',
            'ProviderKey' => 'varchar(64)',
            'ForeignUserKey' => 'varchar(255)',
            'TokenSecret' => 'varchar(64)',
            //'TokenType' => array('request','access'),
            'Authorized' => 'tinyint',
            'Timestamp' => 'timestamp',
            'Lifetime' => 'int'
        ),
        'UserCategory' => array(
            'UserID' => 'int',
            'CategoryID' => 'int',
            'DateMarkedRead' => 'datetime',
            'Unfollow' => 'tinyint'
        ),
        'UserComment' => array(
            'UserID' => 'int',
            'CommentID' => 'int',
            'Score' => 'float',
            'DateLastViewed' => 'datetime'
        ),
        'UserConversation' => array(
            'UserID' => 'int',
            'ConversationID' => 'int',
            'CountReadMessages' => 'int',
            'LastMessageID' => 'int',
            'DateLastViewed' => 'datetime',
            'DateCleared' => 'datetime',
            'Bookmarked' => 'tinyint',
            'Deleted' => 'tinyint',
            'DateConversationUpdated' => 'datetime'
        ),
        'UserDiscussion' => array(
            'UserID' => 'int',
            'DiscussionID' => 'int',
            'Score' => 'float',
            'CountComments' => 'int',
            'DateLastViewed' => 'datetime',
            'Dismissed' => 'tinyint',
            'Bookmarked' => 'tinyint',
            'Participated' => 'tinyint'
        ),
        'UserEvent' => array(
            'EventID' => 'int',
            'UserID' => 'int',
            'DateInserted' => 'datetime',
            'Attending' => 'varchar(200)' // 'Yes', 'No', 'Maybe', 'Invited'
        ),
        'UserGroup' => array(
            'UserGroupID' => 'int',
            'GroupID' => 'int',
            'UserID' => 'int',
            'DateInserted' => 'datetime',
            'InsertUserID' => 'int',
            'Role' => 'varchar(255)' // 'Leader', 'Member'
        ),
        'UserMeta' => array(
            'UserID' => 'int',
            'Name' => 'varchar(255)',
            'Value' => 'text'
        ),
        'UserNote' => array(
            'UserNoteID' => 'int',
            'Type' => 'varchar(10)',
            'UserID' => 'int',
            'Body' => 'text',
            'Format' => 'varchar(10)',
            'RecordType' => 'varchar(20)',
            'RecordID' => 'int',
            'InsertUserID' => 'int',
            'DateInserted' => 'datetime',
            'InsertIPAddress' => 'varchar(15)',
            'UpdateUserID' => 'int',
            'DateUpdated' => 'datetime',
            'UpdateIPAddress' => 'varchar(15)',
            'Attributes' => 'text'
        ),
        'UserPoints' => array(
            //'SlotType' => array('d','w','m','y','a'),
            'TimeSlot' => 'datetime',
            'Source' => 'varchar(10)',
            'CategoryID' => 'int',
            'UserID' => 'int',
            'Points' => 'int'
        ),
        'UserRole' => array(
            'UserID' => 'int',
            'RoleID' => 'int'
        ),
        'UserTag' => array(
            'RecordType' => 'varchar(200)', //'Discussion', 'Discussion-Total', 'Comment', 'Comment-Total', 'User', 'User-Total', 'Activity', 'Activity-Total', 'ActivityComment', 'ActivityComment-Total'
            'RecordID' => 'int',
            'TagID' => 'int',
            'UserID' => 'int',
            'DateInserted' => 'datetime',
            'Total' => 'int'
        )
    );
}

?>
<?php


/* Contents included from functions/feature-functions.php */
?><?php
/**
 * @copyright Vanilla Forums Inc. 2010-2015
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

/**
 * Get the data support status for a single platform feature.
 *
 * @param $Platform
 * @param $Feature
 * @return string
 */
function FeatureStatus($Platform, $Feature, $Notes = true) {
    global $Supported;

    if (!isset($Supported[$Platform]['features'])) {
        return '<span class="No">No</span>';
    }

    $Available = $Supported[$Platform]['features'];

    // Calculate feature availability.
    $Status = '<span class="No">&#x2717;</span>';
    if (isset($Available[$Feature])) {
        if ($Available[$Feature] === 1) {
            $Status = '<span class="Yes">&#x2713;</span>';
        } elseif ($Available[$Feature]) {
            if ($Notes) {
                // Send the text of the note
                $Status = $Available[$Feature];
            } else {
                // Say 'yes' for table shorthand
                $Status = '<span class="Yes">&#x2713;</span>';
            }
        }
    }

    return $Status;
}

/**
 * Insert spaces into a CamelCaseName => Camel Case Name.
 *
 * @param $Feature
 * @return string
 */
function FeatureName($Feature) {
    return ltrim(preg_replace('/[A-Z]/', ' $0', $Feature));
}

/**
 * Define what data can be successfully ported to Vanilla.
 *
 * First array key is where the data is stored.
 * Second array key is the feature name, and value is one of:
 *    - 0 if unsupported
 *    - 1 if supported
 *    - string if supported, with notes or caveats
 *
 * @return array
 */
function VanillaFeatures($Set = false) {
    if (!$Set) {
        $Set = array('core', 'addon');
    }

    $Features = array();
    if (is_array($Set)) {
        foreach ($Set as $Section) {
            $Features += VanillaFeatureSet($Section);
        }
    } else {
        $Features = VanillaFeatureSet($Set);
    }

    return $Features;
}

/**
 * Get features by availability in Vanilla.
 *
 * @param string $Section
 * @return array
 */
function VanillaFeatureSet($Section) {
    switch ($Section) {
        case 'addon':
            $Set = array(
                'Tags' => 0,

            );
            break;
        case 'cloud':
            $Set = array(
                'Badges' => 0,
                'Ranks' => 0,
                'Polls' => 0,
                'Groups' => 0,
            );
            break;
        case 'core':
        default:
            $Set = array(
                'Comments' => 0,
                'Discussions' => 0,
                'Users' => 0,
                'Categories' => 0,
                'Roles' => 0,
                'Passwords' => 0,
                'Avatars' => 0,
                'PrivateMessages' => 0,
                'Signatures' => 0,
                'Attachments' => 0,
                'Bookmarks' => 0,
                'Permissions' => 0,
                //'UserWall'        => 0,
                'UserNotes' => 0,

                //'Emoji'           => 0,
            );
            break;
    }

    return $Set;
}

?>
<?php


// Use error handler in functions.php
set_error_handler("ErrorHandler");

// Set Vanilla to appear first in the list.
$Supported = array(
    'vanilla1' => array('name' => 'Vanilla 1', 'prefix' => 'LUM_'),
    'vanilla2' => array('name' => 'Vanilla 2', 'prefix' => 'GDN_')
);

// Include individual software porters.
 ?><?php
/**
 * ASP Playground exporter tool
 *
 * @copyright Vanilla Forums Inc. 2013
 * @license Proprietary
 * @package VanillaPorter
 */

$Supported['apg'] = array('name' => 'ASP Playground', 'prefix' => 'pgd_');
$Supported['apg']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
);

class APG extends ExportController {
    /**
     * @param ExportModel $Ex
     */
    public function ForumExport($Ex) {
        $CharacterSet = $Ex->GetCharacterSet('pgd_Threads');
        if ($CharacterSet) {
            $Ex->CharacterSet = $CharacterSet;
        }

        $Ex->BeginExport('', 'ASP Playground');
        $Ex->SourcePrefix = 'pgd_';

        // User.
        $User_Map = array(
            'Mem' => 'UserID',
            'Login' => 'Name',
            'Email' => 'Email',
            'Userpass' => 'Password',
            'totalPosts' => 'CountComments',
            'ip' => 'LastIPAddress',
            'banned' => 'Banned',
            'dateSignUp' => 'DateInserted',
            'lastLogin' => 'DateLastActive',
        );
        $Ex->ExportTable('User', "
         select m.*,
            'Text' as HashMethod
         from :_Members m;", $User_Map);

        // Role.
        /*$Role_Map = array(
            'GroupID' => 'RoleID',
            'Name' => 'Name');
        $Ex->ExportTable('Role', "
           select *
           from yaf_Group;", $Role_Map);
        */

        // UserRole.
        // Make everyone a member since there's no used roles.
        $UserRole_Map = array(
            'Mem' => 'UserID'
        );
        $Ex->ExportTable('UserRole', 'select Mem, 8 as RoleID from :_Members', $UserRole_Map);

        // Signatures.
        $Ex->ExportTable('UserMeta', "
         select
            Mem,
            'Plugin.Signatures.Sig' as `Name`,
            signature as `Value`
         from :_Members
         where signature <> ''

         union all

         select
            Mem,
            'Plugin.Signatures.Format' as `Name`,
            'BBCode' as `Value`
         from :_Members
         where signature <> '';");

        // Category.
        $Category_Map = array(
            'ForumID' => 'CategoryID',
            'ForumTitle' => 'Name',
            'ForumDesc' => 'Description',
            'Sort' => 'Sort',
            'lastModTime' => 'DateUpdated'
        );

        $Ex->ExportTable('Category', "
         select f.*
         from :_Forums f;", $Category_Map);

        // Discussion.
        $Discussion_Map = array(
            'messageID' => 'DiscussionID',
            'ForumID' => 'CategoryID',
            'mem' => 'InsertUserID',
            'dateCreated' => 'DateInserted',
            'Subject' => 'Name',
            'hits' => 'CountViews',
            'lastupdate' => 'DateLastComment'
        );
        $Ex->ExportTable('Discussion', "
         select
            t.*,
            m.Body
         from :_Threads t
         left join :_Messages m on m.messageID = t.messageID
         ;", $Discussion_Map);

        // Comment.
        $Comment_Map = array(
            'messageID' => 'CommentID',
            'threadID' => 'DiscussionID',
            'parent' => array('Column' => 'ReplyToCommentID', 'Type' => 'int'),
            'Mem' => 'InsertUserID',
            'dateCreated' => 'DateInserted',
            'Body' => 'Body',
            'ip' => 'InsertIPAddress'
        );
        $Ex->ExportTable('Comment', "
         select m.*,
            'BBCode' as Format
         from :_Messages m;", $Comment_Map);

        /*
        // Conversation.
        $this->_ExportConversationTemps();

        $Conversation_Map = array(
            'PMessageID' => 'ConversationID',
            'FromUserID' => 'InsertUserID',
            'Created' => 'DateInserted',
            'Title' => array('Column' => 'Subject', 'Type' => 'varchar(512)')
            );
        $Ex->ExportTable('Conversation', "
           select
              pm.*,
              g.Title
           from z_pmgroup g
           join yaf_PMessage pm
              on g.Group_ID = pm.PMessageID;", $Conversation_Map);

        // UserConversation.
        $UserConversation_Map = array(
            'PM_ID' => 'ConversationID',
            'User_ID' => 'UserID',
            'Deleted' => 'Deleted');
        $Ex->ExportTable('UserConversation', "
           select pto.*
           from z_pmto pto
           join z_pmgroup g
              on pto.PM_ID = g.Group_ID;", $UserConversation_Map);

        // ConversationMessage.
        $ConversationMessage_Map = array(
            'PMessageID' => 'MessageID',
            'Group_ID' => 'ConversationID',
            'FromUserID' => 'InsertUserID',
            'Created' => 'DateInserted',
            'Body' => 'Body',
            'Format' => 'Format');
        $Ex->ExportTable('ConversationMessage', "
           select
              pm.*,
              case when pm.Flags & 1 = 1 then 'Html' else 'BBCode' end as Format,
              t.Group_ID
           from yaf_PMessage pm
           join z_pmtext t
              on t.PM_ID = pm.PMessageID;", $ConversationMessage_Map);
        */

        $Ex->EndExport();
    }

    public function CleanDate($Value) {
        if (!$Value) {
            return null;
        }
        if (substr($Value, 0, 4) == '0000') {
            return null;
        }

        return $Value;
    }

}

?>
<?php
/**
 * bbPress exporter tool
 *
 * @copyright Vanilla Forums Inc. 2010
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$Supported['bbPress'] = array('name' => 'bbPress 1', 'prefix' => 'bb_');
$Supported['bbPress']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'PrivateMessages' => 1,
    'Passwords' => 1,
);

class BbPress extends ExportController {
    /** @var array Required tables => columns */
    protected $SourceTables = array(
        'forums' => array(),
        'posts' => array(),
        'topics' => array(),
        'users' => array('ID', 'user_login', 'user_pass', 'user_email', 'user_registered'),
        'meta' => array()
    );

    /**
     * Forum-specific export format.
     * @param ExportModel $Ex
     */
    protected function ForumExport($Ex) {
        // Begin
        $Ex->BeginExport('', 'bbPress 1.*', array('HashMethod' => 'Vanilla'));

        // Users
        $User_Map = array(
            'ID' => 'UserID',
            'user_login' => 'Name',
            'user_pass' => 'Password',
            'user_email' => 'Email',
            'user_registered' => 'DateInserted'
        );
        $Ex->ExportTable('User', "select * from :_users", $User_Map);  // ":_" will be replace by database prefix

        // Roles
        $Ex->ExportTable('Role',
            "select 1 as RoleID, 'Guest' as Name
         union select 2, 'Key Master'
         union select 3, 'Administrator'
         union select 4, 'Moderator'
         union select 5, 'Member'
         union select 6, 'Inactive'
         union select 7, 'Blocked'");

        // UserRoles
        $UserRole_Map = array(
            'user_id' => 'UserID'
        );
        $Ex->ExportTable('UserRole',
            "select distinct
           user_id,
           case when locate('keymaster', meta_value) <> 0 then 2
           when locate('administrator', meta_value) <> 0 then 3
           when locate('moderator', meta_value) <> 0 then 4
           when locate('member', meta_value) <> 0 then 5
           when locate('inactive', meta_value) <> 0 then 6
           when locate('blocked', meta_value) <> 0 then 7
           else 1 end as RoleID
         from :_usermeta
         where meta_key = 'bb_capabilities'", $UserRole_Map);

        // Categories
        $Category_Map = array(
            'forum_id' => 'CategoryID',
            'forum_name' => 'Name',
            'forum_desc' => 'Description',
            'forum_slug' => 'UrlCode',
            'left_order' => 'Sort'
        );
        $Ex->ExportTable('Category', "select *,
         lower(forum_slug) as forum_slug,
         nullif(forum_parent,0) as ParentCategoryID
         from :_forums", $Category_Map);

        // Discussions
        $Discussion_Map = array(
            'topic_id' => 'DiscussionID',
            'forum_id' => 'CategoryID',
            'topic_poster' => 'InsertUserID',
            'topic_title' => 'Name',
            'Format' => 'Format',
            'topic_start_time' => 'DateInserted',
            'topic_sticky' => 'Announce'
        );
        $Ex->ExportTable('Discussion', "select t.*,
            'Html' as Format,
            case t.topic_open when 0 then 1 else 0 end as Closed
         from :_topics t", $Discussion_Map);

        // Comments
        $Comment_Map = array(
            'post_id' => 'CommentID',
            'topic_id' => 'DiscussionID',
            'post_text' => array('Column' => 'Body', 'Filter' => 'bbPressTrim'),
            'Format' => 'Format',
            'poster_id' => 'InsertUserID',
            'post_time' => 'DateInserted'
        );
        $Ex->ExportTable('Comment', "select p.*,
            'Html' as Format
         from :_posts p", $Comment_Map);

        // Conversations.

        // The export is different depending on the table layout.
        $PM = $Ex->Exists('bbpm', array('ID', 'pm_title', 'pm_from', 'pm_to', 'pm_text', 'sent_on', 'pm_thread'));
        $ConversationVersion = '';

        if ($PM === true) {
            // This is from an old version of the plugin.
            $ConversationVersion = 'old';
        } elseif (is_array($PM) && count(array_intersect(array('ID', 'pm_from', 'pm_text', 'sent_on', 'pm_thread'),
                $PM)) == 0
        ) {
            // This is from a newer version of the plugin.
            $ConversationVersion = 'new';
        }

        if ($ConversationVersion) {
            // Conversation.
            $Conv_Map = array(
                'pm_thread' => 'ConversationID',
                'pm_from' => 'InsertUserID'
            );
            $Ex->ExportTable('Conversation',
                "select *, from_unixtime(sent_on) as DateInserted
            from :_bbpm
            where thread_depth = 0", $Conv_Map);

            // ConversationMessage.
            $ConvMessage_Map = array(
                'ID' => 'MessageID',
                'pm_thread' => 'ConversationID',
                'pm_from' => 'InsertUserID',
                'pm_text' => array('Column' => 'Body', 'Filter' => 'bbPressTrim')
            );
            $Ex->ExportTable('ConversationMessage',
                'select *, from_unixtime(sent_on) as DateInserted
            from :_bbpm', $ConvMessage_Map);

            // UserConversation.
            $Ex->Query("create temporary table bbpmto (UserID int, ConversationID int)");

            if ($ConversationVersion == 'new') {
                $To = $Ex->Query("select object_id, meta_value from bb_meta where object_type = 'bbpm_thread' and meta_key = 'to'",
                    true);
                if (is_resource($To)) {
                    while (($Row = @mysql_fetch_assoc($To)) !== false) {
                        $Thread = $Row['object_id'];
                        $Tos = explode(',', trim($Row['meta_value'], ','));
                        $ToIns = '';
                        foreach ($Tos as $ToID) {
                            $ToIns .= "($ToID,$Thread),";
                        }
                        $ToIns = trim($ToIns, ',');

                        $Ex->Query("insert bbpmto (UserID, ConversationID) values $ToIns", true);
                    }
                    mysql_free_result($To);

                    $Ex->ExportTable('UserConversation', 'select * from bbpmto');
                }
            } else {
                $ConUser_Map = array(
                    'pm_thread' => 'ConversationID',
                    'pm_from' => 'UserID'
                );
                $Ex->ExportTable('UserConversation',
                    'select distinct
                 pm_thread,
                 pm_from,
                 del_sender as Deleted
               from bb_bbpm

               union

               select distinct
                 pm_thread,
                 pm_to,
                 del_reciever
               from bb_bbpm', $ConUser_Map);
            }
        }

        // End
        $Ex->EndExport();
    }
}

function bbPressTrim($Text) {
    return rtrim(bb_code_trick_reverse($Text));
}

function bb_code_trick_reverse($text) {
    $text = preg_replace_callback("!(<pre><code>|<code>)(.*?)(</code></pre>|</code>)!s", 'bb_decodeit', $text);
    $text = str_replace(array('<p>', '<br />'), '', $text);
    $text = str_replace('</p>', "\n", $text);
    $text = str_replace('<coded_br />', '<br />', $text);
    $text = str_replace('<coded_p>', '<p>', $text);
    $text = str_replace('</coded_p>', '</p>', $text);

    return $text;
}

function bb_decodeit($matches) {
    $text = $matches[2];
    $trans_table = array_flip(get_html_translation_table(HTML_ENTITIES));
    $text = strtr($text, $trans_table);
    $text = str_replace('<br />', '<coded_br />', $text);
    $text = str_replace('<p>', '<coded_p>', $text);
    $text = str_replace('</p>', '</coded_p>', $text);
    $text = str_replace(array('&#38;', '&amp;'), '&', $text);
    $text = str_replace('&#39;', "'", $text);
    if ('<pre><code>' == $matches[1]) {
        $text = "\n$text\n";
    }

    return "`$text`";
}

?>
<?php
/**
 * Vanilla 2 exporter tool
 *
 * @copyright Vanilla Forums Inc. 2010
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$Supported['drupal'] = array('name' => 'Drupal 6', 'prefix' => '');
$Supported['drupal']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Avatars' => 1,
    'Signatures' => 1,
    'Passwords' => 1,
);

class Drupal extends ExportController {

    /** @var array Required tables => columns */
    protected $_SourceTables = array();

    /**
     * @param ExportModel $Ex
     */
    protected function ForumExport($Ex) {
        $this->Ex = $Ex;

        // Get the characterset for the comments.
        $CharacterSet = $Ex->GetCharacterSet('comment');
        if ($CharacterSet) {
            $Ex->CharacterSet = $CharacterSet;
        }

        // Begin
        $Ex->BeginExport('', 'Drupal');

        // Users
        $User_Map = array(
            'uid' => 'UserID',
            'name' => 'Name',
            'Password' => 'Password',
            'mail' => 'Email',
            'photo' => 'Photo',
            'created' => array('Column' => 'DateInserted', 'Filter' => 'TimestampToDate'),
            'login' => array('Column' => 'DateLastActive', 'Filter' => 'TimestampToDate')
        );
        $Ex->ExportTable('User', "
         select u.*,
            nullif(concat('drupal/', u.picture), 'drupal/') as photo,
            concat('md5$$', u.pass) as Password,
            'Django' as HashMethod
         from :_users u
         where uid > 0", $User_Map);

        // Signatures.
        $UserMeta_Map = array(
            'uid' => 'UserID',
            'Name' => 'Name',
            'signature' => 'Value'
        );
        $Ex->ExportTable('UserMeta', "
         select u.*, 'Plugins.Signatures.Sig' as Name
         from :_users u
         where uid > 0", $UserMeta_Map);

        // Roles.
        $Role_Map = array(
            'rid' => 'RoleID',
            'name' => 'Name'
        );
        $Ex->ExportTable('Role', "select r.* from :_role r", $Role_Map);

        // User Role.
        $UserRole_Map = array(
            'uid' => 'UserID',
            'rid' => 'RoleID'
        );
        $Ex->ExportTable('UserRole', "
         select * from :_users_roles", $UserRole_Map);

        // Categories (sigh)
        $Category_Map = array(
            'tid' => 'CategoryID',
            'name' => 'Name',
            'description' => 'description',
            'parent' => 'ParentCategoryID'
        );
        $Ex->ExportTable('Category', "
         select t.*, nullif(h.parent, 0) as parent
         from :_term_data t
         join :_term_hierarchy h
            on t.tid = h.tid", $Category_Map);

        // Discussions.
        $Discussion_Map = array(
            'nid' => 'DiscussionID',
            'title' => 'Name',
            'body' => 'Body',
            'uid' => 'InsertUserID',
            'created' => array('Column' => 'DateInserted', 'Filter' => 'TimestampToDate'),
            'DateUpdated' => array('Column' => 'DateUpdated', 'Filter' => 'TimestampToDate'),
            'sticky' => 'Announce',
            'tid' => 'CategoryID'
        );
        $Ex->ExportTable('Discussion', "
         select n.*, nullif(n.changed, n.created) as DateUpdated, f.tid, r.body
         from nodeforum f
         left join node n
            on f.nid = n.nid
         left join node_revisions r
            on r.nid = n.nid", $Discussion_Map);

        // Comments.
        $Comment_Map = array(
            'cid' => 'CommentID',
            'uid' => 'InsertUserID',
            'body' => array('Column' => 'Body'),
            'hostname' => 'InsertIPAddress',
            'created' => array('Column' => 'DateInserted', 'Filter' => 'TimestampToDate')
        );
        $Ex->ExportTable('Comment', "
         select
            n.created,
            n.uid,
            r.body,
            c.nid as DiscussionID,
            n.title,
            'Html' as Format,
            nullif(n.changed, n.created) as DateUpdated
         from node n
         left join node_comments c
            on c.cid = n.nid
         left join node_revisions r
            on r.nid = n.nid
         where n.type = 'forum_reply'", $Comment_Map);

        // Comments.
        /*$Comment_Map = array(
            'cid' => 'CommentID',
            'nid' => 'DiscussionID',
            'uid' => 'InsertUserID',
            'comment' => array('Column' => 'Body'),
            'hostname' => 'InsertIPAddress',
            'timeatamp' => array('Column' => 'DateInserted', 'Filter' => 'TimestampToDate')
        );
        $Ex->ExportTable('Comment', "
           select c.*,
              n.title,
              'Html' as Format
           from comments c
           join node n
              on c.nid = n.nid", $Comment_Map);
        */
        // Media.
        /*$Media_Map = array(
            'fid' => 'MediaID',
            'nid' => 'ForeignID',
            'filename' => 'Name',
            'path' => 'Path',
            'filemime' => 'Type',
            'filesize' => 'Size',
            'uid' => 'InsertUserID',
            'created' => array('Column' => 'DateInserted', 'Filter' => 'TimestampToDate')
        );
        $Ex->ExportTable('Media', "
           select f.*,
              nullif(concat('drupal/', f.filepath), 'drupal/') as path,
              n.uid,
              n.created,
              'discussion' as ForeignTable
           from files f
           join node n
              on f.nid = n.nid
           where n.type = 'forum'", $Media_Map);
        */

        $Ex->EndExport();
    }

    /**
     *
     * @param ExportModel $Ex
     * @param string $TableName
     */
    protected function ExportTable($Ex, $TableName) {
        // Make sure the table exists.
        if (!$Ex->Exists($TableName)) {
            return;
        }

        $Ex->ExportTable($TableName, "select * from :_{$TableName}");
    }

}

?>
<?php
/**
 * esotalk exporter tool.
 *
 * @copyright Vanilla Forums Inc. 2010-2014
 * @license GNU GPL2
 * @package VanillaPorter
 * @see functions.commandline.php for command line usage.
 */

$Supported['esotalk'] = array('name' => 'esoTalk', 'prefix' => 'forum_');
$Supported['esotalk']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Bookmarks' => 1,
    'Passwords' => 1,
);

class esotalk extends ExportController {
    /**
     * Main export process.
     *
     * @param ExportModel $Ex
     * @see $_Structures in ExportModel for allowed destination tables & columns.
     */
    public function ForumExport($Ex) {
        // Get the characterset for the comments.
        // Usually the comments table is the best target for this.
        $CharacterSet = $Ex->GetCharacterSet(':_post');
        if ($CharacterSet) {
            $Ex->CharacterSet = $CharacterSet;
        }

        // Reiterate the platform name here to be included in the porter file header.
        $Ex->BeginExport('', 'esotalk');


        // User.
        $User_Map = array(
            'memberId' => 'UserID',
            'username' => 'Name',
            'email' => 'Email',
            //'confirmed' => 'Confirmed', //requires Vanilla 2.2
            'password' => 'Password',
        );
        $Ex->ExportTable('User', "
         select u.*, 'crypt' as HashMethod,
            FROM_UNIXTIME(joinTime) as DateInserted,
            FROM_UNIXTIME(lastActionTime) as DateLastActive,
            if(account='suspended',1,0) as Banned
         from :_member u", $User_Map);


        // Role.
        $Role_Map = array(
            'groupId' => 'RoleID',
            'name' => 'Name',
        );
        $Ex->ExportTable('Role', "
         select groupId, name
         from :_group
         union select max(groupId)+1, 'Member' from :_group
         union select max(groupId)+2, 'Administrator' from :_group
         ", $Role_Map);


        // User Role.
        $UserRole_Map = array(
            'memberId' => 'UserID',
            'groupId' => 'RoleID',
        );
        // Create fake 'member' and 'administrator' roles to account for them being set separately on member table.
        $Ex->ExportTable('UserRole', "
         select u.memberId, u.groupId
         from :_member_group u
         union all
         select memberId, (select max(groupId)+1 from :_group) from :_member where account='member'
         union all
         select memberId, (select max(groupId)+2 from :_group) from :_member where account='administrator'
         ", $UserRole_Map);


        // Category.
        $Category_Map = array(
            'channelId' => 'CategoryID',
            'title' => 'Name',
            'slug' => 'UrlCode',
            'description' => 'Description',
            'parentId' => 'ParentCategoryID',
            'countConversations' => 'CountDiscussions',
            //'countPosts' => 'CountComments',
        );
        $Ex->ExportTable('Category', "
         select *
         from :_channel c", $Category_Map);


        // Discussion.
        $Discussion_Map = array(
            'conversationId' => 'DiscussionID',
            'title' => array('Column' => 'Name', 'Filter' => 'HTMLDecoder'),
            'channelId' => 'CategoryID',
            'memberId' => 'InsertUserID',
            'sticky' => 'Announce',
            'locked' => 'Closed',
            //'countPosts' => 'CountComments',
            'lastPostMemberId' => 'LastCommentUserID',
            'content' => 'Body',
        );
        // The body of the OP is in the post table.
        $Ex->ExportTable('Discussion', "
         select *, 'BBCode' as Format,
            FROM_UNIXTIME(startTime) as DateInserted,
            FROM_UNIXTIME(lastPostTime) as DateLastComment
         from :_conversation c
         left join :_post p on p.conversationId = c.conversationId
         where private = 0
         group by c.conversationId
         order by p.time", $Discussion_Map);


        // Comment.
        $Comment_Map = array(
            'postId' => 'CommentID',
            'conversationId' => 'DiscussionID',
            'content' => 'Body',
            'memberId' => 'InsertUserID',
            'editMemberId' => 'UpdateUserID',
        );
        // Now we need to omit the comments we used as the OP.
        $Ex->ExportTable('Comment', "
         select p.*, 'BBCode' as Format,
            FROM_UNIXTIME(time) as DateInserted,
            FROM_UNIXTIME(editTime) as DateUpdated
         from :_post p
         left join :_conversation c on c.conversationId = p.conversationId
         where c.private = 0
         and p.postId not in (select p.postId
         	from forum_conversation c
         	left join forum_post p on p.conversationId = c.conversationId where c.private = 0
			   group by p.conversationId
			   order by p.time)", $Comment_Map);


        // UserDiscussion.
        $UserDiscussion_Map = array(
            'id' => 'UserID',
            'conversationId' => 'DiscussionID',
        );
        $Ex->ExportTable('UserDiscussion', "
         select *
         from :_member_conversation
         where starred = 1", $UserDiscussion_Map);


        // Permission.
        // :_channel_group


        // Media.
        // :_attachment


        // Conversation.
        // :_conversation where private = 1


        $Ex->EndExport();
    }
}

?>
<?php
/**
 * Expression Engine exporter tool
 *
 * @copyright Vanilla Forums Inc. 2010-2015
 * @license GNU GPL2
 * @package VanillaPorter
 */

$Supported['expressionengine'] = array('name' => 'Expression Engine Discussion Forum', 'prefix' => 'forum_');
$Supported['expressionengine']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Bookmarks' => 1,
    'Passwords' => 1,
    'Signatures' => 1,
    'Permissions' => 1,
    'Attachments' => 1,
);

class ExpressionEngine extends ExportController {
    /**
     *
     * @param ExportModel $Ex
     */
    public function ForumExport($Ex) {

        // Get the characterset for the comments.
        $CharacterSet = $Ex->GetCharacterSet('forum_topics');
        if ($CharacterSet) {
            $Ex->CharacterSet = $CharacterSet;
        }

        $Ex->BeginExport('', 'Expression Engine');
        $Ex->SourcePrefix = 'forum_';

        $this->ExportConversations();


        // Permissions.
        $Permission_Map = array(
            'group_id' => 'RoleID',
            'can_access_cp' => 'Garden.Settings.View',
            'can_access_edit' => 'Vanilla.Discussions.Edit',
            'can_edit_all_comments' => 'Vanilla.Comments.Edit',
            'can_access_admin' => 'Garden.Settings.Manage',
            'can_admin_members' => 'Garden.Users.Edit',
            'can_moderate_comments' => 'Garden.Moderation.Manage',
            'can_view_profiles' => 'Garden.Profiles.View',
            'can_post_comments' => 'Vanilla.Comments.Add',
            'can_view_online_system' => 'Vanilla.Discussions.View',
            'can_sign_in' => 'Garden.SignIn.Allow',
            'can_view_profiles3' => 'Garden.Activity.View',
            'can_post_comments2' => 'Vanilla.Discussions.Add'
        );
        $Permission_Map = $Ex->FixPermissionColumns($Permission_Map);
        foreach ($Permission_Map as $Column => &$Info) {
            if (is_array($Info) && isset($Info['Column'])) {
                $Info['Filter'] = array($this, 'YNBool');
            }
        }

        $Ex->ExportTable('Permission', "
         SELECT
            g.can_view_profiles AS can_view_profiles2,
            g.can_view_profiles AS can_view_profiles3,
            g.can_post_comments AS can_post_comments2,
            g.can_post_comments AS can_sign_in,
            CASE WHEN can_access_admin = 'y' THEN 'all' WHEN can_view_online_system = 'y' THEN 'view' END AS _Permissions,
            g.*
         FROM forum_member_groups g
      ", $Permission_Map);


        // User.
        $User_Map = array(
            'member_id' => 'UserID',
            'username' => array('Column' => 'Username', 'Type' => 'varchar(50)'),
            'screen_name' => array('Column' => 'Name', 'Filter' => array($Ex, 'HTMLDecoder')),
            'Password2' => 'Password',
            'email' => 'Email',
            'ipaddress' => 'InsertIPAddress',
            'join_date' => array('Column' => 'DateInserted', 'Filter' => array($Ex, 'TimestampToDate')),
            'last_activity' => array('Column' => 'DateLastActive', 'Filter' => array($Ex, 'TimestampToDate')),
            'timezone' => 'HourOffset',
            'location' => 'Location'
        );
        $Ex->ExportTable('User', "
         SELECT
            'django' AS HashMethod,
            concat('sha1$$', password) AS Password2,
            CASE WHEN bday_y > 1900 THEN concat(bday_y, '-', bday_m, '-', bday_d) ELSE NULL END AS DateOfBirth,
            from_unixtime(join_date) AS DateFirstVisit,
            ip_address AS LastIPAddress,
            CASE WHEN avatar_filename = '' THEN NULL ELSE concat('imported/', avatar_filename) END AS Photo,
            u.*
         FROM forum_members u", $User_Map);


        // Role.
        $Role_Map = array(
            'group_id' => 'RoleID',
            'group_title' => 'Name',
            'group_description' => 'Description'
        );
        $Ex->ExportTable('Role', "
         SELECT *
         FROM forum_member_groups", $Role_Map);


        // User Role.
        $UserRole_Map = array(
            'member_id' => 'UserID',
            'group_id' => 'RoleID'
        );
        $Ex->ExportTable('UserRole', "
         SELECT *
         FROM forum_members u", $UserRole_Map);


        // UserMeta
        $Ex->ExportTable('UserMeta', "
         SELECT
            member_id AS UserID,
            'Plugin.Signatures.Sig' AS Name,
            signature AS Value
         FROM forum_members
         WHERE signature <> ''");


        // Category.
        $Category_Map = array(
            'forum_id' => 'CategoryID',
            'forum_name' => 'Name',
            'forum_description' => 'Description',
            'forum_parent' => 'ParentCategoryID',
            'forum_order' => 'Sort'
        );
        $Ex->ExportTable('Category', "
         SELECT * FROM forum_forums", $Category_Map);


        // Discussion.
        $Discussion_Map = array(
            'topic_id' => 'DiscussionID',
            'forum_id' => 'CategoryID',
            'author_id' => 'InsertUserID',
            'title' => array('Column' => 'Name', 'Filter' => array($Ex, 'HTMLDecoder')),
            'ip_address' => 'InsertIPAddress',
            'body' => array('Column' => 'Body', 'Filter' => array($this, 'CleanBodyBrackets')),
            'body2' => array('Column' => 'Format', 'Filter' => array($this, 'GuessFormat')),
            'topic_date' => array('Column' => 'DateInserted', 'Filter' => array($Ex, 'TimestampToDate')),
            'topic_edit_date' => array('Column' => 'DateUpdated', 'Filter' => array($Ex, 'TimestampToDate')),
            'topic_edit_author' => 'UpdateUserID'
        );
        $Ex->ExportTable('Discussion', "
          SELECT
             CASE WHEN announcement = 'y' THEN 1 WHEN sticky = 'y' THEN 2 ELSE 0 END AS Announce,
             CASE WHEN status = 'c' THEN 1 ELSE 0 END AS Closed,
             t.body AS body2,
             t.*
          FROM forum_forum_topics t", $Discussion_Map);


        // Comment.
        $Comment_Map = array(
            'post_id' => 'CommentID',
            'topic_id' => 'DiscussionID',
            'author_id' => 'InsertUserID',
            'ip_address' => 'InsertIPAddress',
            'body' => array('Column' => 'Body', 'Filter' => array($this, 'CleanBodyBrackets')),
            'body2' => array('Column' => 'Format', 'Filter' => array($this, 'GuessFormat')),
            'post_date' => array('Column' => 'DateInserted', 'Filter' => array($Ex, 'TimestampToDate')),
            'post_edit_date' => array('Column' => 'DateUpdated', 'Filter' => array($Ex, 'TimestampToDate')),
            'post_edit_author' => 'UpdateUserID'
        );
        $Ex->ExportTable('Comment', "
      SELECT
         'Html' AS Format,
         p.body AS body2,
         p.*
      FROM forum_forum_posts p", $Comment_Map);


        // Media.
        $Media_Map = array(
            'filename' => 'Name',
            'extension' => array('Column' => 'Type', 'Filter' => array($this, 'MimeTypeFromExtension')),
            'filesize' => 'Size',
            'member_id' => 'InsertUserID',
            'attachment_date' => array('Column' => 'DateInserted', 'Filter' => array($Ex, 'TimestampToDate')),
            'filehash' => array('Column' => 'FileHash', 'Type' => 'varchar(100)')
        );
        $Ex->ExportTable('Media', "
         SELECT
            concat('imported/', filename) AS Path,
            CASE WHEN post_id > 0 THEN post_id ELSE topic_id END AS ForeignID,
            CASE WHEN post_id > 0 THEN 'comment' ELSE 'discussion' END AS ForeignTable,
            'local' AS StorageMethod,
            a.*
         FROM forum_forum_attachments a", $Media_Map);

        $Ex->EndExport();
    }

    /**
     * Private message conversion.
     */
    public function ExportConversations() {
        $Ex = $this->Ex;

        $this->_ExportConversationTemps();

        // Conversation.
        $Conversation_Map = array(
            'message_id' => 'ConversationID',
            'title2' => array('Column' => 'Subject', 'Type' => 'varchar(255)'),
            'sender_id' => 'InsertUserID',
            'message_date' => array('Column' => 'DateInserted', 'Filter' => array($Ex, 'TimestampToDate')),
        );
        $Ex->ExportTable('Conversation', "
         SELECT
         pm.*,
         g.title AS title2
       FROM forum_message_data pm
       JOIN z_pmgroup g
         ON g.group_id = pm.message_id;", $Conversation_Map);

        // User Conversation.
        $UserConversation_Map = array(
            'group_id' => 'ConversationID',
            'userid' => 'UserID'
        );
        $Ex->ExportTable('UserConversation', "
         SELECT
         g.group_id,
         t.userid
       FROM z_pmto t
       JOIN z_pmgroup g
         ON g.group_id = t.message_id;", $UserConversation_Map);

        // Conversation Message.
        $Message_Map = array(
            'group_id' => 'ConversationID',
            'message_id' => 'MessageID',
            'message_body' => 'Body',
            'message_date' => array('Column' => 'DateInserted', 'Filter' => array($Ex, 'TimestampToDate')),
            'sender_id' => 'InsertUserID'
        );
        $Ex->ExportTable('ConversationMessage', "
         SELECT
            pm.*,
            pm2.group_id,
            'BBCode' AS Format
          FROM forum_message_data pm
          JOIN z_pmtext pm2
            ON pm.message_id = pm2.message_id", $Message_Map);
    }

    /**
     * Create temporary tables for private message conversion.
     */
    public function _ExportConversationTemps() {
        $Ex = $this->Ex;

        $Ex->Query('DROP TABLE IF EXISTS z_pmto;');
        $Ex->Query('CREATE TABLE z_pmto (
            message_id INT UNSIGNED,
            userid INT UNSIGNED,
            deleted TINYINT(1),
            PRIMARY KEY(message_id, userid)
            );');

        $Ex->Query("insert ignore z_pmto (
                message_id,
                userid,
                deleted
            )
            select
                message_id,
                recipient_id,
                case when message_deleted = 'y' then 1 else 0 end as `deleted`
            from forum_message_copies;");

        $Ex->Query("UPDATE forum_message_data
            SET message_recipients = replace(message_recipients, '|', ',');");

        $Ex->Query("UPDATE forum_message_data
            SET message_cc = replace(message_cc, '|', ',');");

        $Ex->Query('insert ignore z_pmto (
            message_id,
            userid
          )
          select
            message_id,
            sender_id
          from forum_message_data;');

        $Ex->Query("insert ignore z_pmto (
                message_id,
                userid
            )
            select
                message_id,
                u.member_id
            from forum_message_data m
            join forum_members u
                on  FIND_IN_SET(u.member_id, m.message_cc) > 0
            where m.message_cc <> '';");

        $Ex->Query("insert ignore z_pmto (
                message_id,
                userid
            )
            select
                message_id,
                u.member_id
            from forum_message_data m
            join forum_members u
                on  FIND_IN_SET(u.member_id, m.message_cc) > 0
            where m.message_cc <> '';");

        $Ex->Query("DROP TABLE IF EXISTS z_pmto2;");

        $Ex->Query("CREATE TABLE z_pmto2 (
            message_id INT UNSIGNED,
            userids VARCHAR(250),
            PRIMARY KEY (message_id)
            );");

        $Ex->Query("insert z_pmto2 (
            message_id,
            userids
            )
            select
                message_id,
                group_concat(userid order by userid)
            from z_pmto t
            group by t.message_id;");

        $Ex->Query("DROP TABLE IF EXISTS z_pmtext;");
        $Ex->Query("CREATE TABLE z_pmtext (
            message_id INT UNSIGNED,
            title VARCHAR(250),
            title2 VARCHAR(250),
            userids VARCHAR(250),
            group_id INT UNSIGNED
            );");

        $Ex->Query("insert z_pmtext (
            message_id,
            title,
            title2
            )
            select
                message_id,
                message_subject,
                case when message_subject like 'Re: %' then trim(substring(message_subject, 4)) else message_subject end as title2
            from forum_message_data;");

        $Ex->Query("CREATE INDEX z_idx_pmtext ON z_pmtext (message_id);");

        $Ex->Query("UPDATE z_pmtext pm
            JOIN z_pmto2 t
                ON pm.message_id = t.message_id
            SET pm.userids = t.userids;");

        $Ex->Query("DROP TABLE IF EXISTS z_pmgroup;");
        $Ex->Query("CREATE TABLE z_pmgroup (
            group_id INT UNSIGNED,
            title VARCHAR(250),
            userids VARCHAR(250)
            );");

        $Ex->Query("insert z_pmgroup (
            group_id,
            title,
            userids
            )
            select
                min(pm.message_id),
                pm.title2,
                t2.userids
            from z_pmtext pm
            join z_pmto2 t2
                on pm.message_id = t2.message_id
            group by pm.title2, t2.userids;");

        $Ex->Query("CREATE INDEX z_idx_pmgroup ON z_pmgroup (title, userids);");
        $Ex->Query("CREATE INDEX z_idx_pmgroup2 ON z_pmgroup (group_id);");

        $Ex->Query("UPDATE z_pmtext pm
            JOIN z_pmgroup g
                ON pm.title2 = g.title AND pm.userids = g.userids
            SET pm.group_id = g.group_id;");
    }

}

?>
<?php
/**
 * Invision Powerboard exporter tool.
 *
 * To export avatars, provide ?avatars=1&avatarpath=/path/to/avatars
 *
 * @copyright Vanilla Forums Inc. 2010
 * @license Proprietary
 * @package VanillaPorter
 */

$Supported['ipb'] = array('name' => 'IP.Board 3', 'prefix' => 'ibf_'); // IPB
$Supported['ipb']['CommandLine'] = array(
    'avatarpath' => array('Full path of source avatars to process.', 'Sx' => ':', 'Field' => 'avatarpath'),
    'source' => array(
        'Source user table: profile_portal (default) or member_extra.',
        'Sx' => ':',
        'Field' => 'sourcetable'
    ),
);
$Supported['ipb']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Avatars' => 1,
    'Attachments' => 1,
    'PrivateMessages' => 1,
    'Permissions' => 1,
    'Signatures' => 1,
    'Passwords' => 1,
    'Tags' => 1
);

class IPB extends ExportController {
    /**
     * Export avatars into vanilla-compatibles names
     */
    public function DoAvatars() {
        // Source table
        $SourceTable = $this->Param('source', 'profile_portal');

        // Check source folder
        $SourceFolder = $this->Param('avatarpath');
        if (!is_dir($SourceFolder)) {
            trigger_error("Source avatar folder '{$SourceFolder}' does not exist.");
        }

        // Set up a target folder
        $TargetFolder = CombinePaths(array($SourceFolder, 'ipb'));
        if (!is_dir($SourceFolder)) {
            @$Made = mkdir($TargetFolder, 0777, true);
            if (!$Made) {
                trigger_error("Target avatar folder '{$TargetFolder}' could not be created.");
            }
        }

        switch ($SourceTable) {
            case 'profile_portal':

                $UserList = $this->Ex->Query("select
                  pp_member_id as member_id,
                  pp_main_photo as main_photo,
                  pp_thumb_photo as thumb_photo,
                  coalesce(pp_main_photo,pp_thumb_photo,0) as photo
               from :_profile_portal
               where length(coalesce(pp_main_photo,pp_thumb_photo,0)) > 3
               order by pp_member_id asc");

                break;

            case 'member_extra':

                $UserList = $this->Ex->Query("select
                  id as member_id,
                  avatar_location as photo
               from :_member_extra
               where
                  length(avatar_location) > 3 and
                  avatar_location <> 'noavatar'
               order by id asc");

                break;
        }

        $Processed = 0;
        $Skipped = 0;
        $Completed = 0;
        $Errors = array();
        while (($Row = mysql_fetch_assoc($UserList)) !== false) {
            $Processed++;
            $Error = false;

            $UserID = $Row['member_id'];

            // Determine target paths and name
            $Photo = trim($Row['photo']);
            $Photo = preg_replace('`^upload:`', '', $Photo);
            if (preg_match('`^https?:`i', $Photo)) {
                $Skipped++;
                continue;
            }

            $PhotoFileName = basename($Photo);
            $PhotoPath = dirname($Photo);
            $PhotoFolder = CombinePaths(array($TargetFolder, $PhotoPath));
            @mkdir($PhotoFolder, 0777, true);

            $PhotoSrc = CombinePaths(array($SourceFolder, $Photo));
            if (!file_exists($PhotoSrc)) {
                $Errors[] = "Missing file: {$PhotoSrc}";
                continue;
            }

            $MainPhoto = trim(GetValue('main_photo', $Row, null));
            $ThumbPhoto = trim(GetValue('thumb_photo', $Row, null));

            // Main Photo
            if (!$MainPhoto) {
                $MainPhoto = $Photo;
            }
            $MainSrc = CombinePaths(array($SourceFolder, $MainPhoto));
            $MainDest = CombinePaths(array($PhotoFolder, "p" . $PhotoFileName));
            $Copied = @copy($MainSrc, $MainDest);
            if (!$Copied) {
                $Error |= true;
                $Errors[] = "! failed to copy main photo '{$MainSrc}' for user {$UserID} (-> {$MainDest}).";
            }

            // Thumb Photo
            if (!$ThumbPhoto) {
                $ThumbPhoto = $Photo;
            }
            $ThumbSrc = CombinePaths(array($SourceFolder, $MainPhoto));
            $ThumbDest = CombinePaths(array($PhotoFolder, "n" . $PhotoFileName));
            $Copied = @copy($ThumbSrc, $ThumbDest);
            if (!$Copied) {
                $Error |= true;
                $Errors[] = "! failed to copy thumbnail '{$ThumbSrc}' for user {$UserID} (-> {$ThumbDest}).";
            }

            if (!$Error) {
                $Completed++;
            }

            if (!($Processed % 100)) {
                echo " - processed {$Processed}\n";
            }
        }

        $nErrors = sizeof($Errors);
        if ($nErrors) {
            echo "{$nErrors} errors:\n";
            foreach ($Errors as $Error) {
                echo "{$Error}\n";
            }
        }

        echo "Completed: {$Completed}\n";
        echo "Skipped: {$Skipped}\n";
    }

    /**
     * @param ExportModel $Ex
     */
    protected function ForumExport($Ex) {
//      $Ex->TestMode = FALSE;
//      $Ex->TestLimit = FALSE;
//      $Ex->Destination = 'database';
//      $Ex->DestDb = 'unknownworlds';
//      $Ex->CaptureOnly = TRUE;
//      $Ex->ScriptCreateTable = FALSE;
//      $Ex->DestPrefix = 'GDN_';

        $Ex->SourcePrefix = ':_';

        // Get the characterset for the comments.
        $CharacterSet = $Ex->GetCharacterSet('posts');
        if ($CharacterSet) {
            $Ex->CharacterSet = $CharacterSet;
        }

        // Decode all of the necessary fields.
//      $Ex->HTMLDecoderDb('members', 'members_display_name', 'member_id');
//      $Ex->HTMLDecoderDb('members', 'name', 'member_id');
//      $Ex->HTMLDecoderDb('members', 'title', 'member_id');
//      $Ex->HtmlDecoderDb('groups', 'g_title', 'g_id');
//      $Ex->HtmlDecoderDb('topics', 'title', 'tid');
//      $Ex->HtmlDecoderDb('topics', 'description', 'tid');

        // Begin
        $Ex->BeginExport('', 'IPB 3.*', array('HashMethod' => 'ipb'));

        // Export avatars
        if ($this->Param('avatars')) {
            $this->DoAvatars();
        }

        if ($Ex->Exists('members', 'member_id') === true) {
            $MemberID = 'member_id';
        } else {
            $MemberID = 'id';
        }

        // Users.
        $User_Map = array(
            $MemberID => 'UserID',
            'members_display_name' => array('Column' => 'Name', 'Filter' => 'HtmlDecoder'),
            'email' => 'Email',
            'joined' => array('Column' => 'DateInserted', 'Filter' => 'TimestampToDate'),
            'firstvisit' => array(
                'Column' => 'DateFirstVisit',
                'SourceColumn' => 'joined',
                'Filter' => 'TimestampToDate'
            ),
            'ip_address' => 'InsertIPAddress',
            'title' => 'Title',
            'time_offset' => 'HourOffset',
            'last_activity' => array('Column' => 'DateLastActive', 'Filter' => 'TimestampToDate'),
            'member_banned' => 'Banned',
            'Photo' => 'Photo',
            'title' => 'Title',
            'location' => 'Location'
        );

        $From = '';
        $Select = '';

        if ($Ex->Exists('members', 'members_pass_hash') === true) {
            $Select = ",concat(m.members_pass_hash, '$', m.members_pass_salt) as Password";
        } else {
            $Select = ",concat(mc.converge_pass_hash, '$', mc.converge_pass_salt) as Password";
            $From = "left join :_members_converge mc
            on m.$MemberID = mc.converge_id";
        }

        if ($Ex->Exists('members', 'hide_email') === true) {
            $ShowEmail = '!hide_email';
        } else {
            $ShowEmail = '0';
        }

        $Cdn = $this->CdnPrefix();

        if ($Ex->Exists('member_extra') === true) {
            $Sql = "select
                  m.*,
                  m.joined as firstvisit,
                  'ipb' as HashMethod,
                  $ShowEmail as ShowEmail,
                  case when x.avatar_location in ('noavatar', '') then null
                     when x.avatar_location like 'upload:%' then concat('{$Cdn}ipb/', right(x.avatar_location, length(x.avatar_location) - 7))
                     when x.avatar_type = 'upload' then concat('{$Cdn}ipb/', x.avatar_location)
                     when x.avatar_type = 'url' then x.avatar_location
                     when x.avatar_type = 'local' then concat('{$Cdn}style_avatars/', x.avatar_location)
                     else null
                  end as Photo,
                  x.location
                  $Select
                 from :_members m
                 left join :_member_extra x
                  on m.$MemberID = x.id
                 $From";
        } else {
            $Sql = "select
                  m.*,
                  joined as firstvisit,
                  'ipb' as HashMethod,
                  $ShowEmail as ShowEmail,
                  case when length(p.pp_main_photo) <= 3 or p.pp_main_photo is null then null
                     when p.pp_main_photo like '%//%' then p.pp_main_photo
                     else concat('{$Cdn}ipb/', p.pp_main_photo)
                  end as Photo
                 $Select
                 from :_members m
                 left join :_profile_portal p
                    on m.$MemberID = p.pp_member_id
                 $From";
        }
        $this->ClearFilters('members', $User_Map, $Sql, 'm');
        $Ex->ExportTable('User', $Sql, $User_Map);  // ":_" will be replaced by database prefix

        // Roles.
        $Role_Map = array(
            'g_id' => 'RoleID',
            'g_title' => 'Name'
        );
        $Ex->ExportTable('Role', "select * from :_groups", $Role_Map);

        // Permissions.
        $Permission_Map = array(
            'g_id' => 'RoleID',
            'g_view_board' => 'Garden.SignIn.Allow',
            'g_view_board2' => 'Garden.Profiles.View',
            'g_view_board3' => 'Garden.Activity.View',
            'g_view_board4' => 'Vanilla.Discussions.View',
            'g_edit_profile' => 'Garden.Profiles.Edit',
            'g_post_new_topics' => 'Vanilla.Discussions.Add',
            'g_reply_other_topics' => 'Vanilla.Comments.Add',
//          'g_edit_posts' => 'Vanilla.Comments.Edit', // alias
            'g_open_close_posts' => 'Vanilla.Discussions.Close',
            'g_is_supmod' => 'Garden.Moderation.Manage',
            'g_access_cp' => 'Garden.Settings.View',
//          'g_edit_topic' => 'Vanilla.Discussions.Edit'
        );
        $Permission_Map = $Ex->FixPermissionColumns($Permission_Map);
        $Ex->ExportTable('Permission', "
         select r.*,
            r.g_view_board as g_view_board2,
            r.g_view_board as g_view_board3,
            r.g_view_board as g_view_board4
         from :_groups r", $Permission_Map);

        // User Role.

        if ($Ex->Exists('members', 'member_group_id') === true) {
            $GroupID = 'member_group_id';
        } else {
            $GroupID = 'mgroup';
        }

        $UserRole_Map = array(
            $MemberID => 'UserID',
            $GroupID => 'RoleID'
        );

        $Sql = "
         select
            m.$MemberID, m.$GroupID
         from :_members m";

        if ($Ex->Exists('members', 'mgroup_others')) {
            $Sql .= "
            union all

            select m.$MemberID, g.g_id
            from :_members m
            join :_groups g
               on find_in_set(g.g_id, m.mgroup_others)";

        }

        $Ex->ExportTable('UserRole', $Sql, $UserRole_Map);

        // UserMeta.
        $UserMeta_Map = array(
            'UserID' => 'UserID',
            'Name' => 'Name',
            'Value' => 'Value'
        );

        if ($Ex->Exists('profile_portal', 'signature') === true) {
            $Sql = "
         select
            pp_member_id as UserID,
            'Plugin.Signatures.Sig' as Name,
            signature as Value
         from :_profile_portal
         where length(signature) > 1

         union all

         select
            pp_member_id as UserID,
            'Plugin.Signatures.Format' as Name,
            'IPB' as Value
         from :_profile_portal
         where length(signature) > 1
               ";
        } elseif ($Ex->Exists('member_extra', array('id', 'signature')) === true) {
            $Sql = "
         select
            id as UserID,
            'Plugin.Signatures.Sig' as Name,
            signature as Value
         from :_member_extra
         where length(signature) > 1

         union all

         select
            id as UserID,
            'Plugin.Signatures.Format' as Name,
            'IPB' as Value
         from :_member_extra
         where length(signature) > 1";
        } else {
            $Sql = false;
        }
        if ($Sql) {
            $Ex->ExportTable('UserMeta', $Sql, $UserMeta_Map);
        }

        // Category.
        $Category_Map = array(
            'id' => 'CategoryID',
            'name' => array('Column' => 'Name', 'Filter' => 'HtmlDecoder'),
            'name_seo' => 'UrlCode',
            'description' => 'Description',
            'parent_id' => 'ParentCategoryID',
            'position' => 'Sort'
        );
        $Ex->ExportTable('Category', "select * from :_forums", $Category_Map);

        // Discussion.
        $DescriptionSQL = 'p.post';
        $HasTopicDescription = ($Ex->Exists('topics', array('description')) === true);
        if ($HasTopicDescription || $Ex->Exists('posts', array('description')) === true) {
            $Description = ($HasTopicDescription) ? 't.description' : 'p.description';
            $DescriptionSQL = "case
            when $Description <> '' and p.post is not null then concat('<div class=\"IPBDescription\">', $Description, '</div>', p.post)
            when $Description <> '' then $Description
            else p.post
         end";
        }
        $Discussion_Map = array(
            'tid' => 'DiscussionID',
            'title' => 'Name',
            'description' => array('Column' => 'SubName', 'Type' => 'varchar(255)'),
            'forum_id' => 'CategoryID',
            'starter_id' => 'InsertUserID',
            'start_date' => array('Column' => 'DateInserted', 'Filter' => 'TimestampToDate'),
            'ip_address' => 'InsertIPAddress',
            'edit_time' => array('Column' => 'DateUpdated', 'Filter' => 'TimestampToDate'),
//          'last_post' => array('Column' => 'DateLastPost', 'Filter' => array($Ex, 'TimestampToDate')),
            'posts' => 'CountComments',
            'views' => 'CountViews',
            'pinned' => 'Announce',
            'post' => 'Body',
            'closed' => 'Closed'
        );
        $Sql = "
      select
         t.*,
         $DescriptionSQL as post,
         case when t.state = 'closed' then 1 else 0 end as closed,
         'BBCode' as Format,
         p.ip_address,
         p.edit_time
      from :_topics t
      left join :_posts p
         on t.topic_firstpost = p.pid
      where t.tid between {from} and {to}";
        $this->ClearFilters('topics', $Discussion_Map, $Sql, 't');
        $Ex->ExportTable('Discussion', $Sql, $Discussion_Map);

        // Tags
        $Ex->Query("DROP TABLE IF EXISTS `z_tag` ");
        $Ex->Query("CREATE TABLE `z_tag` (
         `TagID` int(11) unsigned NOT NULL AUTO_INCREMENT,
         `FullName` varchar(50) DEFAULT NULL,
         PRIMARY KEY (`TagID`),
         UNIQUE KEY `FullName` (`FullName`)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8;");
        $Ex->Query("insert into z_tag (FullName) (select distinct t.tag_text as FullName from ibf_core_tags t)");

        $TagDiscussion_Map = array(
            'tag_added' => array('Column' => 'DateInserted', 'Filter' => 'TimestampToDate'),
        );
        $Sql = "select TagID, '0' as CategoryID, tag_meta_id as DiscussionID, t.tag_added
        from :_core_tags t
        left join z_tag zt on t.tag_text = zt.FullName";
        $Ex->ExportTable('TagDiscussion', $Sql, $TagDiscussion_Map);

        $Tag_Map = array(
            'FullName' => 'FullName',
            'FullNameToName' => array('Column' => 'Name', 'Filter' => 'FormatUrl')
        );
        $Sql = "select TagID, FullName, FullName as FullNameToName
        from z_tag zt";
        $Ex->ExportTable('Tag', $Sql, $Tag_Map);

        // Comments.
        $Comment_Map = array(
            'pid' => 'CommentID',
            'topic_id' => 'DiscussionID',
            'author_id' => 'InsertUserID',
            'ip_address' => 'InsertIPAddress',
            'post_date' => array('Column' => 'DateInserted', 'Filter' => 'TimestampToDate'),
            'edit_time' => array('Column' => 'DateUpdated', 'Filter' => 'TimestampToDate'),
            'post' => 'Body'
        );
        $Sql = "
      select
         p.*,
         'BBCode' as Format
      from :_posts p
      join :_topics t
         on p.topic_id = t.tid
      where p.pid between {from} and {to}
         and p.pid <> t.topic_firstpost";
        $this->ClearFilters('Comment', $Comment_Map, $Sql, 'p');
        $Ex->ExportTable('Comment', $Sql, $Comment_Map);

        // Media.
        $Media_Map = array(
            'attach_id' => 'MediaID',
            'atype_mimetype' => 'Type',
            'attach_file' => 'Name',
            'attach_path' => 'Path',
            'attach_date' => array('Column' => 'DateInserted', 'Filter' => 'TimestampToDate'),
            'attach_member_id' => 'InsertUserID',
            'attach_filesize' => 'Size',
            'ForeignID' => 'ForeignID',
            'ForeignTable' => 'ForeignTable',
            'StorageMethod' => 'StorageMethod',
            'img_width' => 'ImageWidth',
            'img_height' => 'ImageHeight'
        );
        $Sql = "select
   a.*,
   concat('~cf/ipb/', a.attach_location) as attach_path,
   ty.atype_mimetype,
   case when p.pid = t.topic_firstpost then 'discussion' else 'comment' end as ForeignTable,
   case when p.pid = t.topic_firstpost then t.tid else p.pid end as ForeignID,
   case a.attach_img_width when 0 then a.attach_thumb_width else a.attach_img_width end as img_width,
   case a.attach_img_height when 0 then a.attach_thumb_height else a.attach_img_height end as img_height,
   'local' as StorageMethod
from :_attachments a
join :_posts p
   on a.attach_rel_id = p.pid and a.attach_rel_module = 'post'
join :_topics t
   on t.tid = p.topic_id
left join :_attachments_type ty
   on a.attach_ext = ty.atype_extension";
        $this->ClearFilters('Media', $Media_Map, $Sql);
        $Ex->ExportTable('Media', $Sql, $Media_Map);

        if ($Ex->Exists('message_topic_user_map')) {
            $this->_ExportConversationsV3();
        } else {
            $this->_ExportConversationsV2();
        }

        $Ex->EndExport();
    }

    protected function _ExportConversationsV2() {
        $Ex = $this->Ex;

        $Sql = <<<EOT
create table tmp_to (
   id int,
   userid int,
   primary key (id, userid)
);

truncate table tmp_to;

insert ignore tmp_to (
   id,
   userid
)
select
   mt_id,
   mt_from_id
from :_message_topics;

insert ignore tmp_to (
   id,
   userid
)
select
   mt_id,
   mt_to_id
from :_message_topics;

create table tmp_to2 (
   id int primary key,
   userids varchar(255)
);
truncate table tmp_to2;

insert tmp_to2 (
   id,
   userids
)
select
   id,
   group_concat(userid order by userid)
from tmp_to
group by id;

create table tmp_conversation (
   id int primary key,
   title varchar(255),
   title2 varchar(255),
   userids varchar(255),
   groupid int
);

replace tmp_conversation (
   id,
   title,
   title2,
   userids
)
select
   mt_id,
   mt_title,
   mt_title,
   t2.userids
from :_message_topics t
join tmp_to2 t2
   on t.mt_id = t2.id;

update tmp_conversation
set title2 = trim(right(title2, length(title2) - 3))
where title2 like 'Re:%';

update tmp_conversation
set title2 = trim(right(title2, length(title2) - 5))
where title2 like 'Sent:%';

update tmp_conversation
set title2 = trim(right(title2, length(title2) - 3))
where title2 like 'Re:%';

update tmp_conversation
set title2 = trim(right(title2, length(title2) - 5))
where title2 like 'Sent:%';

update tmp_conversation
set title2 = trim(right(title2, length(title2) - 3))
where title2 like 'Re:%';

update tmp_conversation
set title2 = trim(right(title2, length(title2) - 5))
where title2 like 'Sent:%';

update tmp_conversation
set title2 = trim(right(title2, length(title2) - 3))
where title2 like 'Re:%';

update tmp_conversation
set title2 = trim(right(title2, length(title2) - 5))
where title2 like 'Sent:%';

update tmp_conversation
set title2 = trim(right(title2, length(title2) - 3))
where title2 like 'Re:%';

update tmp_conversation
set title2 = trim(right(title2, length(title2) - 5))
where title2 like 'Sent:%';

create table tmp_group (
   title2 varchar(255),
   userids varchar(255),
   groupid int,
   primary key (title2, userids)
);

replace tmp_group (
   title2,
   userids,
   groupid
)
select
   title2,
   userids,
   min(id)
from tmp_conversation
group by title2, userids;

create index tidx_group on tmp_group(title2, userids);
create index tidx_conversation on tmp_conversation(title2, userids);

update tmp_conversation c
join tmp_group g
   on c.title2 = g.title2 and c.userids = g.userids
set c.groupid = g.groupid;
EOT;

        $Ex->QueryN($Sql);

        // Conversations.
        $Conversation_Map = array(
            'groupid' => 'ConversationID',
            'title2' => 'Subject',
            'mt_date' => array('Column' => 'DateInserted', 'Filter' => 'TimestampToDate'),
            'mt_from_id' => 'InsertUserID'
        );
        $Sql = "select
   mt.*,
   tc.title2,
   tc.groupid
from :_message_topics mt
join tmp_conversation tc
   on mt.mt_id = tc.id";
        $this->ClearFilters('Conversation', $Conversation_Map, $Sql);
        $Ex->ExportTable('Conversation', $Sql, $Conversation_Map);

        // Conversation Message.
        $ConversationMessage_Map = array(
            'msg_id' => 'MessageID',
            'groupid' => 'ConversationID',
            'msg_date' => array('Column' => 'DateInserted', 'Filter' => 'TimestampToDate'),
            'msg_post' => 'Body',
            'Format' => 'Format',
            'msg_author_id' => 'InsertUserID',
            'msg_ip_address' => 'InsertIPAddress'
        );
        $Sql = "select
   tx.*,
   tc.title2,
   tc.groupid,
   'IPB' as Format
from :_message_text tx
join :_message_topics mt
   on mt.mt_msg_id = tx.msg_id
join tmp_conversation tc
   on mt.mt_id = tc.id";
        $this->ClearFilters('ConversationMessage', $ConversationMessage_Map, $Sql);
        $Ex->ExportTable('ConversationMessage', $Sql, $ConversationMessage_Map);

        // User Conversation.
        $UserConversation_Map = array(
            'userid' => 'UserID',
            'groupid' => 'ConversationID'
        );
        $Sql = "select distinct
   g.groupid,
   t.userid
from tmp_to t
join tmp_group g
   on g.groupid = t.id";
        $Ex->ExportTable('UserConversation', $Sql, $UserConversation_Map);

        $Ex->QueryN("
      drop table tmp_conversation;
drop table tmp_to;
drop table tmp_to2;
drop table tmp_group;");
    }


    protected function _ExportConversationsV3() {
        $Ex = $this->Ex;

        // Conversations.
        $Conversation_Map = array(
            'mt_id' => 'ConversationID',
            'mt_date' => array('Column' => 'DateInserted', 'Filter' => 'TimestampToDate'),
            'mt_title' => 'Subject',
            'mt_starter_id' => 'InsertUserID'
        );
        $Sql = "select * from :_message_topics where mt_is_deleted = 0";
        $this->ClearFilters('Conversation', $Conversation_Map, $Sql);
        $Ex->ExportTable('Conversation', $Sql, $Conversation_Map);

        // Conversation Message.
        $ConversationMessage_Map = array(
            'msg_id' => 'MessageID',
            'msg_topic_id' => 'ConversationID',
            'msg_date' => array('Column' => 'DateInserted', 'Filter' => 'TimestampToDate'),
            'msg_post' => 'Body',
            'Format' => 'Format',
            'msg_author_id' => 'InsertUserID',
            'msg_ip_address' => 'InsertIPAddress'
        );
        $Sql = "select
            m.*,
            'IPB' as Format
         from :_message_posts m";
        $this->ClearFilters('ConversationMessage', $ConversationMessage_Map, $Sql);
        $Ex->ExportTable('ConversationMessage', $Sql, $ConversationMessage_Map);

        // User Conversation.
        $UserConversation_Map = array(
            'map_user_id' => 'UserID',
            'map_topic_id' => 'ConversationID',
            'Deleted' => 'Deleted'
        );
        $Sql = "select
         t.*,
         !map_user_active as Deleted
      from :_message_topic_user_map t";
        $Ex->ExportTable('UserConversation', $Sql, $UserConversation_Map);
    }

    public function ClearFilters($Table, &$Map, &$Sql) {
        $PK = false;
        $Selects = array();

        foreach ($Map as $Column => $Info) {
            if (!$PK) {
                $PK = $Column;
            }

            if (!is_array($Info) || !isset($Info['Filter'])) {
                continue;
            }


            $Filter = $Info['Filter'];
            if (isset($Info['SourceColumn'])) {
                $Source = $Info['SourceColumn'];
            } else {
                $Source = $Column;
            }

            if (!is_array($Filter)) {
                switch ($Filter) {
                    case 'HTMLDecoder':
                        $this->Ex->HTMLDecoderDb($Table, $Column, $PK);
                        unset($Map[$Column]['Filter']);
                        break;
                    case 'TimestampToDate':
                        $Selects[] = "from_unixtime($Source) as {$Column}_Date";

                        unset($Map[$Column]);
                        $Map[$Column . '_Date'] = $Info['Column'];
                        break;
                }
            }
        }

        if (count($Selects) > 0) {
            $Statement = implode(', ', $Selects);
            $Sql = str_replace('from ', ", $Statement\nfrom ", $Sql);
        }
    }
}

?>
<?php
/**
 * jforum exporter tool.
 *
 * @copyright Vanilla Forums Inc. 2010-2014
 * @license GNU GPL2
 * @package VanillaPorter
 * @see functions.commandline.php for command line usage.
 */

// Add to the $Supported array so it appears in the dropdown menu. Uncomment next line.
$Supported['jforum'] = array('name' => 'jforum', 'prefix' => 'jforum_');
$Supported['jforum']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Avatars' => 1,
    'PrivateMessages' => 1,
    'Bookmarks' => 1,
    'Signatures' => 1,

);

class Jforum extends ExportController {
    /**
     * You can use this to require certain tables and columns be present.
     *
     * This can be useful for verifying data integrity. Don't specify more columns
     * than your porter actually requires to avoid forwards-compatibility issues.
     *
     * @var array Required tables => columns
     */
    protected $SourceTables = array(
        'forums' => array(), // This just requires the 'forum' table without caring about columns.
        'posts' => array(),
        'posts_text' => array(),
        'topics' => array(),
        'users' => array('user_id', 'username', 'user_email'), // Require specific cols on 'users'
    );

    /**
     * Main export process.
     *
     * @param ExportModel $Ex
     * @see $_Structures in ExportModel for allowed destination tables & columns.
     */
    public function ForumExport($Ex) {
        // Get the characterset for the comments.
        // Usually the comments table is the best target for this.
        $CharacterSet = $Ex->GetCharacterSet('posts_text');
        if ($CharacterSet) {
            $Ex->CharacterSet = $CharacterSet;
        }

        // Reiterate the platform name here to be included in the porter file header.
        $Ex->BeginExport('', 'jforum');


        // User.
        $User_Map = array(
            'user_id' => 'UserID',
            'username' => 'Name',
            'user_email' => 'Email',
            'user_regdate' => 'DateInserted',
            'user_regdate2' => 'DateFirstVisit',
            'user_posts' => 'CountComments', // Approximate until counts are updated
            'user_avatar' => 'Photo',
            'deleted' => 'Deleted',
            'user_from' => 'Location',
            'user_biography' => 'About',
        );
        $Ex->ExportTable('User', "
         select u.*,
            'Reset' as HashMethod,
            user_regdate as user_regdate2
         from :_users u
         ", $User_Map);


        // Role.
        $Role_Map = array(
            'group_id' => 'RoleID',
            'group_name' => 'Name',
            'group_description' => 'Description',
        );
        $Ex->ExportTable('Role', "
         select *
         from :_groups", $Role_Map);


        // User Role.
        $UserRole_Map = array(
            'user_id' => 'UserID',
            'group_id' => 'RoleID',
        );
        $Ex->ExportTable('UserRole', "
         select u.*
         from :_user_groups u", $UserRole_Map);


        // UserMeta.
        $Ex->ExportTable('UserMeta', "
         select user_id as UserID,
            'Profile.Website' as `Name`,
            user_website as `Value`
         from :_users
         where user_website is not null

         union

         select user_id, 'Plugins.Signatures.Sig', user_sig
         from :_users where user_sig is not null

         union

         select user_id, 'Plugins.Signatures.Format', 'BBCode'
         from :_users where user_sig is not null

         union

         select user_id, 'Profile.Occupation', user_occ
         from :_users where user_occ is not null

         union

         select user_id, 'Profile.Interests', user_interests
         from :_users where user_interests is not null
      ");


        // Category.
        // _categories is tier 1, _forum is tier 2.
        // Overlapping IDs, so fast-forward _categories by 1000.
        $Category_Map = array();
        $Ex->ExportTable('Category', "
         select
            c.categories_id+1000 as CategoryID,
            -1 as ParentCategoryID,
            c.title as Name,
            null as Description,
            1 as Depth,
            c.display_order as Sort
         from :_categories c

         union

         select
            f.forum_id as CategoryID,
            categories_id+1000 as ParentCategoryID,
            forum_name as Name,
            forum_desc as Description,
            2 as Depth,
            null as Sort
         from :_forums f
         ", $Category_Map);


        // Discussion.
        $Discussion_Map = array(
            'topic_id' => 'DiscussionID',
            'forum_id' => 'CategoryID',
            'user_id' => 'InsertUserID',
            'topic_time' => 'DateInserted',
            'topic_title' => array('Column' => 'Name', 'Filter' => 'HTMLDecoder'),
            'topic_views' => 'CountViews',
            'topic_replies' => 'CountComments',
            'topic_status' => 'Closed',
            'topic_type' => 'Announce',
            'post_text' => 'Body',
        );
        // It's easier to convert between Unix time and MySQL datestamps during the db query.
        $Ex->ExportTable('Discussion', "
         select *,
            t.forum_id as forum_id,
            if(t.topic_type>0,1,0) as topic_type,
            'BBCode' as Format
         from :_topics t
         left join :_posts_text p
            on t.topic_first_post_id = p.post_id", $Discussion_Map);


        // Comment.
        $Comment_Map = array(
            'post_id' => 'CommentID',
            'topic_id' => 'DiscussionID',
            'user_id' => 'InsertUserID',
            'poster_ip' => 'InsertIPAddress',
            'post_text' => 'Body',
            'post_time' => 'DateInserted',
            'post_edit_time' => 'DateUpdated',
        );
        $Ex->ExportTable('Comment', "
         select p.*, t.post_text, 'BBCode' as Format
         from :_posts p
         left join :_posts_text t
            on p.post_id = t.post_id
         where p.post_id not in (select topic_first_post_id from :_topics)", $Comment_Map);


        // UserDiscussion.
        // Guessing table is called "_watch" because they are all bookmarks.
        $UserDiscussion_Map = array(
            'topic_id' => 'DiscussionID',
            'user_id' => 'UserID',
        );
        $Ex->ExportTable('UserDiscussion', "
         select *,
            1 as Bookmarked,
            if(is_read,NOW(),null) as DateLastViewed
         from :_topics_watch w", $UserDiscussion_Map);


        // Conversation.
        // Thread using tmp table based on the pair of users talking.
        $Ex->Query('drop table if exists z_conversation;');
        $Ex->Query('create table z_conversation (
        ConversationID int unsigned NOT NULL AUTO_INCREMENT,
        LowUserID int unsigned,
        HighUserID int unsigned,
        PRIMARY KEY (ConversationID)
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;');
        $Ex->Query('insert into z_conversation (LowUserID, HighUserID)
         select least(privmsgs_from_userid, privmsgs_to_userid),
            greatest(privmsgs_from_userid, privmsgs_to_userid)
         from :_privmsgs
         group by least(privmsgs_from_userid, privmsgs_to_userid),
            greatest(privmsgs_from_userid, privmsgs_to_userid)');
        // Replying on /dba/counts to rebuild most of this data later.
        $Conversation_Map = array(
            'privmsgs_from_userid' => 'InsertUserID',
            'privmsgs_date' => 'DateInserted',
            'privmsgs_subject' => 'Subject',
        );
        $Ex->ExportTable('Conversation', "
         select p.*, c.ConversationID
         from :_privmsgs p
         left join z_conversation c on c.HighUserID = greatest(p.privmsgs_from_userid, p.privmsgs_to_userid)
            and c.LowUserID = least(p.privmsgs_from_userid, p.privmsgs_to_userid)
         group by least(privmsgs_from_userid, privmsgs_to_userid),
            greatest(privmsgs_from_userid, privmsgs_to_userid)", $Conversation_Map);


        // Conversation Message.
        // Messages with the same timestamps are sent/received copies.
        // Yes that'd probably break down on huge sites but it's too convenient to pass up for now.
        $Message_Map = array(
            'privmsgs_id' => 'MessageID',
            'privmsgs_from_userid' => 'InsertUserID',
            'privmsgs_date' => 'DateInserted',
            //'privmsgs_subject' => 'Subject',
            'privmsgs_text' => 'Body',
        );
        $Ex->ExportTable('ConversationMessage', "
         select *, c.ConversationID, 'BBCode' as Format
         from :_privmsgs p
         left join :_privmsgs_text t on t.privmsgs_id = p.privmsgs_id
         left join z_conversation c on c.LowUserID = least(privmsgs_from_userid, privmsgs_to_userid)
            and c.HighUserID = greatest(privmsgs_from_userid, privmsgs_to_userid)
         group by privmsgs_date", $Message_Map);


        // UserConversation
        $Ex->ExportTable('UserConversation', "
         select ConversationID, LowUserID as UserID, NOW() as DateLastViewed from z_conversation
         union
         select ConversationID, HighUserID as UserID, NOW() as DateLastViewed from z_conversation
         ");
        // Needs afterward: update GDN_UserConversation set CountReadMessages = (select count(MessageID) from GDN_ConversationMessage where GDN_ConversationMessage.ConversationID = GDN_UserConversation.ConversationID)


        $Ex->EndExport();
    }
}

?>
<?php
/**
 * Joomla Kunena exporter tool
 *
 * @copyright Vanilla Forums Inc. 2010
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$Supported['kunena'] = array('name' => 'Joomla Kunena', 'prefix' => 'jos_');
$Supported['kunena']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Avatars' => 1,
    'Attachments' => 1,
    'Bookmarks' => 1,
    'Passwords' => 1,
);

class Kunena extends ExportController {
    /**
     * @param ExportModel $Ex
     */
    public function ForumExport($Ex) {
        $Ex->DestPrefix = 'jos';

        $Ex->BeginExport('', 'Joomla Kunena', array('HashMethod' => 'joomla'));

        // User.
        $User_Map = array(
            'id' => 'UserID',
            'name' => 'Name',
            'email' => 'Email',
            'registerDate' => 'DateInserted',
            'lastvisitDate' => 'DateLastActive',
            'password' => 'Password',
            'showemail' => 'ShowEmail',
            'birthdate' => 'DateOfBirth',
            'banned' => 'Banned',
//         'DELETED'=>'Deleted',
            'admin' => array('Column' => 'Admin', 'Type' => 'tinyint(1)'),
            'Photo' => 'Photo'
        );
        $Ex->ExportTable('User', "
         SELECT
            u.*,
            case when ku.avatar <> '' then concat('kunena/avatars/', ku.avatar) else null end as `Photo`,
            case u.usertype when 'superadministrator' then 1 else 0 end as admin,
            coalesce(ku.banned, 0) as banned,
            ku.birthdate,
            !ku.hideemail as showemail
         FROM :_users u
         left join :_kunena_users ku
            on ku.userid = u.id", $User_Map);

        // Role.
        $Role_Map = array(
            'rank_id' => 'RoleID',
            'rank_title' => 'Name',
        );
        $Ex->ExportTable('Role', "select * from :_kunena_ranks", $Role_Map);

        // UserRole.
        $UserRole_Map = array(
            'id' => 'UserID',
            'rank' => 'RoleID'
        );
        $Ex->ExportTable('UserRole', "
         select *
         from :_users u", $UserRole_Map);

        // Permission.
//      $Ex->ExportTable('Permission',
//      "select 2 as RoleID, 'View' as _Permissions
//      union
//      select 3 as RoleID, 'View' as _Permissions
//      union
//      select 16 as RoleID, 'All' as _Permissions", array('_Permissions' => array('Column' => '_Permissions', 'Type' => 'varchar(20)')));

        // Category.
        $Category_Map = array(
            'id' => 'CategoryID',
            'parent' => 'ParentCategoryID',
            'name' => 'Name',
            'ordering' => 'Sort',
            'description' => 'Description',

        );
        $Ex->ExportTable('Category', "
         select * from :_kunena_categories", $Category_Map);

        // Discussion.
        $Discussion_Map = array(
            'id' => 'DiscussionID',
            'catid' => 'CategoryID',
            'userid' => 'InsertUserID',
            'subject' => array('Column' => 'Name', 'Filter' => 'HTMLDecoder'),
            'time' => array('Column' => 'DateInserted', 'Filter' => 'TimestampToDate'),
            'ip' => 'InsertIPAddress',
            'locked' => 'Closed',
            'hits' => 'CountViews',
            'modified_by' => 'UpdateUserID',
            'modified_time' => array('Column' => 'DateUpdated', 'Filter' => 'TimestampToDate'),
            'message' => 'Body',
            'Format' => 'Format'
        );
        $Ex->ExportTable('Discussion', "
         select
            t.*,
            txt.message,
            'BBCode' as Format
         from :_kunena_messages t
         left join :_kunena_messages_text txt
            on t.id = txt.mesid
         where t.thread = t.id", $Discussion_Map);

        // Comment.
        $Comment_Map = array(
            'id' => 'CommentID',
            'thread' => 'DiscussionID',
            'userid' => 'InsertUserID',
            'time' => array('Column' => 'DateInserted', 'Filter' => 'TimestampToDate'),
            'ip' => 'InsertIPAddress',
            'modified_by' => 'UpdateUserID',
            'modified_time' => array('Column' => 'DateUpdated', 'Filter' => 'TimestampToDate'),
            'message' => 'Body',
            'Format' => 'Format'
        );
        $Ex->ExportTable('Comment', "
         select
            t.*,
            txt.message,
            'BBCode' as Format
         from :_kunena_messages t
         left join :_kunena_messages_text txt
            on t.id = txt.mesid
         where t.thread <> t.id", $Comment_Map);

        // UserDiscussion.
        $UserDiscussion_Map = array(
            'thread' => 'DiscussionID',
            'userid' => 'UserID'
        );
        $Ex->ExportTable('UserDiscussion', "
         select t.*, 1 as Bookmarked
         from :_kunena_subscriptions t", $UserDiscussion_Map);

        // Media.
        $Media_Map = array(
            'id' => 'MediaID',
            'mesid' => 'ForeignID',
            'userid' => 'InsertUserID',
            'size' => 'Size',
            'path2' => array('Column' => 'Path', 'Filter' => 'UrlDecode'),
            'filetype' => 'Type',
            'filename' => array('Column' => 'Name', 'Filter' => 'UrlDecode'),
            'time' => array('Column' => 'DateInserted', 'Filter' => 'TimestampToDate'),
        );
        $Ex->ExportTable('Media', "
         select
            a.*,
            concat(a.folder, '/', a.filename) as path2,
            'local' as StorageMethod,
            case when m.id = m.thread then 'discussion' else 'comment' end as ForeignTable,
            m.time
         from :_kunena_attachments a
         join :_kunena_messages m
            on m.id = a.mesid", $Media_Map);

        $Ex->EndExport();
    }
}

?>
<?php
/**
 * MBOX exporter tool.
 *
 * Got a small listserv? Get 'er in mbox format and follow these instructions to turn it into a forum.
 *    This will currently load your entire history into memory so it's not for doing huge lists at once.
 *    You will need high resource limits for your server config.
 * Install Thunderbird & extension ImportExportTools
 *    https://www.google.com/url?q=https%3A%2F%2Faddons.mozilla.org%2Fen-us%2Fthunderbird%2Faddon%2Fimportexporttools%2F&sa=D&sntz=1&usg=AFQjCNEw-oR9Y4Y_DEvD1qF_7TNcS1_v1w
 * Set the max size on all fields to 255 (in the addon’s preferences)
 * Reading an mbox file with Thunderbird:
 *    https://www.google.com/url?q=https%3A%2F%2Fcommons.lbl.gov%2Fdisplay%2F~jwelcher%40lbl.gov%2FReading%2Ban%2Bmbox%2Bfile%2Bwith%2BThunderbird&sa=D&sntz=1&usg=AFQjCNGs5UFFhrHvGPbfwOZUdeVjmu_XAQ
 * Right click each mbox -> ImportExportTools -> "Export all messages in this folder" -> "Spreadsheet (CSV)".
 *    Watch status bar at bottom of Thunderbird for progress.
 * Import settings: Escape is “ (double quote) ONLY
 * Import all CSVs to 1 table named ‘mbox’ with text fields:
 *    Subject, Sender, Body, Date, Folder (manually set to name of each mbox)
 *
 * @copyright Vanilla Forums 2013
 * @author Lincoln Russell lincolnwebs.com
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$Supported['mbox'] = array('name' => '.mbox files', 'prefix' => '');
$Supported['mbox']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
);

class Mbox extends ExportController {

    /** @var array Required tables => columns */
    protected $SourceTables = array(
        'mbox' => array('Subject', 'Sender', 'Date', 'Body', 'Folder')
    );

    /**
     * Forum-specific export format.
     * @param ExportModel $Ex
     */
    protected function ForumExport($Ex) {
        // Begin
        $Ex->BeginExport('', 'Mbox', array());


        // Temporary user table
        $Ex->Query('create table :_mbox_user (UserID int AUTO_INCREMENT, Name varchar(255), Email varchar(255), PRIMARY KEY (UserID))');
        $Result = $Ex->Query('select Sender from :_mbox group by Sender', true);

        // Users, pt 1: Build ref array; Parse name & email out - strip quotes, <, >
        $Users = array();
        while ($Row = mysql_fetch_assoc($Result)) {
            // Most senders are "Name <Email>"
            $NameParts = explode('<', trim($Row['Sender'], '"'));
            // Sometimes the sender is just <email>
            if ($NameParts[0] == '') {
                $Name = trim(str_replace('>', '', $NameParts[1]));
            } else // Normal?
            {
                $Name = trim(str_replace('\\', '', $NameParts[0]));
            }
            if (strstr($Name, '@') !== false) {
                // Only wound up with an email
                $Name = explode('@', $Name);
                $Name = $Name[0];
            }
            $Email = $this->ParseEmail($Row['Sender']);

            // Compile by unique email
            $Users[$Email] = $Name;
        }

        // Users, pt 2: loop thru unique emails
        foreach ($Users as $Email => $Name) {
            $Ex->Query('insert into :_mbox_user (Name, Email)
            values ("' . mysql_real_escape_string($Name) . '", "' . mysql_real_escape_string($Email) . '")');
            $UserID = mysql_insert_id();
            // Overwrite user list with new UserID instead of name
            $Users[$Email] = $UserID;
        }


        // Temporary category table
        $Ex->Query('create table :_mbox_category (CategoryID int AUTO_INCREMENT, Name varchar(255),
         PRIMARY KEY (CategoryID))');
        $Result = $Ex->Query('select Folder from :_mbox group by Folder', true);
        // Parse name out & build ref array
        $Categories = array();
        while ($Row = mysql_fetch_assoc($Result)) {
            $Ex->Query('insert into :_mbox_category (Name)
            values ("' . mysql_real_escape_string($Row["Folder"]) . '")');
            $CategoryID = mysql_insert_id();
            $Categories[$Row["Folder"]] = $CategoryID;
        }


        // Temporary post table
        $Ex->Query('create table :_mbox_post (PostID int AUTO_INCREMENT, DiscussionID int,
         IsDiscussion tinyint default 0, InsertUserID int, Name varchar(255), Body text, DateInserted datetime,
         CategoryID int, PRIMARY KEY (PostID))');
        $Result = $Ex->Query('select * from :_mbox', true);
        // Parse name, body, date, userid, categoryid
        while ($Row = mysql_fetch_assoc($Result)) {
            // Assemble posts into a format we can actually export.
            // Subject: trim quotes, 're: ', 'fwd: ', 'fw: ', [category]
            $Name = trim(preg_replace('#^(re:)|(fwd?:) #i', '', trim($Row['Subject'], '"')));
            $Name = trim(preg_replace('#^\[[0-9a-zA-Z_-]*] #', '', $Name));
            $Email = $this->ParseEmail($Row['Sender']);
            $UserID = (isset($Users[$Email])) ? $Users[$Email] : 0;
            $Ex->Query('insert into :_mbox_post (Name, InsertUserID, CategoryID, DateInserted, Body)
            values ("' . mysql_real_escape_string($Name) . '",
               ' . $UserID . ',
               ' . $Categories[$Row['Folder']] . ',
               from_unixtime(' . strtotime($Row['Date']) . '),
               "' . mysql_real_escape_string($this->ParseBody($Row['Body'])) . '")');
        }

        // Decide which posts are OPs
        $Result = $Ex->Query('select PostID from (select * from :_mbox_post order by DateInserted asc) x group by Name',
            true);
        $Discussions = array();
        while ($Row = mysql_fetch_assoc($Result)) {
            $Discussions[] = $Row['PostID'];
        }
        $Ex->Query('update :_mbox_post set IsDiscussion = 1 where PostID in (' . implode(",", $Discussions) . ')');

        // Thread the comments
        $Result = $Ex->Query('select c.PostID, d.PostID as DiscussionID from :_mbox_post c
         left join :_mbox_post d on c.Name like d.Name and d.IsDiscussion = 1
         where c.IsDiscussion = 0', true);
        while ($Row = mysql_fetch_assoc($Result)) {
            $Ex->Query('update :_mbox_post set DiscussionID = ' . $Row['DiscussionID'] . '  where PostID = ' . $Row['PostID']);
        }


        // Users
        $User_Map = array();
        $Ex->ExportTable('User', "
         select u.*,
            NOW() as DateInserted,
            'Reset' as HashMethod
         from :_mbox_user u", $User_Map);


        // Categories
        $Category_Map = array();
        $Ex->ExportTable('Category', "
      select *
      from :_mbox_category", $Category_Map);


        // Discussions
        $Discussion_Map = array(
            'PostID' => 'DiscussionID'
        );
        $Ex->ExportTable('Discussion', "
      select p.PostID, p.DateInserted, p.Name, p.Body, p.InsertUserID, p.CategoryID,
         'Html' as Format
       from :_mbox_post p where IsDiscussion = 1", $Discussion_Map);


        // Comments
        $Comment_Map = array(
            'PostID' => 'CommentID'
        );
        $Ex->ExportTable('Comment',
            "select p.*,
         'Html' as Format
       from :_mbox_post p
       where IsDiscussion = 0", $Comment_Map);


        // Remove Temporary tables
        //$Ex->Query('drop table :_mbox_post');
        //$Ex->Query('drop table :_mbox_category');
        //$Ex->Query('drop table :_mbox_user');

        // End
        $Ex->EndExport();
//      echo implode("\n\n", $Ex->Queries);
    }

    /**
     * Grab the email from the User field.
     */
    public function ParseEmail($Email) {
        $EmailBits = explode('<', $Email);
        if (!isset($EmailBits[1])) {
            return $Email;
        }

        $EmailBits = explode('>', $EmailBits[1]);

        return trim($EmailBits[0]);
    }

    /**
     * Body: strip headers, signatures, fwds.
     */
    public function ParseBody($Body) {
        $Body = preg_replace('#Subject:\s*(.*)\s*From:\s*(.*)\s*Date:\s*(.*)\s*To:\s*(.*)\s*(CC:\s*(.*)\s*)?#', '',
            $Body);
        $Body = preg_replace('#\s*From: ([a-zA-Z0-9_-]*)@(.*)#', '', $Body);
        $Body = explode("____________", $Body);
        $Body = explode("----- Original Message -----", $Body[0]);

        return trim($Body[0]);
    }
}

?>
<?php
/**
 * MyBB exporter tool.
 *
 * @copyright Vanilla Forums Inc. 2010-2014
 * @license GNU GPL2
 * @package VanillaPorter
 * @see functions.commandline.php for command line usage.
 */

$Supported['mybb'] = array('name' => 'MyBB', 'prefix' => 'mybb_');
$Supported['mybb']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Passwords' => 1,
    'Avatars' => 1,
    'Bookmarks' => 1,
);

class MyBB extends ExportController {
    /**
     * You can use this to require certain tables and columns be present.
     *
     * @var array Required tables => columns
     */
    protected $SourceTables = array(
        'forums' => array(),
        'posts' => array(),
        'threads' => array(),
        'users' => array(),
    );

    /**
     * Main export process.
     *
     * @param ExportModel $Ex
     * @see $_Structures in ExportModel for allowed destination tables & columns.
     */
    public function ForumExport($Ex) {
        // Get the characterset for the comments.
        $CharacterSet = $Ex->GetCharacterSet('posts');
        if ($CharacterSet) {
            $Ex->CharacterSet = $CharacterSet;
        }

        // Reiterate the platform name here to be included in the porter file header.
        $Ex->BeginExport('', 'MyBB');

        // User.
        $User_Map = array(
            'uid' => 'UserID',
            'username' => array('Column' => 'Name', 'Filter' => 'HTMLDecoder'),
            'avatar' => 'Photo',
            'regdate2' => 'DateInserted',
            'regdate3' => 'DateFirstVisit',
            'email' => 'Email',
        );
        $Ex->ExportTable('User', "
         select u.*,
            FROM_UNIXTIME(regdate) as regdate2,
            FROM_UNIXTIME(regdate) as regdate3,
            FROM_UNIXTIME(lastactive) as DateLastActive,
            concat(password, salt) as Password,
            'mybb' as HashMethod
         from :_users u
         ", $User_Map);

        // Role.
        $Role_Map = array(
            'gid' => 'RoleID',
            'title' => 'Name',
            'description' => 'Description',
        );
        $Ex->ExportTable('Role', "
         select *
         from :_usergroups", $Role_Map);

        // User Role.
        $UserRole_Map = array(
            'uid' => 'UserID',
            'usergroup' => 'RoleID',
        );
        $Ex->ExportTable('UserRole', "
         select u.uid, u.usergroup
         from :_users u", $UserRole_Map);

        // Category.
        $Category_Map = array(
            'fid' => 'CategoryID',
            'pid' => 'ParentCategoryID',
            'disporder' => 'Sort',
            'name' => 'Name',
            'description' => 'Description',
        );
        $Ex->ExportTable('Category', "
         select *
         from :_forums f
         ", $Category_Map);

        // Discussion.
        $Discussion_Map = array(
            'tid' => 'DiscussionID',
            'fid' => 'CategoryID',
            'uid' => 'InsertUserID',
            'subject' => array('Column' => 'Name', 'Filter' => 'HTMLDecoder'),
            'views' => 'CountViews',
            'replies' => 'CountComments',
        );
        $Ex->ExportTable('Discussion', "
         select *,
            FROM_UNIXTIME(dateline) as DateInserted,
            'BBCode' as Format
         from :_threads t", $Discussion_Map);

        // Comment.
        $Comment_Map = array(
            'pid' => 'CommentID',
            'tid' => 'DiscussionID',
            'uid' => 'InsertUserID',
            'message' => array('Column' => 'Body'),
        );
        $Ex->ExportTable('Comment', "
         select p.*,
            FROM_UNIXTIME(dateline) as DateInserted,
            'BBCode' as Format
         from :_posts p", $Comment_Map);

        // UserDiscussion.
        $UserDiscussion_Map = array(
            'tid' => 'DiscussionID',
            'uid' => 'UserID',
        );
        $Ex->ExportTable('UserDiscussion', "
         select *,
            1 as Bookmarked
         from :_threadsubscriptions t", $UserDiscussion_Map);

        $Ex->EndExport();
    }
}

?>
<?php
/**
 * NodeBB exporter tool
 *
 * @copyright Vanilla Forums Inc. 2010
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$Supported['nodebb'] = array('name' => 'NodeBB 0.*', 'prefix' => 'gdn_');
$Supported['nodebb']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Avatars' => 1,
    'PrivateMessages' => 1,
    'UserWall' => 1,
    'UserNotes' => 1,
    'Bookmarks' => 1,
    'Signatures' => 1,
    'Passwords' => 1,
    'Reactions' => 1
);

class Nodebb extends ExportController {

    /**
     * @param ExportModel $Ex
     */
    protected function ForumExport($Ex) {


        $Ex->BeginExport('', 'NodeBB 0.*', array('HashMethod' => 'Vanilla'));

        // Users
        $User_Map = array(
            'uid' => 'UserID',
            'username' => 'Name',
            'password' => 'Password',
            'email' => 'Email',
            'confirmed' => 'Confirmed',
            'showemail' => 'ShowEmail',
            'joindate' => array('Column' => 'DateInserted', 'Filter' => array($this, 'tsToDate')),
            'lastonline' => array('Column' => 'DateLastActive', 'Filter' => array($this, 'tsToDate')),
            'lastposttime' => array('Column' => 'DateUpdated', 'Filter' => array($this, 'tsToDate')),
            'banned' => 'Banned',
            'admin' => 'Admin',
            'hm' => 'HashMethod'
        );

        $Ex->ExportTable('User', "

             select uid, username, password, email, `email:confirmed` as confirmed, showemail, joindate, lastonline, lastposttime, banned, 0 as admin, 'crypt' as hm
             from :_user

             ", $User_Map);

        //Roles
        $Role_Map = array(
            '_num' => 'RoleID',
            '_key' => array('Column' => 'Name', 'Filter' => array($this, 'roleNameFromKey')),
            'description' => 'Description'
        );

        $Ex->ExportTable('Role', "

            select gm._key as _key, gm._num as _num, g.description as description
            from :_group_members gm left join :_group g
            on gm._key like concat(g._key, '%')

            ", $Role_Map);

        $UserRole_Map = array(
            'id' => 'RoleID',
            'members' => 'UserID'
        );

        $Ex->ExportTable('UserRole', "

            select *, g._num as id
            from :_group_members g join :_group_members__members m
            on g._id = m._parentid

        ", $UserRole_Map);

        // Signatutes.
        $UserMeta_Map = array(
            'uid' => 'UserID',
            'name' => 'Name',
            'signature' => 'Value'
        );

        $Ex->ExportTable('UserMeta', "

            select uid, 'Plugin.Signatures.Sig' as name, signature
            from :_user
            where length(signature) > 1

            union

            select uid, 'Plugin.Signatures.Format', 'Markdown'
            from :_user
            where length(signature) > 1

            union

            select uid, 'Profile.Website' as name, website
            from :_user
            where length(website) > 7

            union

            select uid, 'Profile.Location' as name, location
            from :_user
            where length(location) > 1

        ", $UserMeta_Map);

        // Categories
        $Category_Map = array(
            'cid' => 'CategoryID',
            'name' => array('Column' => 'Name', 'Filter' => 'HTMLDecoder'),
            'description' => 'Description',
            'order' => 'Sort',
            'parentCid' => 'ParentCategoryID',
            'slug' => array('Column' => 'UrlCode', 'Filter' => array($this, 'removeNumId')),
            'image' => 'Photo',
            'disabled' => 'Archived'
        );

        $Ex->ExportTable('Category', "

            select *
            from :_category

        ", $Category_Map);

        if (!$Ex->IndexExists('z_idx_topic', ':_topic')) {
            $Ex->Query("create index z_idx_topic on :_topic(mainPid);");
        }
        if (!$Ex->IndexExists('z_idx_post', ':_post')) {
            $Ex->Query("create index z_idx_post on :_post(pid);");
        }
        if (!$Ex->IndexExists('z_idx_poll', ':_poll')) {
            $Ex->Query("create index z_idx_poll on :_poll(tid);");
        }

        $Ex->Query("drop table if exists z_discussionids;");
        $Ex->Query("

            create table z_discussionids (
                tid int unsigned,
                primary key(tid)
            );

        ");

        $Ex->Query("

            insert ignore z_discussionids (
                tid
            )
            select mainPid
            from :_topic
            where mainPid is not null
            and deleted != 1;

        ");

        $Ex->Query("drop table if exists z_reactiontotalsupvote;");
        $Ex->Query("

            create table z_reactiontotalsupvote (
                value varchar(50),
                total int,
                primary key (value)
            );

        ");

        $Ex->Query("drop table if exists z_reactiontotalsdownvote;");
        $Ex->Query("

            create table z_reactiontotalsdownvote (
                value varchar(50),
                total int,
                primary key (value)
            );

        ");

        $Ex->Query("drop table if exists z_reactiontotals;");
        $Ex->Query("

            create table z_reactiontotals (
              value varchar(50),
              upvote int,
              downvote int,
              primary key (value)
            );

        ");

        $Ex->Query("

            insert z_reactiontotalsupvote
            select value, count(*) as totals
            from :_uid_upvote
            group by value;

        ");

        $Ex->Query("

            insert z_reactiontotalsdownvote
            select value, count(*) as totals
            from :_uid_downvote
            group by value;

        ");

        $Ex->Query("

            insert z_reactiontotals
            select *
            from (
                select u.value, u.total as up, d.total as down
                from z_reactiontotalsupvote u
                left join z_reactiontotalsdownvote d
                on u.value = d.value

                union

                select d.value, u.total as up, d.total as down
                from z_reactiontotalsdownvote d
                left join z_reactiontotalsupvote u
                on u.value = d.value
            ) as reactions

        ");

        //Discussions
        $Discussion_Map = array(
            'tid' => 'DiscussionID',
            'cid' => 'CategoryID',
            'title' => 'Name',
            'content' => 'Body',
            'uid' => 'InsertUserID',
            'locked' => 'Closed',
            'pinned' => 'Announce',
            'timestamp' => array('Column' => 'DateInserted', 'Filter' => array($this, 'tsToDate')),
            'edited' => array('Column' => 'DateUpdated', 'Filter' => array($this, 'tsToDate')),
            'editor' => 'UpdateUserID',
            'viewcount' => 'CountViews',
            'format' => 'Format',
            'votes' => 'Score',
            'attributes' => array('Column' => 'Attributes', 'Filter' => array($this, 'serializeReactions')),
            'poll' => array('Column' => 'Type', 'Filter' => array($this, 'isPoll'))
        );

        $Ex->ExportTable('Discussion', "

            select p.tid, cid, title, content, p.uid, locked, pinned, p.timestamp, p.edited, p.editor, viewcount, votes, poll._id as poll, 'Markdown' as format, concat(ifnull(u.total, 0), ':', ifnull(d.total, 0)) as attributes
            from :_topic t
            left join :_post p
            on t.mainPid = p.pid
            left join z_reactiontotalsupvote u
            on u.value = t.mainPid
            left join z_reactiontotalsdownvote d
            on d.value = t.mainPid
            left join :_poll poll
            on p.tid = poll.tid
            where t.deleted != 1

        ", $Discussion_Map);

        $Ex->Query("drop table if exists z_comments;");
        $Ex->Query("

            create table z_comments (
                pid int,
                content text,
                uid varchar(255),
                tid varchar(255),
                timestamp double,
                edited varchar(255),
                editor varchar(255),
                votes int,
                upvote int,
                downvote int,
                primary key(pid)
            );

        ");

        $Ex->Query("

            insert ignore z_comments (
                pid,
                content,
                uid,
                tid,
                timestamp,
                edited,
                editor,
                votes
            )
            select p.pid, p.content, p.uid, p.tid, p.timestamp, p.edited, p.editor, p.votes
            from :_post p
            left join z_discussionids t
            on t.tid = p.pid
            where p.deleted != 1 and t.tid is null;

        ");

        $Ex->Query("

            update z_comments as c
            join z_reactiontotals r
            on r.value = c.pid
            set c.upvote = r.upvote, c.downvote = r.downvote;

        ");

        // Comments
        $Comment_Map = array(
            'content' => 'Body',
            'uid' => 'InsertUserID',
            'tid' => 'DiscussionID',
            'timestamp' => array('Column' => 'DateInserted', 'Filter' => array($this, 'tsToDate')),
            'edited' => array('Column' => 'DateUpdated', 'Filter' => array($this, 'tsToDate')),
            'editor' => 'UpdateUserID',
            'votes' => 'Score',
            'format' => 'Format',
            'attributes' => array('Column' => 'Attributes', 'Filter' => array($this, 'serializeReactions'))
        );

        $Ex->ExportTable('Comment', "

            select content, uid, tid, timestamp, edited, editor, votes, 'Markdown' as format, concat(ifnull(upvote, 0), ':', ifnull(downvote, 0)) as attributes
            from z_comments

        ", $Comment_Map);

        //Polls
        $Poll_Map = array(
            'pollid' => 'PollID',
            'title' => 'Name',
            'tid' => 'DiscussionID',
            'votecount' => 'CountVotes',
            'uid' => 'InsertUserID',
            'timestamp' => array('Column' => 'DateInserted', 'Filter' => array($this, 'tsToDate'))
        );

        $Ex->ExportTable('Poll', "

            select *
            from :_poll p left join :_poll_settings ps
            on ps._key like concat(p._key, ':', '%')

        ", $Poll_Map);

        $PollOption_Map = array(
            '_num' => 'PollOptionID',
            '_key' => array('Column' => 'PollID', 'Filter' => array($this, 'idFromKey')),
            'title' => 'Body',
            'sort' => 'Sort',
            'votecount' => array('Column' => 'CountVotes', 'Filter' => array($this, 'makeNullZero')),
            'format' => 'Format'
        );

        $Ex->ExportTable('PollOption', "

            select _num, _key, title, id+1 as sort, votecount, 'Html' as format
            from :_poll_options
            where title is not null

        ", $PollOption_Map);

        $PollVote_Map = array(
            'userid' => 'UserID',
            'poll_option_id' => 'PollOptionID'
        );

        $Ex->ExportTable('PollVote', "

            select povm.members as userid, po._num as poll_option_id
            from :_poll_options_votes__members povm
            left join :_poll_options_votes pov
            on povm._parentid = pov._id
            left join :_poll_options po
            on pov._key like concat(po._key, ':', '%')
            where po.title is not null

        ", $PollVote_Map);

        //Tags
        if (!$Ex->IndexExists('z_idx_topic_key', ':_topic')) {
            $Ex->Query("create index z_idx_topic_key on :_topic (_key);");
        }

        $Tag_Map = array(
            'slug' => array('Column' => 'Name', 'Filter' => array($this, 'nameToSlug')),
            'fullname' => 'FullName',
            'count' => 'CountDiscussions',
            'tagid' => 'TagID',
            'cid' => 'CategoryID',
            'type' => 'Type',
            'timestamp' => array('Column' => 'DateInserted', 'Filter' => array($this, 'tsToDate')),
            'uid' => 'InsertUserID'
        );

        $Now = time();

        $Ex->Query("set @rownr=1000;");

        $Ex->ExportTable('Tag', "

            select @rownr:=@rownr+1 as tagid, members as fullname, members as slug, '' as type, count, timestamp, uid, cid
            from (
                select members, count(*) as count, _parentid
                from :_topic_tags__members
                group by members
            ) as tags
            join :_topic_tags tt
            on tt._id = _parentid
            left join :_topic t
            on substring(tt._key, 1, length(tt._key) - 5) = t._key

        ", $Tag_Map);

        $TagDiscussion_Map = array(
            'tagid' => 'TagID',
            'tid' => 'DiscussionID',
            'cid' => 'CategoryID',
            'timestamp' => array('Column' => 'DateInserted', 'Filter' => array($this, 'tsToDate'))
        );

        $Ex->Query("set @rownr=1000;");

        $Ex->ExportTable('TagDiscussion', "

            select tagid, cid, tid, timestamp
            from :_topic_tags__members two
            join (
                select @rownr:=@rownr+1 as tagid, members as fullname, members as slug, count
                from (
                    select members, count(*) as count
                    from :_topic_tags__members
                    group by members
                ) as tags
            ) as tagids
            on two.members = tagids.fullname
            join :_topic_tags tt
            on tt._id = _parentid
            left join :_topic t
            on substring(tt._key, 1, length(tt._key) - 5) = t._key

        ", $TagDiscussion_Map);

        //Conversations
        if (!$Ex->IndexExists('z_idx_message_key', ':_message')) {
            $Ex->Query("create index z_idx_message_key on :_message(_key);");
        }
        $Ex->Query("drop table if exists z_pmto;");
        $Ex->Query("

            create table z_pmto (
                pmid int unsigned,
                userid int,
                groupid int,
                primary key(pmid, userid)
            );

        ");

        $Ex->Query("

            insert ignore z_pmto (
                pmid,
                userid
            )
            select substring_index(_key, ':', -1), fromuid
            from :_message;

        ");

        $Ex->Query("

            insert ignore z_pmto (
                pmid,
                userid
            )
            select substring_index(_key, ':', -1), touid
            from :_message;

        ");

        $Ex->Query("drop table if exists z_pmto2;");
        $Ex->Query("

            create table z_pmto2 (
                pmid int unsigned,
                userids varchar(250),
                groupid int unsigned,
                primary key (pmid)
            );

        ");

        $Ex->Query("

            replace z_pmto2 (
                pmid,
                userids
            )
            select pmid, group_concat(userid order by userid)
            from z_pmto
            group by pmid;

        ");

        $Ex->Query("drop table if exists z_pmgroup;");
        $Ex->Query("

            create table z_pmgroup (
                userids varchar(250),
                groupid varchar(255),
                firstmessageid int,
                lastmessageid int,
                countmessages int,
                primary key (userids, groupid)
            );

        ");

        $Ex->Query("

            insert z_pmgroup
            select userids, concat('message:', min(pmid)), min(pmid), max(pmid), count(*)
            from z_pmto2
            group by userids;

        ");

        $Ex->Query("

            update z_pmto2 as p
            left join z_pmgroup g
            on p.userids = g.userids
            set p.groupid = g.firstmessageid;

        ");

        $Ex->Query("

            update z_pmto as p
            left join z_pmto2 p2
            on p.pmid = p2.pmid
            set p.groupid = p2.groupid;

        ");

        $Ex->Query("create index z_idx_pmto_cid on z_pmto(groupid);");
        $Ex->Query("create index z_idx_pmgroup_cid on z_pmgroup(firstmessageid);");

        $Conversation_Map = array(
            'conversationid' => 'ConversationID',
            'firstmessageid' => 'FirstMessageID',
            'lastmessageid' => 'LastMessageID',
            'countparticipants' => 'CountParticipants',
            'countmessages' => 'CountMessages'
        );

        $Ex->ExportTable('Conversation', "

            select *, firstmessageid as conversationid, 2 as countparticipants
            from z_pmgroup
            left join :_message
            on groupid = _key;

        ", $Conversation_Map);


        $ConversationMessage_Map = array(
            'messageid' => 'MessageID',
            'conversationid' => 'ConversationID',
            'content' => 'Body',
            'format' => 'Format',
            'fromuid' => 'InsertUserID',
            'timestamp' => array('Column' => 'DateInserted', 'Filter' => array($this, 'tsToDate'))
        );

        $Ex->ExportTable('ConversationMessage', "

            select groupid as conversationid, pmid as messageid, content, 'Text' as format, fromuid, timestamp
            from z_pmto2
            left join :_message
            on concat('message:', pmid) = _key

        ", $ConversationMessage_Map);

        $UserConversationMap = array(
            'conversationid' => 'ConversationID',
            'userid' => 'UserID',
            'lastmessageid' => 'LastMessageID'
        );

        $Ex->ExportTable('UserConversation', "

            select p.groupid as conversationid, userid, lastmessageid
            from z_pmto p
            left join z_pmgroup
            on firstmessageid = p.groupid;

        ", $UserConversationMap);

        //Bookmarks (watch)
        $UserDiscussion_Map = array(
            'members' => 'UserID',
            '_key' => array('Column' => 'DiscussionID', 'Filter' => array($this, 'idFromKey')),
            'bookmarked' => 'Bookmarked'
        );

        $Ex->ExportTable('UserDiscussion', "
            select members, _key, 1 as bookmarked
            from :_tid_followers__members
            left join :_tid_followers
            on _parentid = _id
        ", $UserDiscussion_Map);

        //Reactions
        if (!$Ex->IndexExists('z_idx_topic_mainpid', ':_topic')) {
            $Ex->Query("create index z_idx_topic_mainpid on :_topic(mainPid);");
        }
        if (!$Ex->IndexExists('z_idx_uid_downvote', ':_uid_downvote')) {
            $Ex->Query("create index z_idx_uid_downvote on :_uid_downvote(value);");
        }
        if (!$Ex->IndexExists('z_idx_uid_upvote', ':_uid_upvote')) {
            $Ex->Query("create index z_idx_uid_upvote on :_uid_upvote(value);");
        }

        $UserTag_Map = array(
            'tagid' => 'TagID',
            'recordtype' => 'RecordType',
            '_key' => array('Column' => 'UserID', 'Filter' => array($this, 'idFromKey')),
            'value' => 'RecordID',
            'score' => array('Column' => 'DateInserted', 'Filter' => array($this, 'tsToDate')),
            'total' => 'Total'
        );

        $Ex->ExportTable('UserTag', "

            select 11 as tagid, 'Discussion' as recordtype, u._key, u.value, score, total
            from :_uid_upvote u
            left join z_discussionids t
            on u.value = t.tid
            left join z_reactiontotalsupvote r
            on  r.value = u.value
            where u._key != 'uid:NaN:upvote'
            and t.tid is not null

            union

            select 11 as tagid, 'Comment' as recordtype, u._key, u.value, score, total
            from :_uid_upvote u
            left join z_discussionids t
            on u.value = t.tid
            left join z_reactiontotalsupvote r
            on  r.value = u.value
            where u._key != 'uid:NaN:upvote'
            and t.tid is null

            union

            select 10 as tagid, 'Discussion' as recordtype, u._key, u.value, score, total
            from :_uid_downvote u
            left join z_discussionids t
            on u.value = t.tid
            left join z_reactiontotalsdownvote r
            on  r.value = u.value
            where u._key != 'uid:NaN:downvote'
            and t.tid is not null

            union

            select 10 as tagid, 'Comment' as recordtype, u._key, u.value, score, total
            from :_uid_downvote u
            left join z_discussionids t
            on u.value = t.tid
            left join z_reactiontotalsdownvote r
            on  r.value = u.value
            where u._key != 'uid:NaN:downvote'
            and t.tid is null

        ", $UserTag_Map);

        //TODO: Permissions

        $Ex->EndExport();

    }

    public function nameToSlug($name) {
        return $this->Url($name);
    }

    protected $_UrlTranslations = array(
        '–' => '-',
        '—' => '-',
        'À' => 'A',
        'Á' => 'A',
        'Â' => 'A',
        'Ã' => 'A',
        'Ä' => 'Ae',
        'Ä' => 'A',
        'Å' => 'A',
        'Ā' => 'A',
        'Ą' => 'A',
        'Ă' => 'A',
        'Æ' => 'Ae',
        'Ç' => 'C',
        'Ć' => 'C',
        'Č' => 'C',
        'Ĉ' => 'C',
        'Ċ' => 'C',
        'Ď' => 'D',
        'Đ' => 'D',
        'Ð' => 'D',
        'È' => 'E',
        'É' => 'E',
        'Ê' => 'E',
        'Ë' => 'E',
        'Ē' => 'E',
        'Ě' => 'E',
        'Ĕ' => 'E',
        'Ė' => 'E',
        'Ĝ' => 'G',
        'Ğ' => 'G',
        'Ġ' => 'G',
        'Ģ' => 'G',
        'Ĥ' => 'H',
        'Ħ' => 'H',
        'Ì' => 'I',
        'Í' => 'I',
        'Î' => 'I',
        'Ï' => 'I',
        'Ī' => 'I',
        'Ĩ' => 'I',
        'Ĭ' => 'I',
        'Į' => 'I',
        'İ' => 'I',
        'Ĳ' => 'IJ',
        'Ĵ' => 'J',
        'Ķ' => 'K',
        'Ł' => 'K',
        'Ľ' => 'K',
        'Ĺ' => 'K',
        'Ļ' => 'K',
        'Ŀ' => 'K',
        'Ñ' => 'N',
        'Ń' => 'N',
        'Ň' => 'N',
        'Ņ' => 'N',
        'Ŋ' => 'N',
        'Ò' => 'O',
        'Ó' => 'O',
        'Ô' => 'O',
        'Õ' => 'O',
        'Ö' => 'Oe',
        'Ö' => 'Oe',
        'Ō' => 'O',
        'Ő' => 'O',
        'Ŏ' => 'O',
        'Œ' => 'OE',
        'Ŕ' => 'R',
        'Ŗ' => 'R',
        'Ś' => 'S',
        'Š' => 'S',
        'Ş' => 'S',
        'Ŝ' => 'S',
        'Ť' => 'T',
        'Ţ' => 'T',
        'Ŧ' => 'T',
        'Ț' => 'T',
        'Ù' => 'U',
        'Ú' => 'U',
        'Û' => 'U',
        'Ü' => 'Ue',
        'Ū' => 'U',
        'Ü' => 'Ue',
        'Ů' => 'U',
        'Ű' => 'U',
        'Ŭ' => 'U',
        'Ũ' => 'U',
        'Ų' => 'U',
        'Ŵ' => 'W',
        'Ý' => 'Y',
        'Ŷ' => 'Y',
        'Ÿ' => 'Y',
        'Ź' => 'Z',
        'Ž' => 'Z',
        'Ż' => 'Z',
        'Þ' => 'T',
        'à' => 'a',
        'á' => 'a',
        'â' => 'a',
        'ã' => 'a',
        'ä' => 'ae',
        'ä' => 'ae',
        'å' => 'a',
        'ā' => 'a',
        'ą' => 'a',
        'ă' => 'a',
        'æ' => 'ae',
        'ç' => 'c',
        'ć' => 'c',
        'č' => 'c',
        'ĉ' => 'c',
        'ċ' => 'c',
        'ď' => 'd',
        'đ' => 'd',
        'ð' => 'd',
        'è' => 'e',
        'é' => 'e',
        'ê' => 'e',
        'ë' => 'e',
        'ē' => 'e',
        'ę' => 'e',
        'ě' => 'e',
        'ĕ' => 'e',
        'ė' => 'e',
        'ƒ' => 'f',
        'ĝ' => 'g',
        'ğ' => 'g',
        'ġ' => 'g',
        'ģ' => 'g',
        'ĥ' => 'h',
        'ħ' => 'h',
        'ì' => 'i',
        'í' => 'i',
        'î' => 'i',
        'ï' => 'i',
        'ī' => 'i',
        'ĩ' => 'i',
        'ĭ' => 'i',
        'į' => 'i',
        'ı' => 'i',
        'ĳ' => 'ij',
        'ĵ' => 'j',
        'ķ' => 'k',
        'ĸ' => 'k',
        'ł' => 'l',
        'ľ' => 'l',
        'ĺ' => 'l',
        'ļ' => 'l',
        'ŀ' => 'l',
        'ñ' => 'n',
        'ń' => 'n',
        'ň' => 'n',
        'ņ' => 'n',
        'ŉ' => 'n',
        'ŋ' => 'n',
        'ò' => 'o',
        'ó' => 'o',
        'ô' => 'o',
        'õ' => 'o',
        'ö' => 'oe',
        'ö' => 'oe',
        'ø' => 'o',
        'ō' => 'o',
        'ő' => 'o',
        'ŏ' => 'o',
        'œ' => 'oe',
        'ŕ' => 'r',
        'ř' => 'r',
        'ŗ' => 'r',
        'š' => 's',
        'ù' => 'u',
        'ú' => 'u',
        'û' => 'u',
        'ü' => 'ue',
        'ū' => 'u',
        'ü' => 'ue',
        'ů' => 'u',
        'ű' => 'u',
        'ŭ' => 'u',
        'ũ' => 'u',
        'ų' => 'u',
        'ŵ' => 'w',
        'ý' => 'y',
        'ÿ' => 'y',
        'ŷ' => 'y',
        'ž' => 'z',
        'ż' => 'z',
        'ź' => 'z',
        'þ' => 't',
        'ß' => 'ss',
        'ſ' => 'ss',
        'А' => 'A',
        'Б' => 'B',
        'В' => 'V',
        'Г' => 'G',
        'Д' => 'D',
        'Е' => 'E',
        'Ё' => 'YO',
        'Ж' => 'ZH',
        'З' => 'Z',
        'Й' => 'Y',
        'К' => 'K',
        'Л' => 'L',
        'М' => 'M',
        'Н' => 'N',
        'О' => 'O',
        'П' => 'P',
        'Р' => 'R',
        'С' => 'S',
        'ș' => 's',
        'ț' => 't',
        'Ț' => 'T',
        'Т' => 'T',
        'У' => 'U',
        'Ф' => 'F',
        'Х' => 'H',
        'Ц' => 'C',
        'Ч' => 'CH',
        'Ш' => 'SH',
        'Щ' => 'SCH',
        'Ъ' => '',
        'Ы' => 'Y',
        'Ь' => '',
        'Э' => 'E',
        'Ю' => 'YU',
        'Я' => 'YA',
        'а' => 'a',
        'б' => 'b',
        'в' => 'v',
        'г' => 'g',
        'д' => 'd',
        'е' => 'e',
        'ё' => 'yo',
        'ж' => 'zh',
        'з' => 'z',
        'и' => 'i',
        'й' => 'y',
        'к' => 'k',
        'л' => 'l',
        'м' => 'm',
        'н' => 'n',
        'о' => 'o',
        'п' => 'p',
        'р' => 'r',
        'с' => 's',
        'т' => 't',
        'у' => 'u',
        'ф' => 'f',
        'х' => 'h',
        'ц' => 'c',
        'ч' => 'ch',
        'ш' => 'sh',
        'щ' => 'sch',
        'ъ' => '',
        'ы' => 'y',
        'ь' => '',
        'э' => 'e',
        'ю' => 'yu',
        'я' => 'ya'
    );

    public function Url($Mixed) {

        // Preliminary decoding
        $Mixed = strip_tags(html_entity_decode($Mixed, ENT_COMPAT, 'UTF-8'));
        $Mixed = strtr($Mixed, $this->_UrlTranslations);
        $Mixed = preg_replace('`[\']`', '', $Mixed);

        // Test for Unicode PCRE support
        // On non-UTF8 systems this will result in a blank string.
        $UnicodeSupport = (preg_replace('`[\pP]`u', '', 'P') != '');

        // Convert punctuation, symbols, and spaces to hyphens
        if ($UnicodeSupport) {
            $Mixed = preg_replace('`[\pP\pS\s]`u', '-', $Mixed);
        } else {
            $Mixed = preg_replace('`[\s_[^\w\d]]`', '-', $Mixed);
        }

        // Lowercase, no trailing or repeat hyphens
        $Mixed = preg_replace('`-+`', '-', strtolower($Mixed));
        $Mixed = trim($Mixed, '-');

        return rawurlencode($Mixed);
    }

    public function tsToDate($time) {
        if (!$time) {
            return null;
        }

        return gmdate('Y-m-d H:i:s', $time / 1000);
    }

    public function removeNumId($slug) {
        $regex = '/(\d*)\//';
        $newslug = preg_replace($regex, '', $slug);
    }

    public function roleNameFromKey($key) {
        $regex = '/\w*:([\w|\s|-]*):/';
        preg_match($regex, $key, $matches);

        return $matches[1];
    }

    public function idFromKey($key) {
        $regex = '/\w*:(\d*):/';
        preg_match($regex, $key, $matches);

        return $matches[1];
    }

    public function makeNullZero($value) {
        if (!$value) {
            return 0;
        }

        return $value;
    }

    public function isPoll($value) {
        if ($value) {
            return 'poll';
        }

        return null;
    }

    public function serializeReactions($reactions) {
        if ($reactions == '0:0') {
            return null;
        }
        $reactionArray = explode(':', $reactions);
        $arraynum = 1;
        if ($reactionArray[0] > 0 && $reactionArray[1] > 0) {
            $arraynum = 2;
        }
        $attributes = 'a:1:{s:5:"React";a:' . $arraynum . ':{';
        if ($reactionArray[0] > 0) {
            $attributes .= 's:2:"Up";s:' . strlen($reactionArray[0]) . ':"' . $reactionArray[0] . '";';
        }
        if ($reactionArray[1] > 0) {
            $attributes .= 's:4:"Down";s:' . strlen($reactionArray[1]) . ':"' . $reactionArray[1] . '";';
        }
        $attributes .= '}}';

        return $attributes;
    }
}

?>
<?php
/**
 * phpBB exporter tool
 *
 * @copyright Vanilla Forums Inc. 2010
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$Supported['phpbb2'] = array('name' => 'phpBB 2', 'prefix' => 'phpbb_');
$Supported['phpbb2']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'PrivateMessages' => 1,
    'Passwords' => 1,
);

class Phpbb2 extends ExportController {

    /** @var array Required tables => columns */
    protected $SourceTables = array(
        'users' => array(
            'user_id',
            'username',
            'user_password',
            'user_email',
            'user_timezone',
            'user_posts',
            'user_regdate',
            'user_lastvisit'
        ),
        'groups' => array('group_id', 'group_name', 'group_description'),
        'user_group' => array('user_id', 'group_id'),
        'forums' => array('forum_id', 'forum_name', 'forum_desc', 'forum_order'),
        'topics' => array(
            'topic_id',
            'forum_id',
            'topic_poster',
            'topic_title',
            'topic_views',
            'topic_first_post_id',
            'topic_replies',
            'topic_status',
            'topic_type',
            'topic_time'
        ),
        'posts' => array('post_id', 'topic_id', 'poster_id', 'post_time', 'post_edit_time'),
        'posts_text' => array('post_id', 'post_text'),
        'privmsgs' => array(
            'privmsgs_id',
            'privmsgs_subject',
            'privmsgs_from_userid',
            'privmsgs_to_userid',
            'privmsgs_date'
        ),
        'privmsgs_text' => array('privmsgs_text_id', 'privmsgs_bbcode_uid', 'privmsgs_text')
    );

    /**
     * Forum-specific export format.
     * @param ExportModel $Ex
     */
    protected function ForumExport($Ex) {
        // Get the characterset for the comments.
        $CharacterSet = $Ex->GetCharacterSet('posts_text');
        if ($CharacterSet) {
            $Ex->CharacterSet = $CharacterSet;
        }

        $Ex->SourcePrefix = 'phpbb_';

        // Begin
        $Ex->BeginExport('', 'phpBB 2.*', array('HashMethod' => 'phpBB'));

        // Users
        $User_Map = array(
            'user_id' => 'UserID',
            'username' => 'Name',
            'user_password' => 'Password',
            'user_email' => 'Email',
            'user_timezone' => 'HourOffset',
            'user_posts' => array('Column' => 'CountComments', 'Type' => 'int')
        );
        $Ex->ExportTable('User', "select *,
            FROM_UNIXTIME(nullif(user_regdate, 0)) as DateFirstVisit,
            FROM_UNIXTIME(nullif(user_lastvisit, 0)) as DateLastActive,
            FROM_UNIXTIME(nullif(user_regdate, 0)) as DateInserted
         from :_users", $User_Map);  // ":_" will be replace by database prefix


        // Roles
        $Role_Map = array(
            'group_id' => 'RoleID',
            'group_name' => 'Name',
            'group_description' => 'Description'
        );
        // Skip single-user groups
        $Ex->ExportTable('Role', 'select * from :_groups where group_single_user = 0', $Role_Map);


        // UserRoles
        $UserRole_Map = array(
            'user_id' => 'UserID',
            'group_id' => 'RoleID'
        );
        // Skip pending memberships
        $Ex->ExportTable('UserRole', 'select user_id, group_id from :_users
         union
         select user_id, group_id from :_user_group where user_pending = 0', $UserRole_Map);

        // Categories
        $Category_Map = array(
            'id' => 'CategoryID',
            'cat_title' => 'Name',
            'description' => 'Description',
            'parentid' => 'ParentCategoryID'
        );
        $Ex->ExportTable('Category',
            "select
  c.cat_id * 1000 as id,
  c.cat_title,
  c.cat_order * 1000 as Sort,
  null as parentid,
  '' as description
from :_categories c

union all

select
  f.forum_id,
  f.forum_name,
  c.cat_order * 1000 + f.forum_order,
  c.cat_id * 1000 as parentid,
  f.forum_desc
from :_forums f
left join :_categories c
  on f.cat_id = c.cat_id", $Category_Map);

        // Discussions
        $Discussion_Map = array(
            'topic_id' => 'DiscussionID',
            'forum_id' => 'CategoryID',
            'topic_poster' => 'InsertUserID',
            'topic_title' => 'Name',
            'Format' => 'Format',
            'topic_views' => 'CountViews'
        );
        $Ex->ExportTable('Discussion', "select t.*,
        'BBCode' as Format,
         case t.topic_status when 1 then 1 else 0 end as Closed,
         case t.topic_type when 1 then 1 else 0 end as Announce,
         FROM_UNIXTIME(t.topic_time) as DateInserted
        from :_topics t",
            $Discussion_Map);

        // Comments
        $Comment_Map = array(
            'post_id' => 'CommentID',
            'topic_id' => 'DiscussionID',
            'post_text' => array('Column' => 'Body', 'Filter' => array($this, 'RemoveBBCodeUIDs')),
            'Format' => 'Format',
            'poster_id' => 'InsertUserID'
        );
        $Ex->ExportTable('Comment', "select p.*, pt.post_text, pt.bbcode_uid,
        'BBCode' as Format,
         FROM_UNIXTIME(p.post_time) as DateInserted,
         FROM_UNIXTIME(nullif(p.post_edit_time,0)) as DateUpdated
         from :_posts p inner join :_posts_text pt on p.post_id = pt.post_id",
            $Comment_Map);

        // Conversations tables.
        $Ex->Query("drop table if exists z_pmto;");

        $Ex->Query("create table z_pmto (
id int unsigned,
userid int unsigned,
primary key(id, userid));");

        $Ex->Query("insert ignore z_pmto (id, userid)
select privmsgs_id, privmsgs_from_userid
from :_privmsgs;");

        $Ex->Query("insert ignore z_pmto (id, userid)
select privmsgs_id, privmsgs_to_userid
from :_privmsgs;");

        $Ex->Query("drop table if exists z_pmto2;");

        $Ex->Query("create table z_pmto2 (
  id int unsigned,
  userids varchar(250),
  primary key (id)
);");

        $Ex->Query("insert ignore z_pmto2 (id, userids)
select
  id,
  group_concat(userid order by userid)
from z_pmto
group by id;");

        $Ex->Query("drop table if exists z_pm;");

        $Ex->Query("create table z_pm (
  id int unsigned,
  subject varchar(255),
  subject2 varchar(255),
  userids varchar(250),
  groupid int unsigned
);");

        $Ex->Query("insert z_pm (
  id,
  subject,
  subject2,
  userids
)
select
  pm.privmsgs_id,
  pm.privmsgs_subject,
  case when pm.privmsgs_subject like 'Re: %' then trim(substring(pm.privmsgs_subject, 4)) else pm.privmsgs_subject end as subject2,
  t.userids
from :_privmsgs pm
join z_pmto2 t
  on t.id = pm.privmsgs_id;");

        $Ex->Query("create index z_idx_pm on z_pm (id);");

        $Ex->Query("drop table if exists z_pmgroup;");

        $Ex->Query("create table z_pmgroup (
  groupid int unsigned,
  subject varchar(255),
  userids varchar(250)
);");

        $Ex->Query("insert z_pmgroup (
  groupid,
  subject,
  userids
)
select
  min(pm.id),
  pm.subject2,
  pm.userids
from z_pm pm
group by pm.subject2, pm.userids;");

        $Ex->Query("create index z_idx_pmgroup on z_pmgroup (subject, userids);");
        $Ex->Query("create index z_idx_pmgroup2 on z_pmgroup (groupid);");

        $Ex->Query("update z_pm pm
join z_pmgroup g
  on pm.subject2 = g.subject and pm.userids = g.userids
set pm.groupid = g.groupid;");

        // Conversations.
        $Conversation_Map = array(
            'privmsgs_id' => 'ConversationID',
            'privmsgs_from_userid' => 'InsertUserID',
            'RealSubject' => array(
                'Column' => 'Subject',
                'Type' => 'varchar(250)',
                'Filter' => array('Phpbb2', 'EntityDecode')
            )
        );

        $Ex->ExportTable('Conversation', "select
  g.subject as RealSubject,
  pm.*,
  from_unixtime(pm.privmsgs_date) as DateInserted
from :_privmsgs pm
join z_pmgroup g
  on g.groupid = pm.privmsgs_id", $Conversation_Map);

        // Coversation Messages.
        $ConversationMessage_Map = array(
            'privmsgs_id' => 'MessageID',
            'groupid' => 'ConversationID',
            'privmsgs_text' => array('Column' => 'Body', 'Filter' => array($this, 'RemoveBBCodeUIDs')),
            'privmsgs_from_userid' => 'InsertUserID'
        );
        $Ex->ExportTable('ConversationMessage',
            "select
         pm.*,
         txt.*,
         txt.privmsgs_bbcode_uid as bbcode_uid,
         pm2.groupid,
         'BBCode' as Format,
         FROM_UNIXTIME(pm.privmsgs_date) as DateInserted
       from :_privmsgs pm
       join :_privmsgs_text txt
         on pm.privmsgs_id = txt.privmsgs_text_id
       join z_pm pm2
         on pm.privmsgs_id = pm2.id", $ConversationMessage_Map);

        // User Conversation.
        $UserConversation_Map = array(
            'userid' => 'UserID',
            'groupid' => 'ConversationID'
        );
        $Ex->ExportTable('UserConversation',
            "select
         g.groupid,
         t.userid
       from z_pmto t
       join z_pmgroup g
         on g.groupid = t.id;", $UserConversation_Map);

        $Ex->Query('drop table if exists z_pmto');
        $Ex->Query('drop table if exists z_pmto2;');
        $Ex->Query('drop table if exists z_pm;');
        $Ex->Query('drop table if exists z_pmgroup;');

        // End
        $Ex->EndExport();
    }

    public static function EntityDecode($Value) {
        return html_entity_decode($Value, ENT_QUOTES, 'UTF-8');
    }

    public function RemoveBBCodeUIDs($Value, $Field, $Row) {
        $UID = $Row['bbcode_uid'];

        return str_replace(':' . $UID, '', $Value);
    }
}

?>
<?php
/**
 * phpBB exporter tool
 *
 * @copyright Vanilla Forums Inc. 2010
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$Supported['phpbb3'] = array('name' => 'phpBB 3', 'prefix' => 'phpbb_');
$Supported['phpbb3']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Avatars' => 1,
    'Attachments' => 1,
    'PrivateMessages' => 1,
    'Permissions' => 1,
    'Bookmarks' => 1,
    'Signatures' => 1,
    'Polls' => 1,
    'Passwords' => 1,
);

class Phpbb3 extends ExportController {

    /** @var array Required tables => columns */
    protected $SourceTables = array(
        'users' => array(
            'user_id',
            'username',
            'user_password',
            'user_email',
            'user_timezone',
            'user_posts',
            'user_regdate',
            'user_lastvisit',
            'user_regdate'
        ),
        'groups' => array('group_id', 'group_name', 'group_desc'),
        'user_group' => array('user_id', 'group_id'),
        'forums' => array('forum_id', 'forum_name', 'forum_desc', 'left_id', 'parent_id'),
        'topics' => array(
            'topic_id',
            'forum_id',
            'topic_poster',
            'topic_title',
            'topic_views',
            'topic_first_post_id',
            'topic_replies',
            'topic_status',
            'topic_type',
            'topic_time',
            'topic_last_post_time',
            'topic_last_post_time'
        ),
        'posts' => array(
            'post_id',
            'topic_id',
            'post_text',
            'poster_id',
            'post_edit_user',
            'post_time',
            'post_edit_time'
        ),
        'bookmarks' => array('user_id', 'topic_id')
    );

    /**
     * Forum-specific export format.
     * @param ExportModel $Ex
     */
    protected function ForumExport($Ex) {
        $this->Ex = $Ex;

        // Get the characterset for the comments.
        $CharacterSet = $Ex->GetCharacterSet('posts');
        if ($CharacterSet) {
            $Ex->CharacterSet = $CharacterSet;
        }

        $Ex->SourcePrefix = 'phpbb_';


        // Begin
        $Ex->BeginExport('', 'phpBB 3.*', array('HashMethod' => 'phpBB'));

        // Users.

        // Grab the avatar salt.
        $Px = $Ex->GetValue("select config_value from phpbb_config where config_name = 'avatar_salt'", '');
        $cdn = $this->Param('cdn', '');

        $User_Map = array(
            'user_id' => 'UserID',
            'username' => array('Column' => 'Name', 'Filter' => 'HTMLDecoder'),
            'user_password' => 'Password',
            'user_email' => 'Email',
            'user_timezone' => 'HourOffset',
            'user_posts' => array('Column' => 'CountComments', 'Type' => 'int'),
            'photo' => 'Photo',
            'user_rank' => 'RankID',
            'user_ip' => 'LastIPAddress'
        );
        $Ex->ExportTable('User', "select *,
            case user_avatar_type
               when 1 then concat('$cdn', 'phpbb/', '$Px', '_', user_id, substr(user_avatar from locate('.', user_avatar)))
               else null end as photo,
            FROM_UNIXTIME(nullif(user_regdate, 0)) as DateFirstVisit,
            FROM_UNIXTIME(nullif(user_lastvisit, 0)) as DateLastActive,
            FROM_UNIXTIME(nullif(user_regdate, 0)) as DateInserted,
            ban_userid is not null as Banned
         from :_users
            left join phpbb_banlist bl ON (ban_userid = user_id)
         ", $User_Map);  // ":_" will be replace by database prefix

        // Roles
        $Role_Map = array(
            'group_id' => 'RoleID',
            'group_name' => 'Name',
            'group_desc' => 'Description'
        );
        $Ex->ExportTable('Role', 'select * from :_groups', $Role_Map);

        $this->ExportUserNotes();

        // Ranks.
        $Rank_Map = array(
            'rank_id' => 'RankID',
            'level' => array(
                'Column' => 'Level',
                'Filter' => function ($Value) {
                    static $Level = 0;
                    $Level++;

                    return $Level;
                }
            ),
            'rank_title' => 'Name',
            'title2' => 'Label',
            'rank_min' => array(
                'Column' => 'Attributes',
                'Filter' => function ($Value, $Field, $Row) {
                    $Result = array();

                    if ($Row['rank_min']) {
                        $Result['Criteria']['CountPosts'] = $Row['rank_min'];
                    }

                    if ($Row['rank_special']) {
                        $Result['Criteria']['Manual'] = true;
                    }

                    return serialize($Result);
                }
            )
        );
        $Ex->ExportTable('Rank', "
         select r.*, r.rank_title as title2, 0 as level
         from phpbb_ranks r
         order by rank_special, rank_min;", $Rank_Map);

        // Permissions.
        $Ex->ExportTable('Permission', "select
         group_id as RoleID,
         case
            when group_name like '%Guest%' or group_name like 'BOTS' then 'View'
            when group_name like '%Mod%' then 'View,Garden.SignIn.Allow,Garden.Profiles.Edit,Garden.Settings.View,Vanilla.Discussions.Add,Vanilla.Comments.Add,Garden.Moderation.Manage'
            when group_name like '%Admin%' then 'All'
            else 'View,Garden.SignIn.Allow,Garden.Profiles.Edit,Vanilla.Discussions.Add,Vanilla.Comments.Add'
         end as _Permissions
         from phpbb_groups");

        // UserRoles
        $UserRole_Map = array(
            'user_id' => 'UserID',
            'group_id' => 'RoleID'
        );
        $Ex->ExportTable('UserRole', 'select user_id, group_id from :_users
         union
         select user_id, group_id from :_user_group', $UserRole_Map);


        // Signatutes.
        $UserMeta_Map = array(
            'user_id' => 'UserID',
            'name' => 'Name',
            'user_sig' => array('Column' => 'Value', 'Filter' => array($this, 'RemoveBBCodeUIDs'))
        );
        $Ex->ExportTable('UserMeta', "
         select user_id, 'Plugin.Signatures.Sig' as name, user_sig, user_sig_bbcode_uid as bbcode_uid
         from phpbb_users
         where length(user_sig) > 1

         union

         select user_id, 'Plugin.Signatures.Format', 'BBCode', null
         from phpbb_users
         where length(user_sig) > 1
         ", $UserMeta_Map);


        // Categories
        $Category_Map = array(
            'forum_id' => 'CategoryID',
            'forum_name' => array('Column' => 'Name', 'Filter' => 'HTMLDecoder'),
            'forum_desc' => 'Description',
            'left_id' => 'Sort'
        );
        $Ex->ExportTable('Category', "select *,
         nullif(parent_id,0) as ParentCategoryID
         from :_forums", $Category_Map);

        // Discussions
        $Discussion_Map = array(
            'topic_id' => 'DiscussionID',
            'forum_id' => 'CategoryID',
            'topic_poster' => 'InsertUserID',
            'topic_title' => 'Name',
            'Format' => 'Format',
            'topic_views' => 'CountViews',
            'topic_first_post_id' => array('Column' => 'FirstCommentID', 'Type' => 'int'),
            'type' => 'Type'
        );
        $Ex->ExportTable('Discussion', "select t.*,
            'BBCode' as Format,
            topic_replies+1 as CountComments,
            case t.topic_status when 1 then 1 else 0 end as Closed,
            case t.topic_type when 1 then 1 else 0 end as Announce,
            case when t.poll_start > 0 then 'poll' else null end as type,
            FROM_UNIXTIME(t.topic_time) as DateInserted,
            FROM_UNIXTIME(t.topic_last_post_time) as DateUpdated,
            FROM_UNIXTIME(t.topic_last_post_time) as DateLastComment
         from :_topics t", $Discussion_Map);

        // Comments
        $Comment_Map = array(
            'post_id' => 'CommentID',
            'topic_id' => 'DiscussionID',
            'post_text' => array('Column' => 'Body', 'Filter' => array($this, 'RemoveBBCodeUIDs')),
            'Format' => 'Format',
            'poster_id' => 'InsertUserID',
            'poster_ip' => array('Column' => 'InsertIPAddress', 'Filter' => 'ForceIP4'),
            'post_edit_user' => 'UpdateUserID'
        );
        $Ex->ExportTable('Comment', "select p.*,
            'BBCode' as Format,
            FROM_UNIXTIME(p.post_time) as DateInserted,
            FROM_UNIXTIME(nullif(p.post_edit_time,0)) as DateUpdated
         from :_posts p", $Comment_Map);

        // UserDiscussion
        $UserDiscussion_Map = array(
            'user_id' => 'UserID',
            'topic_id' => 'DiscussionID'
        );
        $Ex->ExportTable('UserDiscussion', "select b.*,
         1 as Bookmarked
         from :_bookmarks b", $UserDiscussion_Map);

        // Conversations tables.

        $Ex->Query("drop table if exists z_pmto;");

        $Ex->Query("create table z_pmto (
id int unsigned,
userid int unsigned,
primary key(id, userid));");

        $Ex->Query("insert ignore z_pmto (id, userid)
select msg_id, author_id
from :_privmsgs;");

        $Ex->Query("insert ignore z_pmto (id, userid)
select msg_id, user_id
from :_privmsgs_to;");

        $Ex->Query("insert ignore z_pmto (id, userid)
select msg_id, author_id
from :_privmsgs_to;");

        $Ex->Query("drop table if exists z_pmto2;");

        $Ex->Query("create table z_pmto2 (
  id int unsigned,
  userids varchar(250),
  primary key (id)
);");

        $Ex->Query("insert ignore z_pmto2 (id, userids)
select
  id,
  group_concat(userid order by userid)
from z_pmto
group by id;");

        $Ex->Query("drop table if exists z_pm;");

        $Ex->Query("create table z_pm (
  id int unsigned,
  subject varchar(255),
  subject2 varchar(255),
  userids varchar(250),
  groupid int unsigned
);");

        $Ex->Query("insert z_pm (
  id,
  subject,
  subject2,
  userids
)
select
  pm.msg_id,
  pm.message_subject,
  case when pm.message_subject like 'Re: %' then trim(substring(pm.message_subject, 4)) else pm.message_subject end as subject2,
  t.userids
from :_privmsgs pm
join z_pmto2 t
  on t.id = pm.msg_id;");

        $Ex->Query("create index z_idx_pm on z_pm (id);");

        $Ex->Query("drop table if exists z_pmgroup;");

        $Ex->Query("create table z_pmgroup (
  groupid int unsigned,
  subject varchar(255),
  userids varchar(250)
);");

        $Ex->Query("insert z_pmgroup (
  groupid,
  subject,
  userids
)
select
  min(pm.id),
  pm.subject2,
  pm.userids
from z_pm pm
group by pm.subject2, pm.userids;");

        $Ex->Query("create index z_idx_pmgroup on z_pmgroup (subject, userids);");
        $Ex->Query("create index z_idx_pmgroup2 on z_pmgroup (groupid);");

        $Ex->Query("update z_pm pm
join z_pmgroup g
  on pm.subject2 = g.subject and pm.userids = g.userids
set pm.groupid = g.groupid;");

        // Polls.
        $Poll_Map = array(
            'poll_id' => 'PollID',
            'poll_title' => 'Name',
            'topic_id' => 'DiscussionID',
            'topic_time' => array('Column' => 'DateInserted', 'Filter' => 'TimestampToDate'),
            'topic_poster' => 'InsertUserID',
            'anonymous' => 'Anonymous'
        );
        $Ex->ExportTable('Poll', "
         select distinct
            t.*,
            t.topic_id as poll_id,
            1 as anonymous
         from phpbb_poll_options po
         join phpbb_topics t
            on po.topic_id = t.topic_id", $Poll_Map);

        $PollOption_Map = array(
            'id' => 'PollOptionID',
            'poll_option_id' => 'Sort',
            'topic_id' => 'PollID',
            'poll_option_text' => 'Body',
            'format' => 'Format',
            'poll_option_total' => 'CountVotes',
            'topic_time' => array('Column' => 'DateInserted', 'Filter' => 'TimestampToDate'),
            'topic_poster' => 'InsertUserID'
        );
        $Ex->ExportTable('PollOption', "
         select
            po.*,
            po.poll_option_id * 1000000 + po.topic_id as id,
            'Html' as format,
            t.topic_time,
            t.topic_poster
         from phpbb_poll_options po
         join phpbb_topics t
            on po.topic_id = t.topic_id", $PollOption_Map);

        $PollVote_Map = array(
            'vote_user_id' => 'UserID',
            'id' => 'PollOptionID'
        );
        $Ex->ExportTable('PollVote', "
         select v.*, v.poll_option_id * 1000000 + v.topic_id as id
         from phpbb_poll_votes v", $PollVote_Map);

        // Conversations.
        $Conversation_Map = array(
            'msg_id' => 'ConversationID',
            'author_id' => 'InsertUserID',
            'RealSubject' => array(
                'Column' => 'Subject',
                'Type' => 'varchar(250)',
                'Filter' => array('Phpbb2', 'EntityDecode')
            )
        );

        $Ex->ExportTable('Conversation', "select
  g.subject as RealSubject,
  pm.*,
  from_unixtime(pm.message_time) as DateInserted
from :_privmsgs pm
join z_pmgroup g
  on g.groupid = pm.msg_id", $Conversation_Map);

        // Coversation Messages.
        $ConversationMessage_Map = array(
            'msg_id' => 'MessageID',
            'groupid' => 'ConversationID',
            'message_text' => array('Column' => 'Body', 'Filter' => array($this, 'RemoveBBCodeUIDs')),
            'author_id' => 'InsertUserID'
        );
        $Ex->ExportTable('ConversationMessage',
            "select
         pm.*,
         pm2.groupid,
         'BBCode' as Format,
         FROM_UNIXTIME(pm.message_time) as DateInserted
       from :_privmsgs pm
       join z_pm pm2
         on pm.msg_id = pm2.id", $ConversationMessage_Map);

        // User Conversation.
        $UserConversation_Map = array(
            'userid' => 'UserID',
            'groupid' => 'ConversationID'
        );
        $Ex->ExportTable('UserConversation',
            "select
         g.groupid,
         t.userid
       from z_pmto t
       join z_pmgroup g
         on g.groupid = t.id;", $UserConversation_Map);

        $Ex->Query('drop table if exists z_pmto');
        $Ex->Query('drop table if exists z_pmto2;');
        $Ex->Query('drop table if exists z_pm;');
        $Ex->Query('drop table if exists z_pmgroup;');

        // Media.
        $cdn = $this->Param('cdn', '');
        $Media_Map = array(
            'attach_id' => 'MediaID',
            'real_filename' => 'Name',
            'post_id' => 'InsertUserID',
            'mimetype' => 'Type',
            'filesize' => 'Size',
        );
        $Ex->ExportTable('Media',
            "select
  case when a.post_msg_id = t.topic_first_post_id then 'discussion' else 'comment' end as ForeignTable,
  case when a.post_msg_id = t.topic_first_post_id then a.topic_id else a.post_msg_id end as ForeignID,
  concat('$cdn','FileUpload/', a.physical_filename) as Path,
  FROM_UNIXTIME(a.filetime) as DateInserted,
  'local' as StorageMethod,
  a.*
from :_attachments a
join :_topics t
  on a.topic_id = t.topic_id", $Media_Map);

        $this->ExportBanList();

        // End
        $Ex->EndExport();
    }

    protected function ExportUserNotes() {
        $Ex = $this->Ex;

        // User notes.
        $UserNote_Map = array(
            'log_id' => array('Column' => 'UserNoteID', 'Type' => 'int'),
            'user_id' => array('Column' => 'InsertUserID', 'Type' => 'int'),
            'reportee_id' => array('Column' => 'UserID', 'Type' => 'int'),
            'log_ip' => array('Column' => 'InsertIPAddress', 'Type' => 'varchar(15)'),
            'log_time' => array('Column' => 'DateInserted', 'Type' => 'datetime', 'Filter' => 'TimestampToDate'),
            'log_operation' => array(
                'Column' => 'Type',
                'Type' => 'varchar(10)',
                'Filter' => function ($value) {
                    switch (strtoupper($value)) {
                        case 'LOG_USER_WARNING_BODY':
                            return 'warning';
                        default:
                            return 'note';
                    }
                }
            ),
            'format' => array('Column' => 'Format', 'Type' => 'varchar(20)'),
            'log_data' => array(
                'Column' => 'Body',
                'Type' => 'text',
                'Filter' => function ($value) {
                    $value = @unserialize($value);

                    return array_pop($value);
                }
            )
        );
        $Ex->ExportTable('UserNote',
            "select l.*, 'Text' as format
         from :_log l
         where reportee_id > 0
            and log_operation in ('LOG_USER_GENERAL', 'LOG_USER_WARNING_BODY')", $UserNote_Map);
    }

    /**
     * Export email and ip ban list.
     */
    public function ExportBanList() {
        $Ex = $this->Ex;
        $Ex->ExportTable('Ban',
            "select bl.*, ban_id as BanID, if (ban_ip='', 'Email', 'IpAddress') as BanType,
             if(ban_ip='', ban_email, ban_ip) as BanValue,
             Concat('Imported ban. ', ban_give_reason) as Notes,
             NOW() as DateInserted
         from :_banlist bl
         where bl.ban_userid = 0 and (ban_ip!='' or ban_email!='')");
    }

    public function RemoveBBCodeUIDs($r, $Field = '', $Row = '') {
        if (!$r) {
            return $r;
        }

        $UID = trim($Row['bbcode_uid']);
//      $UID = '2zp03s9s';
        if ($UID) {
            $r = preg_replace("`((?::[a-zA-Z])?:$UID)`", '', $r);
        }

        // Remove smilies.
        $r = preg_replace('#<!\-\- s(.*?) \-\-><img src="\{SMILIES_PATH\}\/.*? \/><!\-\- s\1 \-\->#', '\1', $r);
        // Remove links.
        $regex = '`<!-- [a-z] --><a\s+class="[^"]+"\s+href="([^"]+)">([^<]+)</a><!-- [a-z] -->`';
        $r = preg_replace($regex, '[url=$1]$2[/url]', $r);

        // Allow mailto: links w/o a class.
        $regex = '`<!-- [a-z] --><a\s+href="mailto:([^"]+)">([^<]+)</a><!-- [a-z] -->`i';
        $r = preg_replace($regex, '[url=$1]$2[/url]', $r);

        $r = str_replace(array('&quot;', '&#39;', '&#58;', 'Â', '&#46;', '&amp;'), array('"', "'", ':', '', '.', '&'),
            $r);

        return $r;
    }
}

?>
<?php
/**
 * Punbb exporter tool
 *
 * @copyright Vanilla Forums Inc. 2010
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$Supported['punbb'] = array('name' => 'PunBB 1', 'prefix' => 'punbb_');
$Supported['punbb']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Attachments' => 1,
    'Permissions' => 1,
    'Tags' => 1,
    'Signatures' => 1,
    'Passwords' => 1,
);

class Punbb extends ExportController {

    /** @var array Required tables => columns */
    public $SourceTables = array();

    /**
     * Forum-specific export format
     * @todo Project file size / export time and possibly break into multiple files
     * @param ExportModel $Ex
     *
     */
    protected function ForumExport($Ex) {

        $Ex->BeginExport('', 'PunBB 1.*', array('HashMethod' => 'punbb'));

        // User.
        $User_Map = array(
            'id' => 'UserID',
            'username' => 'Name',
            'email' => 'Email',
            'timezone' => 'HourOffset',
            'registration_ip' => 'InsertIPAddress',
            'PasswordHash' => 'Password'
        );
        $Ex->ExportTable('User', "
         select
           u.*,
           concat(u.password, '$', u.salt) as PasswordHash,
           from_unixtime(registered) as DateInserted,
           from_unixtime(last_visit) as DateLastActive
         from :_users u
         where group_id <> 2", $User_Map);

        // Role.
        $Role_Map = array(
            'g_id' => 'RoleID',
            'g_title' => 'Name'
        );
        $Ex->ExportTable('Role', "select * from :_groups", $Role_Map);

        // Permission.
        $Permission_Map = array(
            'g_id' => 'RoleID',
            'g_modertor' => 'Garden.Moderation.Manage',
            'g_mod_edit_users' => 'Garden.Users.Edit',
            'g_mod_rename_users' => 'Garden.Users.Delete',
            'g_read_board' => 'Vanilla.Discussions.View',
            'g_view_users' => 'Garden.Profiles.View',
            'g_post_topics' => 'Vanilla.Discussions.Add',
            'g_post_replies' => 'Vanilla.Comments.Add',
            'g_pun_attachment_allow_download' => 'Plugins.Attachments.Download.Allow',
            'g_pun_attachment_allow_upload' => 'Plugins.Attachments.Upload.Allow',

        );
        $Permission_Map = $Ex->FixPermissionColumns($Permission_Map);
        $Ex->ExportTable('Permission', "
      select
         g.*,
         g_post_replies as `Garden.SignIn.Allow`,
         g_mod_edit_users as `Garden.Users.Add`,
         case when g_title = 'Administrators' then 'All' else null end as _Permissions
      from :_groups g", $Permission_Map);

        // UserRole.
        $UserRole_Map = array(
            'id' => 'UserID',
            'group_id' => 'RoleID'
        );
        $Ex->ExportTable('UserRole',
            "select
            case u.group_id when 2 then 0 else id end as id,
            u.group_id
          from :_users u", $UserRole_Map);

        // Signatures.
        $Ex->ExportTable('UserMeta', "
         select
         id,
         'Plugin.Signatures.Sig' as Name,
         signature
      from :_users u
      where u.signature is not null", array('id ' => 'UserID', 'signature' => 'Value'));


        // Category.
        $Category_Map = array(
            'id' => 'CategoryID',
            'forum_name' => 'Name',
            'forum_desc' => 'Description',
            'disp_position' => 'Sort',
            'parent_id' => 'ParentCategoryID'
        );
        $Ex->ExportTable('Category', "
      select
        id,
        forum_name,
        forum_desc,
        disp_position,
        cat_id * 1000 as parent_id
      from :_forums f
      union

      select
        id * 1000,
        cat_name,
        '',
        disp_position,
        null
      from :_categories", $Category_Map);

        // Discussion.
        $Discussion_Map = array(
            'id' => 'DiscussionID',
            'poster_id' => 'InsertUserID',
            'poster_ip' => 'InsertIPAddress',
            'closed' => 'Closed',
            'sticky' => 'Announce',
            'forum_id' => 'CategoryID',
            'subject' => 'Name',
            'message' => 'Body'

        );
        $Ex->ExportTable('Discussion', "
      select t.*,
        from_unixtime(p.posted) as DateInserted,
        p.poster_id,
        p.poster_ip,
        p.message,
        from_unixtime(p.edited) as DateUpdated,
        eu.id as UpdateUserID,
        'BBCode' as Format
      from :_topics t
      left join :_posts p
        on t.first_post_id = p.id
      left join :_users eu
        on eu.username = p.edited_by", $Discussion_Map);

        // Comment.
        $Comment_Map = array(
            'id' => 'CommentID',
            'topic_id' => 'DiscussionID',
            'poster_id' => 'InsertUserID',
            'poster_ip' => 'InsertIPAddress',
            'message' => 'Body'
        );
        $Ex->ExportTable('Comment', "
            select p.*,
        'BBCode' as Format,
        from_unixtime(p.posted) as DateInserted,
        from_unixtime(p.edited) as DateUpdated,
        eu.id as UpdateUserID
      from :_topics t
      join :_posts p
        on t.id = p.topic_id
      left join :_users eu
        on eu.username = p.edited_by
      where p.id <> t.first_post_id;", $Comment_Map);

        // Tag.
        $Tag_Map = array(
            'id' => 'TagID',
            'tag' => 'Name'
        );
        $Ex->ExportTable('Tag', "select * from :_tags", $Tag_Map);

        // TagDisucssion.
        $TagDiscussionMap = array(
            'topic_id' => 'DiscussionID',
            'tag_id' => 'TagID'
        );
        $Ex->ExportTable('TagDiscussion', "select * from :_topic_tags", $TagDiscussionMap);

        // Media.
        $Media_Map = array(
            'id' => 'MediaID',
            'filename' => 'Name',
            'file_mime_type' => 'Type',
            'size' => 'Size',
            'owner_id' => 'InsertUserID'
        );
        $Ex->ExportTable('Media', "
      select f.*,
         concat('FileUpload/', f.file_path) as Path,
         from_unixtime(f.uploaded_at) as DateInserted,
         case when post_id is null then 'Discussion' else 'Comment' end as ForeignTable,
         coalesce(post_id, topic_id) as ForieignID
      from :_attach_files f", $Media_Map);


        // End
        $Ex->EndExport();
    }

    function StripMediaPath($AbsPath) {
        if (($Pos = strpos($AbsPath, '/uploads/')) !== false) {
            return substr($AbsPath, $Pos + 9);
        }

        return $AbsPath;
    }

    function FilterPermissions($Permissions, $ColumnName, &$Row) {
        $Permissions2 = unserialize($Permissions);

        foreach ($Permissions2 as $Name => $Value) {
            if (is_null($Value)) {
                $Permissions2[$Name] = false;
            }
        }

        if (is_array($Permissions2)) {
            $Row = array_merge($Row, $Permissions2);
            $this->Ex->CurrentRow = $Row;

            return isset($Permissions2['PERMISSION_ADD_COMMENTS']) ? $Permissions2['PERMISSION_ADD_COMMENTS'] : false;
        }

        return false;
    }

    function ForceBool($Value) {
        if ($Value) {
            return true;
        }

        return false;
    }
}

?>
<?php
/**
 * ppPress exporter tool
 *
 * @copyright Vanilla Forums Inc. 2010
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$Supported['SimplePress'] = array('name' => 'SimplePress 1', 'prefix' => 'wp_');
$Supported['SimplePress']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'PrivateMessages' => 1,
    'Permissions' => 1,
    'Passwords' => 1,
);

class SimplePress extends ExportController {

    /** @var array Required tables => columns */
    protected $SourceTables = array(
        'sfforums' => array(),
        'sfposts' => array(),
        'sftopics' => array(),
        'users' => array('ID', 'user_nicename', 'user_pass', 'user_email', 'user_registered')
        //'meta' => array()
    );

    /**
     * Forum-specific export format.
     * @param ExportModel $Ex
     */
    protected function ForumExport($Ex) {
        $Ex->SourcePrefix = 'wp_';

        // Get the characterset for the comments.
        $CharacterSet = $Ex->GetCharacterSet('posts');
        if ($CharacterSet) {
            $Ex->CharacterSet = $CharacterSet;
        }

        // Begin
        $Ex->BeginExport('', 'SimplePress 1.*', array('HashMethod' => 'Vanilla'));

        // Users
        $User_Map = array(
            'user_id' => 'UserID',
            'display_name' => 'Name',
            'user_pass' => 'Password',
            'user_email' => 'Email',
            'user_registered' => 'DateInserted',
            'lastvisit' => 'DateLastActive'
        );
        $Ex->ExportTable('User',
            "select m.*, u.user_pass, u.user_email, u.user_registered
          from wp_users u
          join wp_sfmembers m
            on u.ID = m.user_id;", $User_Map);

        // Roles
        $Role_Map = array(
            'usergroup_id' => 'RoleID',
            'usergroup_name' => 'Name',
            'usergroup_desc' => 'Description'
        );
        $Ex->ExportTable('Role',
            "select
            usergroup_id,
            usergroup_name,
            usergroup_desc
         from wp_sfusergroups

         union

         select
            100,
            'Administrators',
            ''", $Role_Map);

        // Permissions.
        $Ex->ExportTable('Permission', "select
            usergroup_id as RoleID,
case
   when usergroup_name like 'Guest%' then 'View'
   when usergroup_name like 'Member%' then 'View,Garden.SignIn.Allow,Garden.Profiles.Edit,Vanilla.Discussions.Add,Vanilla.Comments.Add'
   when usergroup_name like 'Mod%' then 'View,Garden.SignIn.Allow,Garden.Profiles.Edit,Garden.Settings.View,Vanilla.Discussions.Add,Vanilla.Comments.Add,Garden.Moderation.Manage'
end as _Permissions
         from wp_sfusergroups

         union

         select 100, 'All'");

        // UserRoles
        $UserRole_Map = array(
            'user_id' => 'UserID',
            'usergroup_id' => 'RoleID'
        );
        $Ex->ExportTable('UserRole',
            "select
            m.user_id,
            m.usergroup_id
         from wp_sfmemberships m

         union

         select
            um.user_id,
            100
         from wp_usermeta um
         where um.meta_key = 'wp_capabilities'
            and um.meta_value like '%PF Manage Forums%'", $UserRole_Map);

        // Categories
        $Category_Map = array(
            'forum_id' => 'CategoryID',
            'forum_name' => array('Column' => 'Name', 'Filter' => 'HTMLDecoder'),
            'forum_desc' => 'Description',
            'forum_seq' => 'Sort',
            'form_slug' => 'UrlCode',
            'parent_id' => 'ParentCategoryID'
        );
        $Ex->ExportTable('Category', "
         select
            f.forum_id,
            f.forum_name,
            f.forum_seq,
            f.forum_desc,
            lower(f.forum_slug) as forum_slug,
            case when f.parent = 0 then f.group_id + 1000 else f.parent end as parent_id
         from wp_sfforums f

         union

         select
            1000 + g.group_id,
            g.group_name,
            g.group_seq,
            g.group_desc,
            null,
            null
         from wp_sfgroups g", $Category_Map);

        // Discussions
        $Discussion_Map = array(
            'topic_id' => 'DiscussionID',
            'forum_id' => 'CategoryID',
            'user_id' => 'InsertUserID',
            'topic_name' => 'Name',
            'Format' => 'Format',
            'topic_date' => 'DateInserted',
            'topic_pinned' => 'Announce',
            'topic_slug' => array('Column' => 'Slug', 'Type' => 'varchar(200)')
        );
        $Ex->ExportTable('Discussion', "select t.*,
            'Html' as Format
         from :_sftopics t", $Discussion_Map);

        if ($Ex->Exists('sftags')) {
            // Tags
            $Tag_Map = array(
                'tag_id' => 'TagID',
                'tag_name' => 'Name'
            );
            $Ex->ExportTable('Tag', "select * from :_sftags", $Tag_Map);

            if ($Ex->Exists('sftagmeta')) {
                $TagDiscussion_Map = array(
                    'tag_id' => 'TagID',
                    'topic_id' => 'DiscussionID'
                );
                $Ex->ExportTable('TagDiscussion', "select * from :_sftagmeta", $TagDiscussion_Map);
            }
        }

        // Comments
        $Comment_Map = array(
            'post_id' => 'CommentID',
            'topic_id' => 'DiscussionID',
            'post_content' => 'Body',
            'Format' => 'Format',
            'user_id' => 'InsertUserID',
            'post_date' => 'DateInserted',
            'poster_ip' => 'InsertIPAddress'
        );
        $Ex->ExportTable('Comment', "select p.*,
            'Html' as Format
         from :_sfposts p", $Comment_Map);

        // Conversation.
        $Conv_Map = array(
            'message_id' => 'ConversationID',
            'from_id' => 'InsertUserID',
            'sent_date' => 'DateInserted'
        );
        $Ex->ExportTable('Conversation',
            "select *
         from :_sfmessages
         where is_reply = 0", $Conv_Map);

        // ConversationMessage.
        $ConvMessage_Map = array(
            'message_id' => 'MessageID',
            'from_id' => 'InsertUserID',
            'message' => array('Column' => 'Body')
        );
        $Ex->ExportTable('ConversationMessage',
            'select c.message_id as ConversationID, m.*
         from :_sfmessages c
         join :_sfmessages m
           on (m.is_reply = 0 and m.message_id = c.message_id) or (m.is_reply = 1 and c.is_reply = 0 and m.message_slug = c.message_slug and m.from_id in (c.from_id, c.to_id) and m.to_id in (c.from_id, c.to_id));',
            $ConvMessage_Map);

        // UserConversation
        $UserConv_Map = array(
            'message_id' => 'ConversationID',
            'from_id' => 'UserID'
        );
        $Ex->ExportTable('UserConversation',
            'select message_id, from_id
         from :_sfmessages
         where is_reply = 0

         union

         select message_id, to_id
         from :_sfmessages
         where is_reply = 0',
            $UserConv_Map);

        // End
        $Ex->EndExport();
    }
}

?>
<?php
/* Written by John Crenshaw for Priacta, Inc. */

/**
 * SMF exporter tool
 *
 * @copyright Priacta, Inc. 2010
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$Supported['smf'] = array('name' => 'Simple Machines 1', 'prefix' => 'smf_'); // SMF
$Supported['smf']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Avatars' => 1,
    'Attachments' => 1,
    'PrivateMessages' => 1,
    'Passwords' => 1,
);

class SMF extends ExportController {

    /** @var array Required tables => columns */
    protected $SourceTables = array(
        'boards' => array(),
        'messages' => array(),
        'personal_messages' => array(),
        'pm_recipients' => array(),
        'categories' => array('ID_CAT', 'name', 'catOrder'),
        'membergroups' => array(),
        'members' => array('ID_MEMBER', 'memberName', 'passwd', 'emailAddress', 'dateRegistered')
    );

    /**
     * Forum-specific export format.
     * @param ExportModel $Ex
     */
    protected function ForumExport($Ex) {
        // Begin
        $Ex->BeginExport('', 'SMF 1.*', array('HashMethod' => 'Django'));

        // Users
        $User_Map = array(
            'ID_MEMBER' => 'UserID',
            'memberName' => 'Name',
            'password' => 'Password',
            'emailAddress' => 'Email',
            'DateInserted' => 'DateInserted',
            'timeOffset' => 'HourOffset',
            'posts' => 'CountComments',
            //'avatar'=>'Photo',
            'birthdate' => 'DateOfBirth',
            'DateFirstVisit' => 'DateFirstVisit',
            'DateLastActive' => 'DateLastActive',
            'DateUpdated' => 'DateUpdated'
        );
        $Ex->ExportTable('User', "
         select m.*,
            from_unixtime(dateRegistered) as DateInserted,
            from_unixtime(dateRegistered) as DateFirstVisit,
            from_unixtime(lastLogin) as DateLastActive,
            from_unixtime(lastLogin) as DateUpdated,
            concat('sha1$', lower(memberName), '$', passwd) as `password`,
            if(m.avatar <> '', m.avatar, concat('attachments/', a.filename)) as Photo
         from :_members m
         left join :_attachments a on a.ID_MEMBER = m.ID_MEMBER ", $User_Map);

        // Roles
        $Role_Map = array(
            'ID_GROUP' => 'RoleID',
            'groupName' => 'Name'
        );
        $Ex->ExportTable('Role', "select * from :_membergroups", $Role_Map);

        // UserRoles
        $UserRole_Map = array(
            'ID_MEMBER' => 'UserID',
            'ID_GROUP' => 'RoleID'
        );
        $Ex->ExportTable('UserRole', "select * from :_members", $UserRole_Map);

        // Categories
        $Category_Map = array(
            'Name' => array('Column' => 'Name', 'Filter' => array($this, 'DecodeNumericEntity'))
        );

        $Ex->ExportTable('Category',
            "
      select
        (`ID_CAT` + 1000000) as `CategoryID`,
        `name` as `Name`,
      '' as `Description`,
      null as `ParentCategoryID`,
        `catOrder` as `Sort`
      from :_categories

     union

      select
        b.`ID_BOARD` as `CategoryID`,

        b.`name` as `Name`,
        b.`description` as `Description`,
      (CASE WHEN b.`ID_PARENT` = 0 THEN (`ID_CAT` + 1000000) ELSE `ID_PARENT` END) as `ParentCategoryID`,
        b.`boardOrder` as `Sort`
      from :_boards b

     ", $Category_Map);

        // Discussions
        $Discussion_Map = array(
            'ID_TOPIC' => 'DiscussionID',
            'subject' => array('Column' => 'Name', 'Filter' => array($this, 'DecodeNumericEntity')),
            //,'Filter'=>'bb2html'),
            'body' => array('Column' => 'Body'),
            //,'Filter'=>'bb2html'),
            'Format' => 'Format',
            'ID_BOARD' => 'CategoryID',
            'DateInserted' => 'DateInserted',
            'DateUpdated' => 'DateUpdated',
            'ID_MEMBER' => 'InsertUserID',
            'DateLastComment' => 'DateLastComment',
            'UpdateUserID' => 'UpdateUserID',
            'locked' => 'Closed',
            'isSticky' => 'Announce',
            'CountComments' => 'CountComments',
            'numViews' => 'CountViews',
            'LastCommentUserID' => 'LastCommentUserID',
            'ID_LAST_MSG' => 'LastCommentID'
        );
        $Ex->ExportTable('Discussion', "
      select t.*,
         (t.numReplies + 1) as CountComments,
         m.subject,
         m.body,
         from_unixtime(m.posterTime) as DateInserted,
         from_unixtime(m.modifiedTime) as DateUpdated,
         m.ID_MEMBER,
         from_unixtime(m_end.posterTime) AS DateLastComment,
         m_end.ID_MEMBER AS UpdateUserID,
         m_end.ID_MEMBER AS LastCommentUserID,
         'BBCode' as Format
       from :_topics t
       join :_messages as m on t.ID_FIRST_MSG = m.ID_MSG
       join :_messages as m_end on t.ID_LAST_MSG = m_end.ID_MSG

       -- where t.spam = 0 AND m.spam = 0;

       ", $Discussion_Map);

        // Comments
        $Comment_Map = array(
            'ID_MSG' => 'CommentID',
            'ID_TOPIC' => 'DiscussionID',
            'Format' => 'Format',
            'body' => array('Column' => 'Body'), //,'Filter'=>'bb2html'),
            'ID_MEMBER' => 'InsertUserID',
            'DateInserted' => 'DateInserted'
        );
        $Ex->ExportTable('Comment',
            "select m.*,
         from_unixtime(m.posterTime) AS DateInserted,
         'BBCode' as Format
       from :_messages m
       join :_topics t on m.ID_TOPIC = t.ID_TOPIC
       where m.ID_MSG <> t.ID_FIRST_MSG;
       ", $Comment_Map);

        // Media
        $Media_Map = array(
            'ID_ATTACH' => 'MediaID',
            'ID_MSG' => 'ForeignID',
            'size' => 'Size',
            'height' => 'ImageHeight',
            'width' => 'ImageWidth'
        );
        $Ex->ExportTable('Media',
            "select a.*,
         concat('attachments/', a.filename) as Path,
         concat('attachments/', b.filename) as ThumbPath,
         if(t.ID_TOPIC is null, 'Comment', 'Discussion') as ForeignTable
       from :_attachments a
       left join :_attachments b on b.ID_ATTACH = a.ID_THUMB
       left join :_topics t on a.ID_MSG = t.ID_FIRST_MSG
       where a.attachmentType = 0
         and a.ID_MSG > 0;", $Media_Map);

        // Conversations need a bit more conversion so execute a series of queries for that.
        $Ex->Query('create table :_smfpmto (
  id int,
  to_id int,
  deleted tinyint,
  primary key(id, to_id)
)');

        $Ex->Query('insert :_smfpmto (
  id,
  to_id,
  deleted
)
select
  ID_PM,
  ID_MEMBER_FROM,
  deletedBySender
from :_personal_messages');

        $Ex->Query('insert ignore :_smfpmto (
  id,
  to_id,
  deleted
)
select
  ID_PM,
  ID_MEMBER,
  deleted
from :_pm_recipients');

        $Ex->Query('create table :_smfpmto2 (
  id int,
  to_ids varchar(255),
  primary key(id)
)');

        $Ex->Query('insert :_smfpmto2 (
  id,
  to_ids
)
select
  id,
  group_concat(to_id order by to_id)
from :_smfpmto
group by id');

        $Ex->Query('create table :_smfpm (
  id int,
  group_id int,
  subject varchar(200),
  subject2 varchar(200),
  from_id int,
  to_ids varchar(255))');

        $Ex->Query('create index :_idx_smfpm2 on :_smfpm (subject2, from_id)');
        $Ex->Query('create index :_idx_smfpmg on :_smfpm (group_id)');

        $Ex->Query('insert :_smfpm (
  id,
  subject,
  subject2,
  from_id,
  to_ids
)
select
  ID_PM,
  subject,
  case when subject like \'Re: %\' then trim(substring(subject, 4)) else subject end as subject2,
  ID_MEMBER_FROM,
  to2.to_ids
from :_personal_messages pm
join :_smfpmto2 to2
  on pm.ID_PM = to2.id');

        $Ex->Query('create table :_smfgroups (
  id int primary key,
  subject2 varchar(200),
  to_ids varchar(255)
)');

        $Ex->Query('insert :_smfgroups
select
  min(id) as group_id, subject2, to_ids
from :_smfpm
group by subject2, to_ids');

        $Ex->Query('create index :_idx_smfgroups on :_smfgroups (subject2, to_ids)');

        $Ex->Query('update :_smfpm pm
join :_smfgroups g
  on pm.subject2 = g.subject2 and pm.to_ids = g.to_ids
set pm.group_id = g.id');

        // Conversation.
        $Conv_Map = array(
            'id' => 'ConversationID',
            'from_id' => 'InsertUserID',
            'DateInserted' => 'DateInserted',
            'subject2' => array('Column' => 'Subject', 'Type' => 'varchar(255)')
        );
        $Ex->ExportTable('Conversation',
            "select
  pm.group_id,
  pm.from_id,
  pm.subject2,
  from_unixtime(pm2.msgtime) as DateInserted
from :_smfpm pm
join :_personal_messages pm2
  on pm.id = pm2.ID_PM
where pm.id = pm.group_id", $Conv_Map);

        // ConversationMessage.
        $ConvMessage_Map = array(
            'id' => 'MessageID',
            'group_id' => 'ConversationID',
            'DateInserted' => 'DateInserted',
            'from_id' => 'InsertUserID',
            'body' => array('Column' => 'Body')
        );
        $Ex->ExportTable('ConversationMessage',
            "select
  pm.id,
  pm.group_id,
  from_unixtime(pm2.msgtime) as DateInserted,
  pm.from_id,
  'BBCode' as Format,
  case when pm.subject = pm.subject2 then concat(pm.subject, '\n\n', pm2.body) else pm2.body end as body
from :_smfpm pm
join :_personal_messages pm2
  on pm.id = pm2.ID_PM", $ConvMessage_Map);

        // UserConversation.
        $UserConv_Map = array(
            'to_id' => 'UserID',
            'group_id' => 'ConversationID',
            'deleted' => 'Deleted'
        );
        $Ex->ExportTable('UserConversation',

            "select
   pm.group_id,
   t.to_id,
   t.deleted
 from :_smfpmto t
 join :_smfpm pm
   on t.id = pm.group_id", $UserConv_Map);

        $Ex->Query('drop table :_smfpm');
        $Ex->Query('drop table :_smfpmto');
        $Ex->Query('drop table :_smfpmto2');
        $Ex->Query('drop table :_smfgroups');

        // End
        $Ex->EndExport();
//      echo implode("\n\n", $Ex->Queries);
    }

    function DecodeNumericEntity($Text) {
        if (function_exists('mb_decode_numericentity')) {
            $convmap = array(0x0, 0x2FFFF, 0, 0xFFFF);

            return mb_decode_numericentity($Text, $convmap, 'UTF-8');
        } else {
            return $Text;
        }
    }

    function _pcreEntityToUtf($matches) {
        $char = intval(is_array($matches) ? $matches[1] : $matches);

        if ($char < 0x80) {
            // to prevent insertion of control characters
            if ($char >= 0x20) {
                return htmlspecialchars(chr($char));
            } else {
                return "&#$char;";
            }
        } else {
            if ($char < 0x80000) {
                return chr(0xc0 | (0x1f & ($char >> 6))) . chr(0x80 | (0x3f & $char));
            } else {
                return chr(0xe0 | (0x0f & ($char >> 12))) . chr(0x80 | (0x3f & ($char >> 6))) . chr(0x80 | (0x3f & $char));
            }
        }
    }
}

?>
<?php
/* Written by John Crenshaw for Priacta, Inc. */

/**
 * SMF exporter tool
 *
 * @copyright Priacta, Inc. 2010
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$Supported['smf2'] = array('name' => 'Simple Machines 2', 'prefix' => 'smf_');
$Supported['smf2']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Attachments' => 1,
    'Bookmarks' => 1,
    'PrivateMessages' => 1,
    'Passwords' => 1,
);

class SMF2 extends ExportController {

    /** @var array Required tables => columns */
    protected $SourceTables = array(
        'boards' => array(),
        'messages' => array(),
        'personal_messages' => array(),
        'pm_recipients' => array(),
        'categories' => array('id_cat', 'name', 'cat_order'),
        'membergroups' => array(),
        'members' => array('id_member', 'member_name', 'passwd', 'email_address', 'date_registered')
    );

    /**
     * Forum-specific export format.
     * @param ExportModel $Ex
     */
    protected function ForumExport($Ex) {
        // Begin
        $Ex->BeginExport('', 'SMF 2.*', array('HashMethod' => 'Django'));

        // Users
        $User_Map = array(
            'id_member' => 'UserID',
            'member_name' => 'Name',
            'password' => 'Password',
            'email_address' => 'Email',
            'DateInserted' => 'DateInserted',
            'timeOffset' => 'HourOffset',
            'posts' => 'CountComments',
            //'avatar'=>'Photo',
            'Photo' => 'Photo',
            'birthdate' => 'DateOfBirth',
            'DateFirstVisit' => 'DateFirstVisit',
            'DateLastActive' => 'DateLastActive',
            'DateUpdated' => 'DateUpdated'
        );
        $Ex->ExportTable('User', "
         select m.*,
            from_unixtime(date_registered) as DateInserted,
            from_unixtime(date_registered) as DateFirstVisit,
            from_unixtime(last_login) as DateLastActive,
            from_unixtime(last_login) as DateUpdated,
            concat('sha1$', lower(member_name), '$', passwd) as `password`,
            if(m.avatar <> '', m.avatar, concat('attachments/', a.filename)) as Photo
         from :_members m
         left join :_attachments a on a.id_member = m.id_member ", $User_Map);

        // Roles
        $Role_Map = array(
            'id_group' => 'RoleID',
            'group_name' => 'Name'
        );
        $Ex->ExportTable('Role', "select * from :_membergroups", $Role_Map);

        // UserRoles
        $UserRole_Map = array(
            'id_member' => 'UserID',
            'id_group' => 'RoleID'
        );
        $Ex->ExportTable('UserRole', "select * from :_members", $UserRole_Map);

        // Categories
        $Category_Map = array(
            'Name' => array('Column' => 'Name', 'Filter' => array($this, 'DecodeNumericEntity'))
        );

        $Ex->ExportTable('Category',
            "
            select
              (`id_cat` + 1000000) as `CategoryID`,
              `name` as `Name`,
              '' as `Description`,
              null as `ParentCategoryID`,
              `cat_order` as `Sort`
            from :_categories

            union

            select
              b.`id_board` as `CategoryID`,

              b.`name` as `Name`,
                b.`description` as `Description`,
              (CASE WHEN b.`id_parent` = 0 THEN (`id_cat` + 1000000) ELSE `id_parent` END) as `ParentCategoryID`,
              b.`board_order` as `Sort`
            from :_boards b

            ", $Category_Map);

        // Discussions
        $Discussion_Map = array(
            'id_topic' => 'DiscussionID',
            'subject' => array('Column' => 'Name', 'Filter' => array($this, 'DecodeNumericEntity')),
            //,'Filter'=>'bb2html'),
            'body' => array('Column' => 'Body'),
            //,'Filter'=>'bb2html'),
            'Format' => 'Format',
            'id_board' => 'CategoryID',
            'DateInserted' => 'DateInserted',
            'DateUpdated' => 'DateUpdated',
            'id_member' => 'InsertUserID',
            'DateLastComment' => 'DateLastComment',
            'UpdateUserID' => 'UpdateUserID',
            'locked' => 'Closed',
            'isSticky' => 'Announce',
            'CountComments' => 'CountComments',
            'numViews' => 'CountViews',
            'LastCommentUserID' => 'LastCommentUserID',
            'id_last_msg' => 'LastCommentID'
        );
        $Ex->ExportTable('Discussion', "
      select t.*,
         (t.num_replies + 1) as CountComments,
         m.subject,
         m.body,
         from_unixtime(m.poster_time) as DateInserted,
         from_unixtime(m.modified_time) as DateUpdated,
         m.id_member,
         from_unixtime(m_end.poster_time) AS DateLastComment,
         m_end.id_member AS UpdateUserID,
         m_end.id_member AS LastCommentUserID,
         'BBCode' as Format
       from :_topics t
       join :_messages as m on t.id_first_msg = m.id_msg
       join :_messages as m_end on t.id_last_msg = m_end.id_msg

       -- where t.spam = 0 AND m.spam = 0;

       ", $Discussion_Map);

        // Comments
        $Comment_Map = array(
            'id_msg' => 'CommentID',
            'id_topic' => 'DiscussionID',
            'Format' => 'Format',
            'body' => array('Column' => 'Body'), //,'Filter'=>'bb2html'),
            'id_member' => 'InsertUserID',
            'DateInserted' => 'DateInserted'
        );
        $Ex->ExportTable('Comment',
            "select m.*,
               from_unixtime(m.poster_time) AS DateInserted,
               'BBCode' as Format
             from :_messages m
               join :_topics t on m.id_topic = t.id_topic
               where m.id_msg <> t.id_first_msg;
             ", $Comment_Map);

        // Media
        $Media_Map = array(
            'ID_ATTACH' => 'MediaID',
            'id_msg' => 'ForeignID',
            'size' => 'Size',
            'height' => 'ImageHeight',
            'width' => 'ImageWidth'
        );
        $Ex->ExportTable('Media',
            "select a.*,
               concat('attachments/', a.filename) as Path,
               concat('attachments/', b.filename) as ThumbPath,
               if(t.id_topic is null, 'Comment', 'Discussion') as ForeignTable
             from :_attachments a
             left join :_attachments b on b.ID_ATTACH = a.ID_THUMB
             left join :_topics t on a.id_msg = t.id_first_msg
             where a.attachment_type = 0
               and a.id_msg > 0;", $Media_Map);


        // Conversations
        $Conversation_Map = array(
            'id_pm_head' => 'ConversationID',
            'subject' => 'Subject',
            'id_member_from' => 'InsertUserID',
            'unixmsgtime' => 'DateInserted',
        );

        $Ex->ExportTable('Conversation',
            "select
              pm.*,
              from_unixtime(pm.msgtime) as unixmsgtime
            from :_personal_messages pm
            ", $Conversation_Map);


        $ConvMsg_Map = array(
            'id_pm' => 'MessageID',
            'id_pm_head' => 'ConversationID',
            'body' => 'Body',
            'format' => 'Format',
            'id_member_from' => 'InsertUserID',
            'unixmsgtime' => 'DateInserted',
        );

        $Ex->ExportTable('ConversationMessage',
            "select
              pm.*,
              from_unixtime(pm.msgtime) as unixmsgtime ,
              'BBCode' as format
            from :_personal_messages pm
            ", $ConvMsg_Map);


        $UserConv_Map = array(
            'id_member2' => 'UserId',
            'id_pm_head' => 'ConversationID',
            'deleted2' => 'Deleted'
        );

        $Ex->ExportTable('UserConversation',
            "(select
              pm.id_member_from as id_member2,
              pm.id_pm_head,
              pm.deleted_by_sender as deleted2
            from :_personal_messages pm )
            UNION ALL
            (select
            pmr.id_member as id_member2,
            pm.id_pm_head,
            pmr.deleted as deleted2
            from :_personal_messages pm join :_pm_recipients pmr on pmr.id_pm = pm.id_pm
            )
            ", $UserConv_Map);


        // End

        $Ex->EndExport();

    }

    function DecodeNumericEntity($Text) {
        if (function_exists('mb_decode_numericentity')) {
            $convmap = array(0x0, 0x2FFFF, 0, 0xFFFF);

            return mb_decode_numericentity($Text, $convmap, 'UTF-8');
        } else {
            return $Text;
        }
    }

    function _pcreEntityToUtf($matches) {
        $char = intval(is_array($matches) ? $matches[1] : $matches);

        if ($char < 0x80) {
            // to prevent insertion of control characters
            if ($char >= 0x20) {
                return htmlspecialchars(chr($char));
            } else {
                return "&#$char;";
            }
        } else {
            if ($char < 0x80000) {
                return chr(0xc0 | (0x1f & ($char >> 6))) . chr(0x80 | (0x3f & $char));
            } else {
                return chr(0xe0 | (0x0f & ($char >> 12))) . chr(0x80 | (0x3f & ($char >> 6))) . chr(0x80 | (0x3f & $char));
            }
        }
    }
}

?>
<?php
/**
 * Toast (.NET) exporter tool
 *
 * @copyright Vanilla Forums Inc. 2013
 * @license Proprietary
 * @package VanillaPorter
 */

$Supported['toast'] = array('name' => 'Toast', 'prefix' => 'tstdb_');
$Supported['toast']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Signatures' => 1,
    'Passwords' => 1,
);

class Toast extends ExportController {
    static $PasswordFormats = array(0 => 'md5', 1 => 'sha1', 2 => 'sha256', 3 => 'sha384', 4 => 'sha512');

    /**
     *
     * @param ExportModel $Ex
     */
    public function ForumExport($Ex) {
        $CharacterSet = $Ex->GetCharacterSet('tstdb_Post');
        if ($CharacterSet) {
            $Ex->CharacterSet = $CharacterSet;
        }

        $Ex->BeginExport('', 'Toast Forum');
        $Ex->SourcePrefix = 'tstdb_';

        // User.
        $User_Map = array(
            'ID' => 'UserID',
            'Username' => 'Name',
            'Email' => 'Email',
            'LastLoginDate' => array('Column' => 'DateLastActive', 'Type' => 'datetime'),
            'IP' => 'LastIPAddress'
        );
        $Ex->ExportTable('User', "
         select
            *,
            NOW() as DateInserted
         from :_Member u", $User_Map);

        // Determine safe RoleID to use for non-existant Member role
        $LastRoleID = 1001;
        $LastRoleResult = $Ex->Query("select max(ID) as LastID from :_Group");
        if ($LastRoleResult) {
            $LastRole = mysql_fetch_array($LastRoleResult);
            $LastRoleID = $LastRole['LastID'] + 1;
        }

        // Role.
        // Add default Member role.
        $Role_Map = array(
            'ID' => 'RoleID',
            'Name' => 'Name'
        );
        $Ex->ExportTable('Role', "
         select
            ID,
            Name
         from :_Group

         union all

         select
            $LastRoleID as ID,
            'Member' as Name
         from :_Group;", $Role_Map);

        // UserRole.
        // Users without roles get put into new Member role.
        $UserRole_Map = array(
            'MemberID' => 'UserID',
            'GroupID' => 'RoleID'
        );
        $Ex->ExportTable('UserRole', "
         select
            GroupID,
            MemberID
         from :_MemberGroupLink

         union all

         select
            $LastRoleID as GroupID,
            m.ID as MemberID
         from :_Member m
         left join :_MemberGroupLink l
            on l.MemberID = m.ID
         where l.GroupID is null", $UserRole_Map);

        // Signatures.
        $Ex->ExportTable('UserMeta', "
         select
            ID as UserID,
            'Plugin.Signatures.Sig' as `Name`,
            Signature as `Value`
         from :_Member
         where Signature <> ''

         union all

         select
            ID as UserID,
            'Plugin.Signatures.Format' as `Name`,
            'BBCode' as `Value`
         from :_Member
         where Signature <> '';");

        // Category.
        $Category_Map = array(
            'ID' => 'CategoryID',
            'CategoryID' => 'ParentCategoryID',
            'ForumName' => 'Name',
            'Description' => 'Description'
        );

        $Ex->ExportTable('Category', "
         select
            f.ID,
            f.CategoryID * 1000 as CategoryID,
            f.ForumName,
            f.Description
         from :_Forum f

         union all

         select
            c.ID * 1000 as ID,
            -1 as CategoryID,
            c.Name as ForumName,
            null as Description
         from :_Category c;", $Category_Map);

        // Discussion.
        $Discussion_Map = array(
            'ID' => 'DiscussionID',
            'ForumID' => 'CategoryID',
            'MemberID' => 'InsertUserID',
            'PostDate' => 'DateInserted',
            'ModifyDate' => 'DateUpdated',
            'LastPostDate' => 'DateLastComment',
            'Subject' => 'Name',
            'Message' => 'Body',
            'Hits' => 'CountViews',
            'ReplyCount' => 'CountComments'
        );
        $Ex->ExportTable('Discussion', "
         select p.*,
            'Html' as Format
         from :_Post p
         where p.Topic = 1
            and p.Deleted = 0;", $Discussion_Map);

        // Comment.
        $Comment_Map = array(
            'ID' => 'CommentID',
            'TopicID' => 'DiscussionID',
            'MemberID' => 'InsertUserID',
            'PostDate' => 'DateInserted',
            'ModifyDate' => 'DateUpdated',
            'Message' => 'Body'
        );
        $Ex->ExportTable('Comment', "
         select *,
            'Html' as Format
         from :_Post p
         where Topic = 0 and Deleted = 0;", $Comment_Map);


        $Ex->EndExport();
    }

    public function CleanDate($Value) {
        if (!$Value) {
            return null;
        }
        if (substr($Value, 0, 4) == '0000') {
            return null;
        }

        return $Value;
    }

}

?>
<?php
/**
 * User Voice exporter tool
 *
 * @copyright Vanilla Forums Inc. 2010
 * @license Proprietary
 * @package VanillaPorter
 */

$Supported['uservoice'] = array('name' => 'User Voice', 'prefix' => 'cs_');
$Supported['uservoice']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Avatars' => 1,
    'Bookmarks' => 1,
    'Signatures' => 1,
    'Passwords' => 1,
);

class UserVoice extends ExportController {
    /**
     *
     * @param ExportModel $Ex
     */
    public function ForumExport($Ex) {
        // Get the characterset for the comments.
        $CharacterSet = $Ex->GetCharacterSet('cs_Threads');
        if ($CharacterSet) {
            $Ex->CharacterSet = $CharacterSet;
        }

        $Ex->BeginExport('', 'User Voice');
        $Ex->SourcePrefix = 'cs_';


        // User.
        $User_Map = array(
            'LastActivity' => array('Column' => 'DateLastActive'),
            'UserName' => array('Column' => 'Name', 'Filter' => 'HTMLDecoder'),
            'CreateDate' => array('Column' => 'DateInserted'),
        );
        $Ex->ExportTable('User', "
         select u.*,
         concat('sha1$', m.PasswordSalt, '$', m.Password) as Password,
         'django' as HashMethod,
         if(a.Content is not null, concat('import/userpics/avatar',u.UserID,'.jpg'), NULL) as Photo
         from :_Users u
         left join aspnet_Membership m on m.UserId = u.MembershipID
         left join :_UserAvatar a on a.UserID = u.UserID", $User_Map);


        // Role.
        $Role_Map = array(
            'RoleId' => array('Column' => 'RoleID', 'Filter' => array($this, 'RoleIDConverter')),
            'RoleName' => 'Name'
        );
        $Ex->ExportTable('Role', "
         select *
         from aspnet_Roles", $Role_Map);

        // User Role.
        $UserRole_Map = array(
            'RoleId' => array('Column' => 'RoleID', 'Filter' => array($this, 'RoleIDConverter')),
        );
        $Ex->ExportTable('UserRole', "
         select u.UserID, ur.RoleId
         from aspnet_UsersInRoles ur
         left join :_Users u on ur.UserId = u.MembershipID
         ", $UserRole_Map);


        // Category.
        $Category_Map = array(
            'SectionID' => 'CategoryID',
            'ParentID' => 'ParentCategoryID',
            'SortOrder' => 'Sort',
            'DateCreated' => 'DateInserted'
        );
        $Ex->ExportTable('Category', "
         select s.*
         from :_Sections s", $Category_Map);


        // Discussion.
        $Discussion_Map = array(
            'ThreadID' => 'DiscussionID',
            'SectionID' => 'CategoryID',
            'UserID' => 'InsertUserID',
            'PostDate' => 'DateInserted',
            'ThreadDate' => 'DateLastComment',
            'TotalViews' => 'CountViews',
            'TotalReplies' => 'CountComments',
            'IsLocked' => 'Closed',
            'MostRecentPostAuthorID' => 'LastCommentUserID',
            'MostRecentPostID' => 'LastCommentID',
            'Subject' => array('Column' => 'Name', 'Filter' => 'HTMLDecoder'),
            'Body' => array('Column' => 'Body', 'Filter' => 'HTMLDecoder'),
            'IPAddress' => 'InsertIPAddress'
        );
        $Ex->ExportTable('Discussion', "
         select t.*,
            p.Subject,
            p.Body,
            'Html' as Format,
            p.IPAddress as InsertIPAddress,
            if(t.IsSticky  > 0, 2, 0) as Announce
         from :_Threads t
         left join :_Posts p on p.ThreadID = t.ThreadID
         where p.SortOrder = 1", $Discussion_Map);


        // Comment.
        $Comment_Map = array(
            'PostID' => 'CommentID',
            'ThreadID' => 'DiscussionID',
            'UserID' => 'InsertUserID',
            'IPAddress' => 'InsertIPAddress',
            'Body' => array('Column' => 'Body', 'Filter' => 'HTMLDecoder'),
            'PostDate' => 'DateInserted'
        );
        $Ex->ExportTable('Comment', "
         select p.*
         from :_Posts p
         where SortOrder > 1", $Comment_Map);


        // Bookmarks
        $UserDiscussion_Map = array(
            'ThreadID' => 'DiscussionID'
        );
        $Ex->ExportTable('UserDiscussion', "
         select t.*,
            '1' as Bookmarked,
            NOW() as DateLastViewed
         from :_TrackedThreads t", $UserDiscussion_Map);

        // Media.
        /*$Media_Map = array(
           'FileName' => 'Name',
           'ContentType' => 'Type',
           'ContentSize' => 'Size',
           'UserID' => 'InsertUserID',
           'Created' => 'DateInserted'
        );
        $Ex->ExportTable('Media', "
           select a.*,
              if(p.SortOrder = 1, 'Discussion', 'Comment') as ForeignTable,
              if(p.SortOrder = 1, p.ThreadID, a.PostID) as ForeignID,
              concat('import/attach/', a.FileName) as Path
           from :_PostAttachments a
           left join :_Posts p on p.PostID = a.PostID
           where IsRemote = 0", $Media_Map);
        */

        // Decode files in database.
        $this->ExportHexAvatars();
        //$this->ExportHexAttachments();


        // El fin.
        $Ex->EndExport();
    }

    /**
     * Role IDs are crazy hex strings of hyphenated octets.
     * Create an integer RoleID using the first 4 characters.
     *
     * @param string $RoleID
     * @return int
     */
    public function RoleIDConverter($RoleID) {
        return hexdec(substr($RoleID, 0, 4));
    }

    /**
     * Avatars are hex-encoded in the database.
     */
    public function ExportHexAvatars($Thumbnail = true) {
        $this->Ex->Comment("Exporting hex encoded columns...");

        $Result = $this->Ex->Query("select UserID, Length, ContentType, Content from :_UserAvatar");
        $Path = '/www/porter/userpics';
        $Count = 0;

        while ($Row = mysql_fetch_assoc($Result)) {
            // Build path
            if (!file_exists(dirname($Path))) {
                $R = mkdir(dirname($Path), 0777, true);
                if (!$R) {
                    die("Could not create " . dirname($Path));
                }
            }

            $PhotoPath = $Path . '/pavatar' . $Row['UserID'] . '.jpg';
            file_put_contents($PhotoPath, hex2bin($Row['Content']));
            $this->Ex->Status('.');

            if ($Thumbnail) {
                if ($Thumbnail === true) {
                    $Thumbnail = 50;
                }

                //$PicPath = str_replace('/avat', '/pavat', $PhotoPath);
                $ThumbPath = str_replace('/pavat', '/navat', $PhotoPath);
                GenerateThumbnail($PhotoPath, $ThumbPath, $Thumbnail, $Thumbnail);
            }
            $Count++;
        }
        $this->Ex->Status("$Count Hex Encoded.\n");
        $this->Ex->Comment("$Count Hex Encoded.", false);
    }

    /**
     *
     */
    public function ExportHexAttachments() {
        $this->Ex->Comment("Exporting hex encoded columns...");

        $Result = $this->Ex->Query("select a.*, p.PostID
         from :_PostAttachments a
         left join :_Posts p on p.PostID = a.PostID
         where IsRemote = 0");
        $Path = '/www/porter/attach';
        $Count = 0;

        while ($Row = mysql_fetch_assoc($Result)) {
            // Build path
            if (!file_exists(dirname($Path))) {
                $R = mkdir(dirname($Path), 0777, true);
                if (!$R) {
                    die("Could not create " . dirname($Path));
                }
            }

            file_put_contents($Path . '/' . $Row['FileName'], hex2bin($Row['Content']));
            $Count++;
        }
        $this->Ex->Status("$Count Hex Encoded.\n");
        $this->Ex->Comment("$Count Hex Encoded.", false);
    }
}

/**
 * Get the file extension from a mime-type.
 * @param string $mime
 * @param string $ext If this argument is specified then this extension will be added to the list of known types.
 * @return string The file extension without the dot.
 */
function MimeToExt($mime, $ext = null) {
    static $known = array('text/plain' => 'txt', 'image/jpeg' => 'jpg');
    $mime = strtolower($mime);

    if ($ext !== null) {
        $known[$mime] = ltrim($ext, '.');
    }

    if (array_key_exists($mime, $known)) {
        return $known[$mime];
    }

    // We don't know the mime type so we need to just return the second part as the extension.
    $result = trim(strrchr($mime, '/'), '/');

    if (substr($result, 0, 2) === 'x-') {
        $result = substr($result, 2);
    }

    return $result;
}

if (!function_exists('hex2bin')) {
    function hex2bin($hexstr) {
        $n = strlen($hexstr);
        $sbin = "";
        $i = 0;
        while ($i < $n) {
            $a = substr($hexstr, $i, 2);
            $c = pack("H*", $a);
            if ($i == 0) {
                $sbin = $c;
            } else {
                $sbin .= $c;
            }
            $i += 2;
        }

        return $sbin;
    }
}
?>
<?php
/**
 * Vanilla 1 exporter tool
 *
 * @copyright Vanilla Forums Inc. 2010
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$Supported['vanilla1']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Attachments' => 1,
    'PrivateMessages' => 1,
    'Passwords' => 1,
    'Bookmarks' => 1,
);

class Vanilla1 extends ExportController {

    /** @var array Required tables => columns */
    public $SourceTables = array(
        'User' => array('UserID', 'Name', 'Password', 'Email', 'CountComments'),
        'Role' => array('RoleID', 'Name', 'Description'),
        'Category' => array('CategoryID', 'Name', 'Description'),
        'Discussion' => array(
            'DiscussionID',
            'Name',
            'CategoryID',
            'DateCreated',
            'AuthUserID',
            'DateLastActive',
            'Closed',
            'Sticky',
            'CountComments',
            'Sink',
            'LastUserID'
        ),
        'Comment' => array(
            'CommentID',
            'DiscussionID',
            'AuthUserID',
            'DateCreated',
            'EditUserID',
            'DateEdited',
            'Body',
            'Deleted'
        )
    );

    /**
     * Forum-specific export format
     * @todo Project file size / export time and possibly break into multiple files
     * @param ExportModel $Ex
     *
     */
    protected function ForumExport($Ex) {
        $this->Ex = $Ex;

        // Get the characterset for the comments.
        $CharacterSet = $Ex->GetCharacterSet('Comment');
        if ($CharacterSet) {
            $Ex->CharacterSet = $CharacterSet;
        }

        // Begin
        $Ex->BeginExport('', 'Vanilla 1.*');

        // Users
        $User_Map = array(
            'UserID' => 'UserID',
            'Name' => 'Name',
            'Password' => 'Password',
            'Email' => 'Email',
            'Icon' => 'Photo',
            'CountComments' => 'CountComments',
            'Discovery' => 'DiscoveryText'
        );
        $Ex->ExportTable('User', "SELECT * FROM :_User", $User_Map);  // ":_" will be replaced by database prefix

        // Roles

        // Since the zero role is a valid role in Vanilla 1 then we'll have to reassign it.
        $R = $Ex->Query('select max(RoleID) as RoleID from :_Role');
        $ZeroRoleID = 0;
        if (is_resource($R)) {
            while (($Row = @mysql_fetch_assoc($R)) !== false) {
                $ZeroRoleID = $Row['RoleID'];
            }
        }
        $ZeroRoleID++;

        /*
            'RoleID' => 'int',
            'Name' => 'varchar(100)',
            'Description' => 'varchar(200)'
         */
        $Role_Map = array(
            'RoleID' => 'RoleID',
            'Name' => 'Name',
            'Description' => 'Description'
        );
        $Ex->ExportTable('Role',
            "select RoleID, Name, Description from :_Role union all select $ZeroRoleID, 'Applicant', 'Created by the Vanilla Porter'",
            $Role_Map);

        $Permission_Map = array(
            'RoleID' => 'RoleID',
            'PERMISSION_SIGN_IN' => 'Garden.SignIn.Allow',
            'Permissions' => array(
                'Column' => 'Vanilla.Comments.Add',
                'Type' => 'tinyint',
                'Filter' => array($this, 'FilterPermissions')
            ),
            'PERMISSION_START_DISCUSSION' => array(
                'Column' => 'Vanilla.Discussions.Add',
                'Type' => 'tinyint',
                'Filter' => array($this, 'ForceBool')
            ),
            'PERMISSION_SINK_DISCUSSION' => array(
                'Column' => 'Vanilla.Discussions.Sink',
                'Type' => 'tinyint',
                'Filter' => array($this, 'ForceBool')
            ),
            'PERMISSION_STICK_DISCUSSIONS' => array(
                'Column' => 'Vanilla.Discussions.Announce',
                'Type' => 'tinyint',
                'Filter' => array($this, 'ForceBool')
            ),
            'PERMISSION_CLOSE_DISCUSSIONS' => array(
                'Column' => 'Vanilla.Discussions.Close',
                'Type' => 'tinyint',
                'Filter' => array($this, 'ForceBool')
            ),
            'PERMISSION_EDIT_DISCUSSIONS' => array(
                'Column' => 'Vanilla.Discussions.Edit',
                'Type' => 'tinyint',
                'Filter' => array($this, 'ForceBool')
            ),
            'PERMISSION_EDIT_COMMENTS' => array(
                'Column' => 'Vanilla.Comments.Edit',
                'Type' => 'tinyint',
                'Filter' => array($this, 'ForceBool')
            ),
            'PERMISSION_APPROVE_APPLICANTS' => array(
                'Column' => 'Garden.Moderation.Manage',
                'Type' => 'tinyint',
                'Filter' => array($this, 'ForceBool')
            ),
            'PERMISSION_EDIT_USERS' => array(
                'Column' => 'Garden.Users.Edit',
                'Type' => 'tinyint',
                'Filter' => array($this, 'ForceBool')
            ),
            'PERMISSION_CHANGE_APPLICATION_SETTINGS' => array(
                'Column' => 'Garden.Settings.Manage',
                'Type' => 'tinyint',
                'Filter' => array($this, 'ForceBool')
            )
        );
        $Ex->ExportTable('Permission', "select * from :_Role", $Permission_Map);

        // UserRoles
        /*
            'UserID' => 'int',
            'RoleID' => 'int'
         */
        $UserRole_Map = array(
            'UserID' => 'UserID',
            'RoleID' => 'RoleID'
        );
        $Ex->ExportTable('UserRole',
            "select UserID, case RoleID when 0 then $ZeroRoleID else RoleID end as RoleID from :_User", $UserRole_Map);

        // Categories
        /*
            'CategoryID' => 'int',
            'Name' => 'varchar(30)',
            'Description' => 'varchar(250)',
            'ParentCategoryID' => 'int',
            'DateInserted' => 'datetime',
            'InsertUserID' => 'int',
            'DateUpdated' => 'datetime',
            'UpdateUserID' => 'int'
         */
        $Category_Map = array(
            'CategoryID' => 'CategoryID',
            'Name' => 'Name',
            'Description' => 'Description'
        );
        $Ex->ExportTable('Category', "select CategoryID, Name, Description from :_Category", $Category_Map);

        // Discussions
        /*
            'DiscussionID' => 'int',
            'Name' => 'varchar(100)',
            'CategoryID' => 'int',
            'Body' => 'text',
            'Format' => 'varchar(20)',
            'DateInserted' => 'datetime',
            'InsertUserID' => 'int',
            'DateUpdated' => 'datetime',
            'UpdateUserID' => 'int',
            'Score' => 'float',
            'Announce' => 'tinyint',
            'Closed' => 'tinyint'
         */
        $Discussion_Map = array(
            'DiscussionID' => 'DiscussionID',
            'Name' => 'Name',
            'CategoryID' => 'CategoryID',
            'DateCreated' => 'DateInserted',
            'DateCreated2' => 'DateUpdated',
            'AuthUserID' => 'InsertUserID',
            'DateLastActive' => 'DateLastComment',
            'AuthUserID2' => 'UpdateUserID',
            'Closed' => 'Closed',
            'Sticky' => 'Announce',
            'CountComments' => 'CountComments',
            'Sink' => 'Sink',
            'LastUserID' => 'LastCommentUserID'
        );
        $Ex->ExportTable('Discussion',
            "SELECT d.*,
            d.LastUserID as LastCommentUserID,
            d.DateCreated as DateCreated2, d.AuthUserID as AuthUserID2,
            c.Body,
            c.FormatType as Format
         FROM :_Discussion d
         LEFT JOIN :_Comment c
            ON d.FirstCommentID = c.CommentID
         WHERE coalesce(d.WhisperUserID, 0) = 0 and d.Active = 1", $Discussion_Map);

        // Comments
        /*
            'CommentID' => 'int',
            'DiscussionID' => 'int',
            'DateInserted' => 'datetime',
            'InsertUserID' => 'int',
            'DateUpdated' => 'datetime',
            'UpdateUserID' => 'int',
            'Format' => 'varchar(20)',
            'Body' => 'text',
            'Score' => 'float'
         */
        $Comment_Map = array(
            'CommentID' => 'CommentID',
            'DiscussionID' => 'DiscussionID',
            'AuthUserID' => 'InsertUserID',
            'DateCreated' => 'DateInserted',
            'EditUserID' => 'UpdateUserID',
            'DateEdited' => 'DateUpdated',
            'Body' => 'Body',
            'FormatType' => 'Format'
        );
        $Ex->ExportTable('Comment', "
         SELECT
            c.*
         FROM :_Comment c
         JOIN :_Discussion d
            ON c.DiscussionID = d.DiscussionID
         WHERE d.FirstCommentID <> c.CommentID
            AND c.Deleted = '0'
            AND coalesce(d.WhisperUserID, 0) = 0
            AND coalesce(c.WhisperUserID, 0) = 0", $Comment_Map);

        $Ex->ExportTable('UserDiscussion', "
         SELECT
            w.UserID,
            w.DiscussionID,
            w.CountComments,
            w.LastViewed as DateLastViewed,
            case when b.UserID is not null then 1 else 0 end AS Bookmarked
         FROM :_UserDiscussionWatch w
         LEFT JOIN :_UserBookmark b
            ON w.DiscussionID = b.DiscussionID AND w.UserID = b.UserID");

        // Conversations

        // Create a mapping tables for conversations.
        // These mapping tables are used to group comments that a) are in the same discussion and b) are from and to the same users.

        $Ex->Query("drop table if exists z_pmto");

        $Ex->Query("create table z_pmto (
  CommentID int,
  UserID int,
  primary key(CommentID, UserID)
 )");

        $Ex->Query("insert ignore z_pmto (
  CommentID,
  UserID
)
select distinct
  CommentID,
  AuthUserID
from :_Comment
where coalesce(WhisperUserID, 0) <> 0");

        $Ex->Query("insert ignore z_pmto (
  CommentID,
  UserID
)
select distinct
  CommentID,
  WhisperUserID
from :_Comment
where coalesce(WhisperUserID, 0) <> 0");

        $Ex->Query("insert ignore z_pmto (
  CommentID,
  UserID
)
select distinct
  c.CommentID,
  d.AuthUserID
from :_Discussion d
join :_Comment c
  on c.DiscussionID = d.DiscussionID
where coalesce(d.WhisperUserID, 0) <> 0");

        $Ex->Query("insert ignore z_pmto (
  CommentID,
  UserID
)
select distinct
  c.CommentID,
  d.WhisperUserID
from :_Discussion d
join :_Comment c
  on c.DiscussionID = d.DiscussionID
where coalesce(d.WhisperUserID, 0) <> 0");

        $Ex->Query("insert ignore z_pmto (
  CommentID,
  UserID
)
select distinct
  c.CommentID,
  c.AuthUserID
from :_Discussion d
join :_Comment c
  on c.DiscussionID = d.DiscussionID
where coalesce(d.WhisperUserID, 0) <> 0");

        $Ex->Query("drop table if exists z_pmto2");

        $Ex->Query("create table z_pmto2 (
  CommentID int,
  UserIDs varchar(250),
  primary key (CommentID)
)");

        $Ex->Query("insert z_pmto2 (
  CommentID,
  UserIDs
)
select
  CommentID,
  group_concat(UserID order by UserID)
from z_pmto
group by CommentID");


        $Ex->Query("drop table if exists z_pm");

        $Ex->Query("create table z_pm (
  CommentID int,
  DiscussionID int,
  UserIDs varchar(250),
  GroupID int
)");

        $Ex->Query("insert ignore z_pm (
  CommentID,
  DiscussionID
)
select
  CommentID,
  DiscussionID
from :_Comment
where coalesce(WhisperUserID, 0) <> 0");

        $Ex->Query("insert ignore z_pm (
  CommentID,
  DiscussionID
)
select
  c.CommentID,
  c.DiscussionID
from :_Discussion d
join :_Comment c
  on c.DiscussionID = d.DiscussionID
where coalesce(d.WhisperUserID, 0) <> 0");

        $Ex->Query("update z_pm pm
join z_pmto2 t
  on t.CommentID = pm.CommentID
set pm.UserIDs = t.UserIDs");

        $Ex->Query("drop table if exists z_pmgroup");

        $Ex->Query("create table z_pmgroup (
  GroupID int,
  DiscussionID int,
  UserIDs varchar(250)
)");

        $Ex->Query("insert z_pmgroup (
  GroupID,
  DiscussionID,
  UserIDs
)
select
  min(pm.CommentID),
  pm.DiscussionID,
  t2.UserIDs
from z_pm pm
join z_pmto2 t2
  on pm.CommentID = t2.CommentID
group by pm.DiscussionID, t2.UserIDs");

        $Ex->Query("create index z_idx_pmgroup on z_pmgroup (DiscussionID, UserIDs)");

        $Ex->Query("create index z_idx_pmgroup2 on z_pmgroup (GroupID)");

        $Ex->Query("update z_pm pm
join z_pmgroup g
  on pm.DiscussionID = g.DiscussionID and pm.UserIDs = g.UserIDs
set pm.GroupID = g.GroupID");

        $Conversation_Map = array(
            'AuthUserID' => 'InsertUserID',
            'DateCreated' => 'DateInserted',
            'DiscussionID' => array('Column' => 'DiscussionID', 'Type' => 'int'),
            'CommentID' => 'ConversationID',
            'Name' => array('Column' => 'Subject', 'Type' => 'varchar(255)')
        );
        $Ex->ExportTable('Conversation',
            "select c.*, d.Name
from :_Comment c
join :_Discussion d
  on d.DiscussionID = c.DiscussionID
join z_pmgroup g
  on g.GroupID = c.CommentID;", $Conversation_Map);

        // ConversationMessage.
        $ConversationMessage_Map = array(
            'CommentID' => 'MessageID',
            'GroupID' => 'ConversationID',
            'Body' => 'Body',
            'FormatType' => 'Format',
            'AuthUserID' => 'InsertUserID',
            'DateCreated' => 'DateInserted'
        );
        $Ex->ExportTable('ConversationMessage',
            "select c.*, pm.GroupID
from z_pm pm
join :_Comment c
  on pm.CommentID = c.CommentID", $ConversationMessage_Map);

        // UserConversation
        /*
           'UserID' => 'int',
           'ConversationID' => 'int',
           'LastMessageID' => 'int'
        */
        $UserConversation_Map = array(
            'UserID' => 'UserID',
            'GroupID' => 'ConversationID'
        );
        $Ex->ExportTable('UserConversation',
            "select distinct
  pm.GroupID,
  t.UserID
from z_pmto t
join z_pm pm
  on pm.CommentID = t.CommentID", $UserConversation_Map);

        $Ex->Query("drop table z_pmto");
        $Ex->Query("drop table z_pmto2");
        $Ex->Query("drop table z_pm");
        $Ex->Query("drop table z_pmgroup");

        // Media
        if ($Ex->Exists('Attachment')) {
            $Media_Map = array(
                'AttachmentID' => 'MediaID',
                'Name' => 'Name',
                'MimeType' => 'Type',
                'Size' => 'Size',
                //'StorageMethod',
                'Path' => array('Column' => 'Path', 'Filter' => array($this, 'StripMediaPath')),
                'UserID' => 'InsertUserID',
                'DateCreated' => 'DateInserted',
                'CommentID' => 'ForeignID'
                //'ForeignTable'
            );
            $Ex->ExportTable('Media',
                "select a.*, 'local' as StorageMethod, 'comment' as ForeignTable from :_Attachment a",
                $Media_Map);
        }

        // End
        $Ex->EndExport();
    }

    function StripMediaPath($AbsPath) {
        if (($Pos = strpos($AbsPath, '/uploads/')) !== false) {
            return substr($AbsPath, $Pos + 9);
        }

        return $AbsPath;
    }

    function FilterPermissions($Permissions, $ColumnName, &$Row) {
        $Permissions2 = unserialize($Permissions);

        foreach ($Permissions2 as $Name => $Value) {
            if (is_null($Value)) {
                $Permissions2[$Name] = false;
            }
        }

        if (is_array($Permissions2)) {
            $Row = array_merge($Row, $Permissions2);
            $this->Ex->CurrentRow = $Row;

            return isset($Permissions2['PERMISSION_ADD_COMMENTS']) ? $Permissions2['PERMISSION_ADD_COMMENTS'] : false;
        }

        return false;
    }

    function ForceBool($Value) {
        if ($Value) {
            return true;
        }

        return false;
    }
}

?>
<?php
/**
 * Vanilla 2 exporter tool
 *
 * @copyright Vanilla Forums Inc. 2010
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$Supported['vanilla2']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Avatars' => 1,
    'Attachments' => 1,
    'PrivateMessages' => 1,
    'Permissions' => 1,
    'UserWall' => 1,
    'UserNotes' => 1,
    'Bookmarks' => 1,
    'Signatures' => 1,
    'Passwords' => 1,
);

class Vanilla2 extends ExportController {

    /** @var array Required tables => columns */
    protected $_SourceTables = array();

    /**
     * @param ExportModel $Ex
     */
    protected function ForumExport($Ex) {
        $Tables = array(
            'Activity',
            'Category',
            'Comment',
            'Conversation',
            'ConversationMessage',
            'Discussion',
            'Media',
            'Permission',
            'Role',
            'User',
            'UserComment',
            'UserConversation',
            'UserDiscussion',
            'UserMeta',
            'UserRole'
        );

        $Ex->BeginExport('', 'Vanilla 2.*', array('HashMethod' => 'Vanilla'));

        foreach ($Tables as $TableName) {
            $this->ExportTable($Ex, $TableName);
        }

        $Ex->EndExport();
    }

    /**
     *
     * @param ExportModel $Ex
     * @param string $TableName
     */
    protected function ExportTable($Ex, $TableName) {
        // Make sure the table exists.
        if (!$Ex->Exists($TableName)) {
            return;
        }

        $Ex->ExportTable($TableName, "select * from :_{$TableName}");
    }

}

?>
<?php
/**
 * vBulletin exporter tool.
 *
 * This will migrate all vBulletin data for 3.x and 4.x forums.
 * It migrates all attachments from 2.x and later.
 *
 * Supports the FileUpload, ProfileExtender, and Signature plugins.
 * All vBulletin data appropriate for those plugins will be prepared
 * and transferred.
 *
 * To export only 1 category, add 'forumid=#' parameter to the URL.
 * To extract avatars stored in database, add 'avatars=1' parameter to the URL.
 * To extract attachments stored in db, add 'attachments=1' parameter to the URL.
 * To extract all usermeta data (title, skype, custom profile fields, etc),
 *    add 'usermeta=1' parameter to the URL.
 * To stop the export after only extracting files, add 'noexport=1' param to the URL.
 *
 * TO MIGRATE FILES, BEFORE IMPORTING YOU MUST:
 * 1) Copy entire 'customavatars' folder into Vanilla's /upload folder.
 * 2) Copy entire 'attachments' folder into Vanilla's / upload folder.
 * 3) Make BOTH folders writable by the server.
 * 4) Enable the FileUpload plugin. (Media table must be present.)
 *
 * filepath - Command line option to fix / check files are on disk.  Files named .attach are renamed
 * to the proper name and missing files are reported in missing-files.txt.
 *
 * @copyright Vanilla Forums Inc. 2010
 * @author Matt Lincoln Russell lincoln@icrontic.com
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */

$Supported['vbulletin'] = array('name' => 'vBulletin 3 & 4', 'prefix' => 'vb_');
// Commented commands are still supported, if you really want to use them.
$Supported['vbulletin']['CommandLine'] = array(
    //'noexport' => array('Exports only the blobs.', 'Sx' => '::'),
    'mindate' => array('A date to import from. Like selective amnesia.'),
    //'forumid' => array('Only export 1 forum'),
    //'ipbanlist' => array('Export IP ban list, which is a terrible idea.'),
    'filepath' => array('Full path of file attachments to be renamed.', 'Sx' => '::')
);
$Supported['vbulletin']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Avatars' => 1,
    'Attachments' => 1,
    'PrivateMessages' => 1,
    'Permissions' => 1,
    'UserWall' => 1,
    'UserNotes' => 1,
    'Bookmarks' => 1,
    'Passwords' => 1,
    'Signatures' => 1,
    'Ranks' => 1,
    'Polls' => 1,
);

/**
 * vBulletin-specific extension of generic ExportController.
 *
 * @package VanillaPorter
 */
class Vbulletin extends ExportController {
    /* @var string SQL fragment to build new path to attachments. */
    public $AttachSelect = "concat('/vbulletin/', left(f.filehash, 2), '/', f.filehash, '_', a.attachmentid,'.', f.extension) as Path";

    /* @var string SQL fragment to build new path to user photo. */
    public $AvatarSelect = "case
      when a.userid is not null then concat('customavatars/', a.userid % 100,'/avatar_', a.userid, right(a.filename, instr(reverse(a.filename), '.')))
      when av.avatarpath is not null then av.avatarpath
      else null
      end as customphoto";

    /* @var array Default permissions to map. */
    static $Permissions = array(

        'genericpermissions' => array(
            1 => array('Garden.Profiles.View', 'Garden.Activity.View'),
            2 => 'Garden.Profiles.Edit',
            1024 => 'Plugins.Signatures.Edit'
        ),
        'forumpermissions' => array(
            1 => 'Vanilla.Discussions.View',
            16 => 'Vanilla.Discussions.Add',
            64 => 'Vanilla.Comments.Add',
            4096 => 'Plugins.Attachments.Download',
            8192 => 'Plugins.Attachments.Upload'
        ),
        'adminpermissions' => array(
            1 => array(
                'Garden.Moderation.Manage',
                'Vanilla.Discussions.Announce',
                'Vanilla.Discussions.Close',
                'Vanilla.Discussions.Delete',
                'Vanilla.Comments.Delete',
                'Vanilla.Comments.Edit',
                'Vanilla.Discussions.Edit',
                'Vanilla.Discussions.Sink',
                'Garden.Activity.Delete',
                'Garden.Users.Add',
                'Garden.Users.Edit',
                'Garden.Users.Approve',
                'Garden.Users.Delete',
                'Garden.Applicants.Manage'
            ),
            2 => array(
                'Garden.Settings.View',
                'Garden.Settings.Manage',
                'Garden.Messages.Manage',
                'Vanilla.Spam.Manage'
            )
//          4 => 'Garden.Settings.Manage',),
        ),
//      'wolpermissions' => array(
//          16 => 'Plugins.WhosOnline.ViewHidden')
    );

    static $Permissions2 = array();

    /** @var array Required tables => columns. Commented values are optional. */
    protected $SourceTables = array(
        //'attachment'
        //'contenttype'
        //'customavatar'
        'deletionlog' => array('type', 'primaryid'),
        //'filedata'
        'forum' => array('forumid', 'description', 'displayorder', 'title', 'description', 'displayorder'),
        //'phrase' => array('varname','text','product','fieldname','varname'),
        //'pm'
        //'pmgroup'
        //'pmreceipt'
        //'pmtext'
        'post' => array('postid', 'threadid', 'pagetext', 'userid', 'dateline', 'visible'),
        //'setting'
        'subscribethread' => array('userid', 'threadid'),
        'thread' => array(
            'threadid',
            'forumid',
            'postuserid',
            'title',
            'open',
            'sticky',
            'dateline',
            'lastpost',
            'visible'
        ),
        //'threadread'
        'user' => array(
            'userid',
            'username',
            'password',
            'email',
            'referrerid',
            'timezoneoffset',
            'posts',
            'salt',
            'birthday_search',
            'joindate',
            'lastvisit',
            'lastactivity',
            'membergroupids',
            'usergroupid',
            'usertitle',
            'homepage',
            'aim',
            'icq',
            'yahoo',
            'msn',
            'skype',
            'styleid',
            'avatarid'
        ),
        //'userban'
        'userfield' => array('userid'),
        'usergroup' => array('usergroupid', 'title', 'description'),
        //'visitormessage'
    );

    /**
     * Export each table one at a time.
     *
     * @param ExportModel $Ex
     */
    protected function ForumExport($Ex) {
        // Allow limited export of 1 category via ?forumid=ID
        $ForumID = $this->Param('forumid');
        if ($ForumID) {
            $ForumWhere = ' and t.forumid ' . (strpos($ForumID, ', ') === false ? "= $ForumID" : "in ($ForumID)");
        } else {
            $ForumWhere = '';
        }

        // Determine the character set
        $CharacterSet = $Ex->GetCharacterSet('post');
        if ($CharacterSet) {
            $Ex->CharacterSet = $CharacterSet;
        }

        // Begin
        $Ex->BeginExport('', 'vBulletin 3.* and 4.*');
        $this->ExportBlobs(
            $this->Param('files'),
            $this->Param('avatars'),
            $ForumWhere
        );

        if ($this->Param('noexport')) {
            $Ex->Comment('Skipping the export.');
            $Ex->EndExport();

            return;
        }
        // Check to see if there is a max date.
        $MinDate = $this->Param('mindate');
        if ($MinDate) {
            $MinDate = strtotime($MinDate);
            $Ex->Comment("Min topic date ($MinDate): " . date('c', $MinDate));
        }
        $Now = time();

        $cdn = $this->Param('cdn', '');

        // Grab all of the ranks.
        $Ranks = $Ex->Get("select * from :_usertitle order by minposts desc", 'usertitleid');

        // Users
        $User_Map = array(
            'userid' => 'UserID',
            'username' => 'Name',
            'password2' => 'Password',
            'email' => 'Email',
            'referrerid' => 'InviteUserID',
            'timezoneoffset' => 'HourOffset',
            'ipaddress' => 'LastIPAddress',
            'ipaddress2' => 'InsertIPAddress',
            'usertitle' => array(
                'Column' => 'Title',
                'Filter' => function ($Value) {
                    return trim(strip_tags(str_replace('&nbsp;', ' ', $Value)));
                }
            ),
            'posts' => array(
                'Column' => 'RankID',
                'Filter' => function ($Value) use ($Ranks) {
                    // Look  up the posts in the ranks table.
                    foreach ($Ranks as $RankID => $Row) {
                        if ($Value >= $Row['minposts']) {
                            return $RankID;
                        }
                    }

                    return null;
                }
            )
        );

        // Use file avatar or the result of our blob export?
        if ($this->GetConfig('usefileavatar')) {
            $User_Map['filephoto'] = 'Photo';
        } else {
            $User_Map['customphoto'] = 'Photo';
        }

        $Ex->ExportTable('User', "select u.*,
            ipaddress as ipaddress2,
            concat(`password`, salt) as password2,
            DATE_FORMAT(birthday_search,GET_FORMAT(DATE,'ISO')) as DateOfBirth,
            FROM_UNIXTIME(joindate) as DateFirstVisit,
            FROM_UNIXTIME(lastvisit) as DateLastActive,
            FROM_UNIXTIME(joindate) as DateInserted,
            FROM_UNIXTIME(lastactivity) as DateUpdated,
            case when avatarrevision > 0 then concat('$cdn', 'userpics/avatar', u.userid, '_', avatarrevision, '.gif')
                 when av.avatarpath is not null then av.avatarpath
                 else null
                 end as filephoto,
            {$this->AvatarSelect},
            case when ub.userid is not null then 1 else 0 end as Banned,
            'vbulletin' as HashMethod
         from :_user u
         left join :_customavatar a
            on u.userid = a.userid
         left join :_avatar av
            on u.avatarid = av.avatarid
         left join :_userban ub
              on u.userid = ub.userid and ub.liftdate <= now() ",
            $User_Map);  // ":_" will be replace by database prefix

        // Roles
        $Role_Map = array(
            'usergroupid' => 'RoleID',
            'title' => 'Name',
            'description' => 'Description'
        );
        $Ex->ExportTable('Role', 'select * from :_usergroup', $Role_Map);

        // UserRoles
        $UserRole_Map = array(
            'userid' => 'UserID',
            'usergroupid' => 'RoleID'
        );
        $Ex->Query("CREATE TEMPORARY TABLE VbulletinRoles (userid INT UNSIGNED NOT NULL, usergroupid INT UNSIGNED NOT NULL)");
        # Put primary groups into tmp table
        $Ex->Query("insert into VbulletinRoles (userid, usergroupid) select userid, usergroupid from :_user");
        # Put stupid CSV column into tmp table
        $SecondaryRoles = $Ex->Query("select userid, usergroupid, membergroupids from :_user", true);
        if (is_resource($SecondaryRoles)) {
            while (($Row = @mysql_fetch_assoc($SecondaryRoles)) !== false) {
                if ($Row['membergroupids'] != '') {
                    $Groups = explode(',', $Row['membergroupids']);
                    foreach ($Groups as $GroupID) {
                        if (!$GroupID) {
                            continue;
                        }
                        $Ex->Query("insert into VbulletinRoles (userid, usergroupid) values({$Row['userid']},{$GroupID})",
                            true);
                    }
                }
            }
        }
        # Export from our tmp table and drop
        $Ex->ExportTable('UserRole', 'select distinct userid, usergroupid from VbulletinRoles', $UserRole_Map);
        $Ex->Query("DROP TABLE IF EXISTS VbulletinRoles");

        // Permissions.
        $Permissions_Map = array(
            'usergroupid' => 'RoleID',
            'title' => array('Column' => 'Garden.SignIn.Allow', 'Filter' => array($this, 'SignInPermission')),
            'genericpermissions' => array('Column' => 'GenericPermissions', 'type' => 'int'),
            'forumpermissions' => array('Column' => 'ForumPermissions', 'type' => 'int')
        );
        $this->AddPermissionColumns(self::$Permissions, $Permissions_Map);
        $Ex->ExportTable('Permission', 'select * from :_usergroup', $Permissions_Map);

//      $Ex->EndExport();
//      return;

        // UserMeta
        $Ex->Query("CREATE TEMPORARY TABLE VbulletinUserMeta (`UserID` INT NOT NULL ,`Name` VARCHAR( 255 ) NOT NULL ,`Value` text NOT NULL)");
        # Standard vB user data
        $UserFields = array(
            'usertitle' => 'Title',
            'homepage' => 'Website',
            'skype' => 'Skype',
            'styleid' => 'StyleID'
        );
        foreach ($UserFields as $Field => $InsertAs) {
            $Ex->Query("insert into VbulletinUserMeta (UserID, Name, Value) select userid, 'Profile.$InsertAs', $Field from :_user where $Field != ''");
        }
        # Dynamic vB user data (userfield)
        $ProfileFields = $Ex->Query("select varname, text from :_phrase where product='vbulletin' and fieldname='cprofilefield' and varname like 'field%_title'");
        if (is_resource($ProfileFields)) {
            $ProfileQueries = array();
            while ($Field = @mysql_fetch_assoc($ProfileFields)) {
                $Column = str_replace('_title', '', $Field['varname']);
                $Name = preg_replace('/[^a-zA-Z0-9\s_-]/', '', $Field['text']);
                $ProfileQueries[] = "insert into VbulletinUserMeta (UserID, Name, Value)
               select userid, 'Profile." . $Name . "', " . $Column . " from :_userfield where " . $Column . " != ''";
            }
            foreach ($ProfileQueries as $Query) {
                $Ex->Query($Query);
            }
        }


        // Signatures
        $Sql = "
         select
            userid as UserID,
            'Plugin.Signatures.Sig' as Name,
            signature as Value
         from :_usertextfield
         where nullif(signature, '') is not null

         union

         select
            userid,
            'Plugin.Signatures.Format',
            'BBCode'
         from :_usertextfield
         where nullif(signature, '') is not null";
        $Ex->ExportTable('UserMeta', $Sql);


        // Ranks
        $Rank_Map = array(
            'usertitleid' => 'RankID',
            'title' => 'Name',
            'title2' => 'Label',
            'minposts' => array(
                'Column' => 'Attributes',
                'Filter' => function ($Value) {
                    $Result = array(
                        'Criteria' => array(
                            'CountPosts' => $Value
                        )
                    );

                    return serialize($Result);
                }
            ),
            'level' => array(
                'Column' => 'Level',
                'Filter' => function ($Value) {
                    static $Level = 1;

                    return $Level++;
                }
            )
        );
        $Ex->ExportTable('Rank', "
         select ut.*, ut.title as title2, 0 as level
         from :_usertitle ut
         order by ut.minposts", $Rank_Map);


        // Categories
        $Category_Map = array(
            'forumid' => 'CategoryID',
            'description' => 'Description',
            'Name2' => array('Column' => 'Name', 'Filter' => 'HTMLDecoder'),
            'displayorder' => array('Column' => 'Sort', 'Type' => 'int'),
            'parentid' => 'ParentCategoryID'
        );
        $Ex->ExportTable('Category', "select f.*, title as Name2
         from :_forum f
         where 1 = 1 $ForumWhere", $Category_Map);

        $MinDiscussionID = false;
        $MinDiscussionWhere = false;
        if ($MinDate) {
            $MinDiscussionID = $Ex->GetValue("
            select max(threadid)
            from :_thread
            where dateline < $MinDate
            ", false);

            $MinDiscussionID2 = $Ex->GetValue("
            select min(threadid)
            from :_thread
            where dateline >= $MinDate
            ", false);

            // The two discussion IDs should be the same, but let's average them.
            $MinDiscussionID = floor(($MinDiscussionID + $MinDiscussionID2) / 2);

            $Ex->Comment('Min topic id: ' . $MinDiscussionID);
        }

        // Discussions
        $Discussion_Map = array(
            'threadid' => 'DiscussionID',
            'forumid' => 'CategoryID',
            'postuserid' => 'InsertUserID',
            'postuserid2' => 'UpdateUserID',
            'title' => array('Column' => 'Name', 'Filter' => 'HTMLDecoder'),
            'Format' => 'Format',
            'views' => 'CountViews',
            'ipaddress' => 'InsertIPAddress'
        );

        if ($Ex->Destination == 'database') {
            // Remove the filter from the title so that this doesn't take too long.
            $Ex->HTMLDecoderDb('thread', 'title', 'threadid');
            unset($Discussion_Map['title']['Filter']);
        }

        if ($MinDiscussionID) {
            $MinDiscussionWhere = "and t.threadid > $MinDiscussionID";
        }

        $Ex->ExportTable('Discussion', "select t.*,
            t.postuserid as postuserid2,
            p.ipaddress,
            p.pagetext as Body,
            'BBCode' as Format,
            replycount+1 as CountComments,
            convert(ABS(open-1),char(1)) as Closed,
            if(convert(sticky,char(1))>0,2,0) as Announce,
            FROM_UNIXTIME(t.dateline) as DateInserted,
            FROM_UNIXTIME(lastpost) as DateUpdated,
            FROM_UNIXTIME(lastpost) as DateLastComment
         from :_thread t
            left join :_deletionlog d on (d.type='thread' and d.primaryid=t.threadid)
            left join :_post p on p.postid = t.firstpostid
         where d.primaryid is null
            and t.visible = 1
            $MinDiscussionWhere
            $ForumWhere", $Discussion_Map);

        // Comments
        $Comment_Map = array(
            'postid' => 'CommentID',
            'threadid' => 'DiscussionID',
            'pagetext' => 'Body',
            'Format' => 'Format',
            'ipaddress' => 'InsertIPAddress'
        );

        if ($MinDiscussionID) {
            $MinDiscussionWhere = "and p.threadid > $MinDiscussionID";
        }

        $Ex->ExportTable('Comment', "select p.*,
            'BBCode' as Format,
            p.userid as InsertUserID,
            p.userid as UpdateUserID,
         FROM_UNIXTIME(p.dateline) as DateInserted,
            FROM_UNIXTIME(p.dateline) as DateUpdated
         from :_post p
         inner join :_thread t
            on p.threadid = t.threadid
         left join :_deletionlog d
            on (d.type='post' and d.primaryid=p.postid)
         where p.postid <> t.firstpostid
            and d.primaryid is null
            and p.visible = 1
            $MinDiscussionWhere
            $ForumWhere", $Comment_Map);

        // UserDiscussion
        if ($MinDiscussionID) {
            $MinDiscussionWhere = "where st.threadid > $MinDiscussionID";
        }

        $Ex->ExportTable('UserDiscussion', "select
            st.userid as UserID,
            st.threadid as DiscussionID,
            '1' as Bookmarked,
            FROM_UNIXTIME(tr.readtime) as DateLastViewed
         from :_subscribethread st
         left join :_threadread tr on tr.userid = st.userid and tr.threadid = st.threadid
         $MinDiscussionWhere");
        /*$Ex->ExportTable('UserDiscussion', "select
             tr.userid as UserID,
             tr.threadid as DiscussionID,
             FROM_UNIXTIME(tr.readtime) as DateLastViewed,
             case when st.threadid is not null then 1 else 0 end as Bookmarked
           from :_threadread tr
           left join :_subscribethread st on tr.userid = st.userid and tr.threadid = st.threadid");*/

        // Activity (from visitor messages in vBulletin 3.8+)
        if ($Ex->Exists('visitormessage')) {
            if ($MinDiscussionID) {
                $MinDiscussionWhere = "and dateline > $MinDiscussionID";
            }


            $Activity_Map = array(
                'postuserid' => 'RegardingUserID',
                'userid' => 'ActivityUserID',
                'pagetext' => 'Story',
                'NotifyUserID' => 'NotifyUserID',
                'Format' => 'Format'
            );
            $Ex->ExportTable('Activity', "select *,
               '{RegardingUserID,you} &rarr; {ActivityUserID,you}' as HeadlineFormat,
               FROM_UNIXTIME(dateline) as DateInserted,
               FROM_UNIXTIME(dateline) as DateUpdated,
               INET_NTOA(ipaddress) as InsertIPAddress,
               postuserid as InsertUserID,
               -1 as NotifyUserID,
               'BBCode' as Format,
               'WallPost' as ActivityType
            from :_visitormessage
            where state='visible'
               $MinDiscussionWhere", $Activity_Map);
        }

        $this->_ExportConversations($MinDate);

        $this->_ExportPolls();

        // Media
        if ($Ex->Exists('attachment')) {
            $this->ExportMedia($MinDiscussionID);
        }

        // IP Ban list
        $IpBanlist = $this->Param('ipbanlist');
        if ($IpBanlist) {

            $Ex->Query("DROP TABLE IF EXISTS `z_ipbanlist` ");
            $Ex->Query("CREATE TABLE `z_ipbanlist` (
            `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
            `ipaddress` varchar(50) DEFAULT NULL,
           PRIMARY KEY (`id`),
           UNIQUE KEY `ipaddress` (`ipaddress`)

         ) ENGINE=InnoDB DEFAULT CHARSET=utf8");

            $Result = $Ex->Query("select value from :_setting where varname = 'banip'");
            $Row = mysql_fetch_assoc($Result);

            if ($Row) {
                $InsertSql = 'INSERT IGNORE INTO `z_ipbanlist` (`ipaddress`) values ';
                $IpString = str_replace("\r", "", $Row['value']);
                $IPs = explode("\n", $IpString);
                foreach ($IPs as $IP) {
                    $IP = trim($IP);
                    if (empty($IP)) {
                        continue;
                    }
                    $InsertSql .= '(\'' . mysql_real_escape_string($IP) . '\'), ';
                }
                $InsertSql = substr($InsertSql, 0, -2);
                $Ex->Query($InsertSql);

                $Ban_Map = array();
                $Ex->ExportTable('Ban',
                    "select 'IPAddress' as BanType, ipaddress as BanValue, 'Imported ban' as Notes, NOW() as DateInserted
                  FROM `z_ipbanlist`",
                    $Ban_Map);

                $Ex->Query('DROP table if exists `z_ipbanlist` ');

            }
        }


        // End
        $Ex->EndExport();
    }

    protected function _ExportConversations($MinDate) {
        $Ex = $this->Ex;

        if ($MinDate) {
            $MinID = $Ex->GetValue("
            select max(pmtextid)
            from :_pmtext
            where dateline < $MinDate
            ", false);
        } else {
            $MinID = false;
        }
        $MinWhere = '';

        $Ex->Query('drop table if exists z_pmto');
        $Ex->Query('create table z_pmto (
        pmtextid int unsigned,
        userid int unsigned,
        primary key(pmtextid, userid)
      )');

        if ($MinID) {
            $MinWhere = "where pmtextid > $MinID";
        }

        $Ex->Query("insert ignore z_pmto (
        pmtextid,
        userid
      )
      select
        pmtextid,
        userid
      from :_pm
      $MinWhere");

        $Ex->Query("insert ignore z_pmto (
        pmtextid,
        userid
      )
      select
        pmtextid,
        fromuserid
      from :_pmtext
      $MinWhere;");

        $Ex->Query("insert ignore z_pmto (
        pmtextid,
        userid
      )
      select
        pm.pmtextid,
        r.userid
      from :_pm pm
      join :_pmreceipt r
        on pm.pmid = r.pmid
      $MinWhere;");

        $Ex->Query("insert ignore z_pmto (
        pmtextid,
        userid
      )
      select
        pm.pmtextid,
        r.touserid
      from :_pm pm
      join :_pmreceipt r
        on pm.pmid = r.pmid
      $MinWhere;");

        $Ex->Query('drop table if exists z_pmto2;');
        $Ex->Query('create table z_pmto2 (
        pmtextid int unsigned,
        userids varchar(250),
        primary key (pmtextid)
      );');

        $Ex->Query('insert z_pmto2 (
        pmtextid,
        userids
      )
      select
        pmtextid,
        group_concat(userid order by userid)
      from z_pmto t
      group by t.pmtextid;');

        $Ex->Query('drop table if exists z_pmtext;');
        $Ex->Query('create table z_pmtext (
        pmtextid int unsigned,
        title varchar(250),
        title2 varchar(250),
        userids varchar(250),
        group_id int unsigned
      );');

        $Ex->Query("insert z_pmtext (
        pmtextid,
        title,
        title2
      )
      select
        pmtextid,
        title,
        case when title like 'Re: %' then trim(substring(title, 4)) else title end as title2
      from :_pmtext pm
      $MinWhere;");
        $Ex->Query('create index z_idx_pmtext on z_pmtext (pmtextid);');

        $Ex->Query('update z_pmtext pm
      join z_pmto2 t
        on pm.pmtextid = t.pmtextid
      set pm.userids = t.userids;');

        // A conversation is a group of pmtexts with the same title and same users.

        $Ex->Query('drop table if exists z_pmgroup;');
        $Ex->Query('create table z_pmgroup (
        group_id int unsigned,
        title varchar(250),
        userids varchar(250)
      );');

        $Ex->Query("insert z_pmgroup (
        group_id,
        title,
        userids
      )
      select
        min(pm.pmtextid),
        pm.title2,
        t2.userids
      from z_pmtext pm
      join z_pmto2 t2
        on pm.pmtextid = t2.pmtextid
      group by pm.title2, t2.userids;");

        $Ex->Query('create index z_idx_pmgroup on z_pmgroup (title, userids);');
        $Ex->Query('create index z_idx_pmgroup2 on z_pmgroup (group_id);');

        $Ex->Query('update z_pmtext pm
      join z_pmgroup g
        on pm.title2 = g.title and pm.userids = g.userids
      set pm.group_id = g.group_id;');

        // Conversations.
        $Conversation_Map = array(
            'pmtextid' => 'ConversationID',
            'fromuserid' => 'InsertUserID',
            'title2' => array('Column' => 'Subject', 'Type' => 'varchar(250)')
        );
        $Ex->ExportTable('Conversation',
            'select
         pm.*,
         g.title as title2,
         FROM_UNIXTIME(pm.dateline) as DateInserted
       from :_pmtext pm
       join z_pmgroup g
         on g.group_id = pm.pmtextid', $Conversation_Map);

        // Coversation Messages.
        $ConversationMessage_Map = array(
            'pmtextid' => 'MessageID',
            'group_id' => 'ConversationID',
            'message' => 'Body',
            'fromuserid' => 'InsertUserID'
        );
        $Ex->ExportTable('ConversationMessage',
            "select
         pm.*,
         pm2.group_id,
         'BBCode' as Format,
         FROM_UNIXTIME(pm.dateline) as DateInserted
       from :_pmtext pm
       join z_pmtext pm2
         on pm.pmtextid = pm2.pmtextid", $ConversationMessage_Map);

        // User Conversation.
        $UserConversation_Map = array(
            'userid' => 'UserID',
            'group_id' => 'ConversationID'
        );
        $Ex->ExportTable('UserConversation',
            "select
         g.group_id,
         t.userid
       from z_pmto t
       join z_pmgroup g
         on g.group_id = t.pmtextid;", $UserConversation_Map);

        $Ex->Query('drop table if exists z_pmto');
        $Ex->Query('drop table if exists z_pmto2;');
        $Ex->Query('drop table if exists z_pmtext;');
        $Ex->Query('drop table if exists z_pmgroup;');
    }

    /**
     * Converts database blobs into files.
     *
     * Creates /attachments and /customavatars folders in the same directory as the export file.
     *
     * @param bool $Attachments Whether to move attachments.
     * @param bool $CustomAvatars Whether to move avatars.
     */
    public function ExportBlobs($Attachments = true, $CustomAvatars = true) {
        $Ex = $this->Ex;
        $Extension = ExportModel::FileExtension('a.filename');

        if ($Attachments) {
            $Identity = ($Ex->Exists('attachment',
                    array('contenttypeid', 'contentid')) === true) ? 'f.filedataid' : 'f.attachmentid';
            $Sql = "select
               f.filedata,
               $Extension as extension,
               concat('attachments/', f.userid, '/', $Identity, '.', lower(extension)) as Path
               from ";

            // Table is dependent on vBulletin version (v4+ is filedata, v3 is attachment)
            if ($Ex->Exists('attachment', array('contenttypeid', 'contentid')) === true) {
                $Sql .= ":_filedata f left join :_attach a on a.filedataid = f.filedataid";
            } else {
                $Sql .= ":_attachment f";
            }

            $Ex->ExportBlobs($Sql, 'filedata', 'Path');
        }

        if ($CustomAvatars) {
            $Sql = "select
               a.filedata,
               case when a.userid is not null then concat('customavatars/', a.userid % 100,'/avatar_', a.userid, right(a.filename, instr(reverse(a.filename), '.')))
                  else null end as customphoto
            from :_customavatar a
            ";
            $Sql = str_replace('u.userid', 'a.userid', $Sql);
            $Ex->ExportBlobs($Sql, 'filedata', 'customphoto', 80);
        }

        // Export the group icons no matter what.
        if ($Attachments || $CustomAvatars && $Ex->Exists('socialgroupicon', 'thumbnail_filedata')) {
            $Sql = "
            select
               i.filedata,
               concat('vb/groupicons/', i.groupid, '.', i.extension) as path
            from :_socialgroupicon i";
            $Ex->ExportBlobs($Sql, 'filedata', 'path');
        }
    }

    /**
     * Export the attachments as Media.
     *
     * In vBulletin 4.x, the filedata table was introduced.
     */
    public function ExportMedia($MinDiscussionID = false) {
        $Ex = $this->Ex;

        if ($MinDiscussionID) {
            $DiscussionWhere = "and t.threadid > $MinDiscussionID";
        } else {
            $DiscussionWhere = '';
        }
        $Media_Map = array(
            'attachmentid' => 'MediaID',
            'filename' => 'Name',
            'filesize' => 'Size',
            'userid' => 'InsertUserID',
            'extension' => array('Column' => 'Type', 'Filter' => array($this, 'BuildMimeType')),
            'filehash' => array('Column' => 'Path', 'Filter' => array($this, 'BuildMediaPath')),
            'height' => array('Column' => 'ImageHeight', 'Filter' => array($this, 'BuildMediaDimension')),
            'width' => array('Column' => 'ImageWidth', 'Filter' => array($this, 'BuildMediaDimension')),
        );

        // Add hash fields if they exist (from 2.x)
        $AttachColumns = array('hash', 'filehash');
        $Missing = $Ex->Exists('attachment', $AttachColumns);
        $AttachColumnsString = '';
        foreach ($AttachColumns as $ColumnName) {
            if (in_array($ColumnName, $Missing)) {
                $AttachColumnsString .= ", null as $ColumnName";
            } else {
                $AttachColumnsString .= ", a.$ColumnName";
            }
        }
        // Do the export
        if ($Ex->Exists('attachment', array('contenttypeid', 'contentid')) === true) {
            // Exporting 4.x with 'filedata' table.
            // Build an index to join on.
            $Result = $Ex->Query('show index from :_thread where Key_name = "ix_thread_firstpostid"');
            if (!$Result) {
                $Ex->Query('create index ix_thread_firstpostid on :_thread (firstpostid)');
            }
            $MediaSql = "select
            case when t.threadid is not null then 'discussion' when ct.class = 'Post' then 'comment' when ct.class = 'Thread' then 'discussion' else ct.class end as ForeignTable,
            case when t.threadid is not null then t.threadid else a.contentid end as ForeignID,
            FROM_UNIXTIME(a.dateline) as DateInserted,
            'local' as StorageMethod,
            a.*,
            f.extension, f.filesize $AttachColumnsString,
            f.width, f.height
         from :_attachment a
         join :_contenttype ct
            on a.contenttypeid = ct.contenttypeid
         join :_filedata f
            on f.filedataid = a.filedataid
         left join :_thread t
            on t.firstpostid = a.contentid and a.contenttypeid = 1
         where a.contentid > 0
            $DiscussionWhere";
            $Ex->ExportTable('Media', $MediaSql, $Media_Map);

        } else {
            // Exporting 3.x without 'filedata' table.
            // Do NOT grab every field to avoid 'filedata' blob in 3.x.
            // Left join 'attachment' because we can't left join 'thread' on firstpostid (not an index).
            // Lie about the height & width to spoof FileUpload serving generic thumbnail if they aren't set.
            $Extension = ExportModel::FileExtension('a.filename');
            $MediaSql = "select a.attachmentid, a.filename, $Extension as extension $AttachColumnsString, a.userid,
               'local' as StorageMethod,
               'discussion' as ForeignTable,
               t.threadid as ForeignID,
               FROM_UNIXTIME(a.dateline) as DateInserted,
               '1' as height,
               '1' as width
            from :_thread t
               left join :_attachment a ON a.postid = t.firstpostid
            where a.attachmentid > 0

            union all

            select a.attachmentid, a.filename, $Extension as extension $AttachColumnsString, a.userid,
               'local' as StorageMethod,
               'comment' as ForeignTable,
               a.postid as ForeignID,
               FROM_UNIXTIME(a.dateline) as DateInserted,
               '1' as height,
               '1' as width
            from :_post p
               inner join :_thread t ON p.threadid = t.threadid
               left join :_attachment a ON a.postid = p.postid
            where p.postid <> t.firstpostid and  a.attachmentid > 0
            ";
            $Ex->ExportTable('Media', $MediaSql, $Media_Map);
        }

        // files named .attach need to be named properly.
        // file needs to be renamed and db updated.
        // if its an images; we need to include .thumb
        $attachmentPath = $this->Param('filepath');
        if ($attachmentPath) {
            $missingFiles = array();
            if (is_dir($attachmentPath)) {
                $Ex->Comment("Checking files");
                $Result = $Ex->Query($MediaSql);
                while ($row = mysql_fetch_assoc($Result)) {
                    $filePath = $this->BuildMediaPath('', '', $row);
                    $cdn = $this->Param('cdn', '');

                    if (!empty($cdn)) {
                        $filePath = str_replace($cdn, '', $filePath);
                    }
                    $fullPath = $attachmentPath . $filePath;
                    if (file_exists($fullPath)) {
                        continue;
                    }

                    //check if named .attach
                    $p = explode('.', $fullPath);
                    $attachFilename = str_replace(end($p), 'attach', $fullPath);
                    if (file_exists($attachFilename)) {
                        // rename file
                        rename($attachFilename, $fullPath);
                        continue;
                    }

                    //check if md5 hash in root
                    if (GetValue('hash', $row)) {
                        $md5Filename = $attachmentPath . $row['hash'] . '.' . $row['extension'];
                        if (file_exists($md5Filename)) {
                            // rename file
                            rename($md5Filename, $fullPath);
                            continue;
                        }
                    }

                    $missingFiles[] = $filePath;

                }
            } else {
                $Ex->Comment('Attachment Path not found');
            }
            $totalMissingFiles = count($missingFiles);
            if ($totalMissingFiles > 0) {
                $Ex->Comment('Missing files detected.  See ./missing_files.txt for full list.');
                $Ex->Comment(sprintf('Total missing files %d', $totalMissingFiles));
                file_put_contents('missing-files.txt', implode("\n", $missingFiles));
            }

        }
    }

    function _ExportPolls() {
        $Ex = $this->Ex;
        $fp = $Ex->File;
//      $fp = fopen('php://output', 'ab');

        $Poll_Map = array(
            'pollid' => 'PollID',
            'question' => 'Name',
            'threadid' => 'DiscussionID',
            'anonymous' => 'Anonymous',
            'dateline' => array('Column' => 'DateInserted', 'Filter' => 'TimestampToDate'),
            'postuserid' => 'InsertUserID'
        );
        $Ex->ExportTable('Poll',
            "select
            p.*,
            t.threadid,
            t.postuserid,
            !p.public as anonymous
         from :_poll p
         join :_thread t
            on p.pollid = t.pollid", $Poll_Map);

        $PollOption_Map = array(
            'optionid' => 'PollOptionID', // calc
            'pollid' => 'PollID',
            'body' => 'Body', // calc
            'sort' => 'Sort', // calc
            'dateline' => array('Column' => 'DateInserted', 'Filter' => 'TimestampToDate'),
            'postuserid' => 'InsertUserID'
        );
        $Sql = "select
         p.*,
         'BBCode' as Format,
         t.postuserid
      from :_poll p
      join :_thread t
         on p.pollid = t.pollid";

        // Some custom programming needs to be done here so let's do that.
        $ExportStructure = $Ex->GetExportStructure($PollOption_Map, 'PollOption', $PollOption_Map);
        $RevMappings = $Ex->FlipMappings($PollOption_Map);

        $Ex->WriteBeginTable($fp, 'PollOption', $ExportStructure);

        $r = $Ex->Query($Sql);
        $RowCount = 0;
        while ($Row = mysql_fetch_assoc($r)) {
            $Options = explode('|||', $Row['options']);

            foreach ($Options as $i => $Option) {
                $Row['optionid'] = $Row['pollid'] * 1000 + $i + 1;
                $Row['body'] = $Option;
                $Row['sort'] = $i;

                $Ex->WriteRow($fp, $Row, $ExportStructure, $RevMappings);

                $RowCount++;
            }
        }
        mysql_free_result($r);
        $Ex->WriteEndTable($fp);
        $Ex->Comment("Exported Table: PollOption ($RowCount rows)");

        $PollVote_Map = array(
            'userid' => 'UserID',
            'optionid' => 'PollOptionID',
            'votedate' => array('Column' => 'DateInserted', 'Filter' => 'TimestampToDate')
        );
        $Ex->ExportTable('PollVote',
            "select pv.*, pollid * 1000 + voteoption as optionid
         from :_pollvote pv", $PollVote_Map);
    }

    /**
     * Filter used by $Media_Map to build attachment path.
     *
     * vBulletin 3.0+ organizes its attachments by descending 1 level per digit
     * of the userid, named as the attachmentid with a '.attach' extension.
     * Example: User #312's attachments would be in the directory /3/1/2.
     *
     * In vBulletin 2.x, files were stored as an md5 hash in the root
     * attachment directory with a '.file' extension. Existing files were not
     * moved when upgrading to 3.x so older forums will need those too.
     *
     * @access public
     * @see ExportModel::_ExportTable
     *
     * @param string $Value Ignored.
     * @param string $Field Ignored.
     * @param array $Row Contents of the current attachment record.
     * @return string Future path to file.
     */
    function BuildMediaPath($Value, $Field, $Row) {
        if (isset($Row['hash']) && $Row['hash'] != '') {
            // Old school! (2.x)
            $FilePath = $Row['hash'] . '.' . $Row['extension'];
        } else { // Newer than 3.0
            // Build user directory path
            $n = strlen($Row['userid']);
            $DirParts = array();
            for ($i = 0; $i < $n; $i++) {
                $DirParts[] = $Row['userid']{$i};
            }

            // 3.x uses attachmentid, 4.x uses filedataid
            $Identity = (isset($Row['filedataid'])) ? $Row['filedataid'] : $Row['attachmentid'];

            // If we're exporting blobs, simplify the folder structure.
            // Otherwise, we need to preserve vBulletin's eleventy subfolders.
            $Separator = ($this->Param('files', false)) ? '' : '/';
            $FilePath = implode($Separator, $DirParts) . '/' . $Identity . '.' . $Row['extension'];
        }

        // Use 'cdn' parameter to define path prefix, ex: ?cdn=~cf/
        $Cdn = $this->Param('cdn', '');

        return $Cdn . 'attachments/' . $FilePath;
    }

    /**
     * Don't allow image dimensions to creep in for non-images.
     *
     * @param $Value
     * @param $Field
     * @param $Row
     */
    function BuildMediaDimension($Value, $Field, $Row) {
        // Non-images get no height/width
        $Ex = $this->Ex;
        if ($Ex->Exists('attachment', array('extension'))) {
            $extension = $Row['extension'];
        } else {
            $extension = end(explode('.', $Row['filename']));
        }
        if (in_array(strtolower($extension), array('jpg', 'gif', 'png', 'jpeg'))) {
            return null;
        }

        return $Value;
    }

    /**
     * Set valid MIME type for images.
     *
     * @access public
     * @see ExportModel::_ExportTable
     *
     * @param string $Value Extension from vBulletin.
     * @param string $Field Ignored.
     * @param array $Row Ignored.
     * @return string Extension or accurate MIME type.
     */
    function BuildMimeType($Value, $Field, $Row) {
        switch (strtolower($Value)) {
            case 'jpg':
            case 'gif':
            case 'png':
                $Value = 'image/' . $Value;
                break;
            case 'pdf':
            case 'zip':
                $Value = 'application/' . $Value;
                break;
            case 'doc':
                $Value = 'application/msword';
                break;
            case 'xls':
                $Value = 'application/vnd.ms-excel';
                break;
            case 'txt':
                $Value = 'text/plain';
                break;
        }

        return $Value;
    }

    /**
     * Determine if this usergroup could likely sign in to forum based on its name.
     *
     * @param $Value
     * @param $Field
     * @param $Row
     * @return bool
     */
    function SignInPermission($Value, $Field, $Row) {
        $Result = true;
        if (stripos($Row['title'], 'unregistered') !== false) {
            $Result = false;
        } elseif (stripos($Row['title'], 'banned') !== false) {
            $Result = false;
        }

        return $Result;
    }

    /**
     * Retrieve a value from the vBulletin setting table.
     *
     * @param string $Name Variable for which we want the value.
     * @return mixed Value or FALSE if not found.
     */
    function GetConfig($Name) {
        $Sql = "select * from :_setting where varname = '$Name'";
        $Result = $this->Ex->Query($Sql, true);
        if ($Row = mysql_fetch_assoc($Result)) {
            return $Row['value'];
        }

        return false;
    }

    /**
     * @param $Value
     * @param $Field
     * @param $Row
     * @return bool
     */
    function FilterPermissions($Value, $Field, $Row) {
        if (!isset(self::$Permissions2[$Field])) {
            return 0;
        }

        $Column = self::$Permissions2[$Field][0];
        $Mask = self::$Permissions2[$Field][1];

        $Value = ($Row[$Column] & $Mask) == $Mask;

        return $Value;
    }

    /**
     * @param $ColumnGroups
     * @param $Map
     */
    function AddPermissionColumns($ColumnGroups, &$Map) {
        $Permissions2 = array();

        foreach ($ColumnGroups as $ColumnGroup => $Columns) {
            foreach ($Columns as $Mask => $ColumnArray) {
                $ColumnArray = (array)$ColumnArray;
                foreach ($ColumnArray as $Column) {
                    $Map[$Column] = array(
                        'Column' => $Column,
                        'Type' => 'tinyint(1)',
                        'Filter' => array($this, 'FilterPermissions')
                    );

                    $Permissions2[$Column] = array($ColumnGroup, $Mask);
                }
            }
        }
        self::$Permissions2 = $Permissions2;
    }
}

?>
<?php
/**
 * vBulletin 5 Connect exporter tool.
 *
 * Add this 301 route to sidestep vB4->5 upgrade category redirects.
 *    Expression: forumdisplay\.php\?([0-9]+)-([a-zA-Z0-9-_]+)
 *    Target: /categories/$2
 *
 * @copyright Vanilla Forums Inc. 2014
 * @license Proprietary
 * @package VanillaPorter
 */

$Supported['vbulletin5'] = array('name' => 'vBulletin 5 Connect', 'prefix' => 'vb_');
$Supported['vbulletin5']['CommandLine'] = array(//'noexport' => array('Whether or not to skip the export.', 'Sx' => '::'),
);
$Supported['vbulletin5']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Avatars' => 1,
    'Attachments' => 1,
    'PrivateMessages' => 1,
    'Bookmarks' => 1,
    'Ranks' => 1,
    'Passwords' => 1,
);

class Vbulletin5 extends Vbulletin {
    /** @var array Required tables => columns. */
    protected $SourceTables = array(
        'contenttype' => array('contenttypeid', 'class'),
        'node' => array('nodeid', 'description', 'title', 'description', 'userid', 'publishdate'),
        'text' => array('nodeid', 'rawtext'),
        'user' => array(
            'userid',
            'username',
            'email',
            'referrerid',
            'timezoneoffset',
            'posts',
            'birthday_search',
            'joindate',
            'lastvisit',
            'lastactivity',
            'membergroupids',
            'usergroupid',
            'usertitle',
            'avatarid'
        ),
        'userfield' => array('userid'),
        'usergroup' => array('usergroupid', 'title', 'description'),
        'usertitle' => array(),
    );

    /**
     *
     * @param ExportModel $Ex
     */
    public function ForumExport($Ex) {
        // Determine the character set
        $CharacterSet = $Ex->GetCharacterSet('nodes');
        if ($CharacterSet) {
            $Ex->CharacterSet = $CharacterSet;
        }

        $Ex->BeginExport('', 'vBulletin 5 Connect');

        $this->ExportBlobs(
            $this->Param('files'),
            $this->Param('avatars')
        );

        if ($this->Param('noexport')) {
            $Ex->Comment('Skipping the export.');
            $Ex->EndExport();

            return;
        }

        $cdn = $this->Param('cdn', '');


        // Grab all of the ranks.
        $Ranks = $Ex->Get("select * from :_usertitle order by minposts desc", 'usertitleid');


        // Users
        $User_Map = array(
            'userid' => 'UserID',
            'username' => 'Name',
            'password2' => 'Password',
            'email' => 'Email',
            'referrerid' => 'InviteUserID',
            'timezoneoffset' => 'HourOffset',
            'ipaddress' => 'LastIPAddress',
            'ipaddress2' => 'InsertIPAddress',
            'usertitle' => 'Title',
            'posts' => array(
                'Column' => 'RankID',
                'Filter' => function ($Value) use ($Ranks) {
                    // Look  up the posts in the ranks table.
                    foreach ($Ranks as $RankID => $Row) {
                        if ($Value >= $Row['minposts']) {
                            return $RankID;
                        }
                    }

                    return null;
                }
            )
        );

        // Use file avatar or the result of our blob export?
        if ($this->GetConfig('usefileavatar')) {
            $User_Map['filephoto'] = 'Photo';
        } else {
            $User_Map['customphoto'] = 'Photo';
        }

        // vBulletin 5.1 changes the hash to crypt(md5(password), hash).
        // Switches from password & salt to token (and scheme & secret).
        // The scheme appears to be crypt()'s default and secret looks uselessly redundant.
        if ($Ex->Exists('user', 'token') !== true) {
            $PasswordSQL = "concat(`password`, salt) as password2, 'vbulletin' as HashMethod,";
        } else {
            // vB 5.1 already concats the salt to the password as token, BUT ADDS A SPACE OF COURSE.
            $PasswordSQL = "replace(token, ' ', '') as password2,
         case when scheme = 'legacy' then 'vbulletin' else 'vbulletin5' end as HashMethod,";
        }

        $Ex->ExportTable('User', "select u.*,
            ipaddress as ipaddress2,
            $PasswordSQL
            DATE_FORMAT(birthday_search,GET_FORMAT(DATE,'ISO')) as DateOfBirth,
            FROM_UNIXTIME(joindate) as DateFirstVisit,
            FROM_UNIXTIME(lastvisit) as DateLastActive,
            FROM_UNIXTIME(joindate) as DateInserted,
            FROM_UNIXTIME(lastactivity) as DateUpdated,
            case when avatarrevision > 0 then concat('$cdn', 'userpics/avatar', u.userid, '_', avatarrevision, '.gif')
                 when av.avatarpath is not null then av.avatarpath
                 else null
                 end as filephoto,
            {$this->AvatarSelect},
            case when ub.userid is not null then 1 else 0 end as Banned
         from :_user u
         left join :_customavatar a
            on u.userid = a.userid
         left join :_avatar av
            on u.avatarid = av.avatarid
         left join :_userban ub
              on u.userid = ub.userid and ub.liftdate <= now() ",
            $User_Map);  // ":_" will be replace by database prefix
        //ipdata - contains all IP records for user actions: view,visit,register,logon,logoff


        // Roles
        $Role_Map = array(
            'usergroupid' => 'RoleID',
            'title' => 'Name',
            'description' => 'Description'
        );
        $Ex->ExportTable('Role', 'select * from :_usergroup', $Role_Map);


        // UserRoles
        $UserRole_Map = array(
            'userid' => 'UserID',
            'usergroupid' => 'RoleID'
        );
        $Ex->Query("CREATE TEMPORARY TABLE VbulletinRoles (userid INT UNSIGNED NOT NULL, usergroupid INT UNSIGNED NOT NULL)");
        # Put primary groups into tmp table
        $Ex->Query("insert into VbulletinRoles (userid, usergroupid) select userid, usergroupid from :_user");
        # Put stupid CSV column into tmp table
        $SecondaryRoles = $Ex->Query("select userid, usergroupid, membergroupids from :_user", true);
        if (is_resource($SecondaryRoles)) {
            while (($Row = @mysql_fetch_assoc($SecondaryRoles)) !== false) {
                if ($Row['membergroupids'] != '') {
                    $Groups = explode(',', $Row['membergroupids']);
                    foreach ($Groups as $GroupID) {
                        $Ex->Query("insert into VbulletinRoles (userid, usergroupid) values({$Row['userid']},{$GroupID})",
                            true);
                    }
                }
            }
        }
        # Export from our tmp table and drop
        $Ex->ExportTable('UserRole', 'select distinct userid, usergroupid from VbulletinRoles', $UserRole_Map);
        $Ex->Query("DROP TABLE IF EXISTS VbulletinRoles");


        // Permissions.
        $Permissions_Map = array(
            'usergroupid' => 'RoleID',
            'title' => array('Column' => 'Garden.SignIn.Allow', 'Filter' => array($this, 'SignInPermission')),
            'genericpermissions' => array('Column' => 'GenericPermissions', 'type' => 'int'),
            'forumpermissions' => array('Column' => 'ForumPermissions', 'type' => 'int')
        );
        $this->AddPermissionColumns(self::$Permissions, $Permissions_Map);
        $Ex->ExportTable('Permission', 'select * from :_usergroup', $Permissions_Map);


        // UserMeta
        /*$Ex->Query("CREATE TEMPORARY TABLE VbulletinUserMeta (`UserID` INT NOT NULL ,`Name` VARCHAR( 255 ) NOT NULL ,`Value` text NOT NULL)");
        # Standard vB user data
        $UserFields = array('usertitle' => 'Title', 'homepage' => 'Website', 'skype' => 'Skype', 'styleid' => 'StyleID');
        foreach($UserFields as $Field => $InsertAs)
           $Ex->Query("insert into VbulletinUserMeta (UserID, Name, Value) select userid, 'Profile.$InsertAs', $Field from :_user where $Field != ''");
        # Dynamic vB user data (userfield)
        $ProfileFields = $Ex->Query("select varname, text from :_phrase where product='vbulletin' and fieldname='cprofilefield' and varname like 'field%_title'");
        if (is_resource($ProfileFields)) {
           $ProfileQueries = array();
           while ($Field = @mysql_fetch_assoc($ProfileFields)) {
              $Column = str_replace('_title', '', $Field['varname']);
              $Name = preg_replace('/[^a-zA-Z0-9_-\s]/', '', $Field['text']);
              $ProfileQueries[] = "insert into VbulletinUserMeta (UserID, Name, Value)
                 select userid, 'Profile.".$Name."', ".$Column." from :_userfield where ".$Column." != ''";
           }
           foreach ($ProfileQueries as $Query) {
              $Ex->Query($Query);
           }
        }*/


        // Ranks
        $Rank_Map = array(
            'usertitleid' => 'RankID',
            'title' => 'Name',
            'title2' => 'Label',
            'minposts' => array(
                'Column' => 'Attributes',
                'Filter' => function ($Value) {
                    $Result = array(
                        'Criteria' => array(
                            'CountPosts' => $Value
                        )
                    );

                    return serialize($Result);
                }
            ),
            'level' => array(
                'Column' => 'Level',
                'Filter' => function ($Value) {
                    static $Level = 1;

                    return $Level++;
                }
            )
        );
        $Ex->ExportTable('Rank', "
         select ut.*, ut.title as title2, 0 as level
         from :_usertitle ut
         order by ut.minposts", $Rank_Map);


        /// Signatures
        // usertextfields.signature

        // Ignore
        // usertextfields.ignorelist

        /// Notes

        /// Warnings

        /// Activity (Wall)


        // Category.
        $Channels = array();
        $CategoryIDs = array();
        $HomeID = 0;
        $PrivateMessagesID = 0;

        // Filter Channels down to Forum tree
        $ChannelResult = $Ex->Query("select n.* from :_node n
         left join :_contenttype c on n.contenttypeid = c.contenttypeid
         where c.class = 'Channel'");

        while ($Channel = mysql_fetch_array($ChannelResult)) {
            $Channels[$Channel['nodeid']] = $Channel;
            if ($Channel['title'] == 'Forum') {
                $HomeID = $Channel['nodeid'];
            }
            if ($Channel['title'] == 'Private Messages') {
                $PrivateMessagesID = $Channel['nodeid'];
            }
        }

        if (!$HomeID) {
            exit ("Missing node 'Forum'");
        }

        // Go thru the category list 6 times to build a (up to) 6-deep hierarchy
        $CategoryIDs[] = $HomeID;
        for ($i = 0; $i < 6; $i++) {
            foreach ($Channels as $Channel) {
                if (in_array($Channel['nodeid'], $CategoryIDs)) {
                    continue;
                }
                if (in_array($Channel['parentid'], $CategoryIDs)) {
                    $CategoryIDs[] = $Channel['nodeid'];
                }
            }
        }
        // Drop 'Forum' from the tree
        if (($key = array_search($HomeID, $CategoryIDs)) !== false) {
            unset($CategoryIDs[$key]);
        }

        $Category_Map = array(
            'nodeid' => 'CategoryID',
            'title' => 'Name',
            'description' => 'Description',
            'userid' => 'InsertUserID',
            'parentid' => 'ParentCategoryID',
            'urlident' => 'UrlCode',
            'displayorder' => array('Column' => 'Sort', 'Type' => 'int'),
            'lastcontentid' => 'LastDiscussionID',
            'textcount' => 'CountComments', // ???
            'totalcount' => 'CountDiscussions', // ???
        );

        // Categories are Channels that were found in the Forum tree
        // If parent was 'Forum' set the parent to Root instead (-1)
        $Ex->ExportTable('Category', "select n.*,
         FROM_UNIXTIME(publishdate) as DateInserted,
         if(parentid={$HomeID},-1,parentid) as parentid
      from :_node n
      where nodeid in (" . implode(',', $CategoryIDs) . ")
      ", $Category_Map);


        /// Permission
        //permission - nodeid,(user)groupid, and it gets worse from there.


        // Discussion.
        $Discussion_Map = array(
            'nodeid' => 'DiscussionID',
            'title' => 'Name',
            'userid' => 'InsertUserID',
            'rawtext' => 'Body',
            'parentid' => 'CategoryID',
            'lastcontentid' => 'LastCommentID',
            'lastauthorid' => 'LastCommentUserID',
            // htmlstate - on,off,on_nl2br
            // infraction
            // attach
            // reportnodeid
        );

        $Ex->ExportTable('Discussion', "select n.*,
         t.rawtext,
         'BBCode' as Format,
         FROM_UNIXTIME(publishdate) as DateInserted,
         v.count as CountViews,
         convert(ABS(open-1),char(1)) as Closed,
         if(convert(sticky,char(1))>0,2,0) as Announce
      from :_node n
         left join :_contenttype c on n.contenttypeid = c.contenttypeid
         left join :_nodeview v on v.nodeid = n.nodeid
         left join :_text t on t.nodeid = n.nodeid
      where c.class = 'Text'
         and n.showpublished = 1
         and parentid in (" . implode(',', $CategoryIDs) . ")
      ", $Discussion_Map);


        // UserDiscussion
        $UserDiscussion_Map = array(
            'discussionid' => 'DiscussionID',
            'userid' => 'InsertUserID',
        );
        // Should be able to inner join `discussionread` for DateLastViewed
        // but it's blank in my sample data so I don't trust it.
        $Ex->ExportTable('UserDiscussion', "select s.*,
         1 as Bookmarked,
         NOW() as DateLastViewed
      from :_subscribediscussion s
      ", $UserDiscussion_Map);


        // Comment.
        $Comment_Map = array(
            'nodeid' => 'CommentID',
            'rawtext' => 'Body',
            'userid' => 'InsertUserID',
            'parentid' => 'DiscussionID',
        );

        $Ex->ExportTable('Comment', "select n.*,
         t.rawtext,
         'BBCode' as Format,
         FROM_UNIXTIME(publishdate) as DateInserted
      from :_node n
         left join :_contenttype c on n.contenttypeid = c.contenttypeid
         left join :_text t on t.nodeid = n.nodeid
      where c.class = 'Text'
         and n.showpublished = 1
         and parentid not in (" . implode(',', $CategoryIDs) . ")
      ", $Comment_Map);


        /// Drafts
        // autosavetext table


        /// Poll
        // class='Poll'


        // Media
        $Media_Map = array(
            'nodeid' => 'MediaID',
            'filename' => 'Name',
            'extension' => array('Column' => 'Type', 'Filter' => array($this, 'BuildMimeType')),
            'Path2' => array('Column' => 'Path', 'Filter' => array($this, 'BuildMediaPath')),
            'ThumbPath2' => array('Column' => 'ThumbPath', 'Filter' => array($this, 'BuildMediaPath')),
            'width' => 'ImageWidth',
            'height' => 'ImageHeight',
            'filesize' => 'Size',
        );
        $Ex->ExportTable('Media', "select a.*,
         filename as Path2,
         filename as ThumbPath2,
         FROM_UNIXTIME(f.dateline) as DateInserted,
         f.userid as userid,
         f.userid as InsertUserID,
         if (f.width,f.width,1) as width,
         if (f.height,f.height,1) as height,
         n.parentid as ForeignID,
         f.extension,
         f.filesize,
         'local' as StorageMethod,
         if(n2.parentid in (" . implode(',', $CategoryIDs) . "),'discussion','comment') as ForeignTable
      from :_attach a
         left join :_node n on n.nodeid = a.nodeid
         left join :_filedata f on f.filedataid = a.filedataid
         left join :_node n2 on n.parentid = n2.nodeid
      where a.visible = 1
      ", $Media_Map);
        // left join :_contenttype c on n.contenttypeid = c.contenttypeid


        // Conversations.
        $Conversation_Map = array(
            'nodeid' => 'ConversationID',
            'userid' => 'InsertUserID',
            'totalcount' => 'CountMessages',
            'title' => 'Subject',
        );
        $Ex->ExportTable('Conversation',
            "select n.*,
            n.nodeid as FirstMessageID,
            FROM_UNIXTIME(n.publishdate) as DateInserted
          from :_node n
            left join :_text t on t.nodeid = n.nodeid
          where parentid = $PrivateMessagesID
            and t.rawtext <> ''", $Conversation_Map);


        // Conversation Messages.
        $ConversationMessage_Map = array(
            'nodeid' => 'MessageID',
            'rawtext' => 'Body',
            'userid' => 'InsertUserID'
        );
        $Ex->ExportTable('ConversationMessage',
            "select n.*,
            t.rawtext,
            'BBCode' as Format,
            if(n.parentid<>$PrivateMessagesID,n.parentid,n.nodeid) as ConversationID,
            FROM_UNIXTIME(n.publishdate) as DateInserted
          from :_node n
            left join :_contenttype c on n.contenttypeid = c.contenttypeid
            left join :_text t on t.nodeid = n.nodeid
          where c.class = 'PrivateMessage'
            and t.rawtext <> ''", $ConversationMessage_Map);


        // User Conversation.
        $UserConversation_Map = array(
            'userid' => 'UserID',
            'nodeid' => 'ConversationID',
            'deleted' => 'Deleted'
        );
        // would be nicer to do an intermediary table to sum s.msgread for uc.CountReadMessages
        $Ex->ExportTable('UserConversation',
            "select s.*
          from :_sentto s
          ;", $UserConversation_Map);


        /// Groups
        // class='SocialGroup'
        // class='SocialGroupDiscussion'
        // class='SocialGroupMessage'


        $Ex->EndExport();
    }
}

?>
<?php
/**
 * WebWiz exporter tool
 *
 * @copyright Vanilla Forums Inc. 2010
 * @license Proprietary
 * @package VanillaPorter
 */

$Supported['webwiz'] = array('name' => 'Web Wiz Forums', 'prefix' => 'tbl');
$Supported['webwiz']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Avatars' => 1,
    'PrivateMessages' => 1,
    'Signatures' => 1,
    'Passwords' => 1,
);

class WebWiz extends ExportController {
    /**
     *
     * @param ExportModel $Ex
     */
    public function ForumExport($Ex) {
        // Get the characterset for the comments.
        $CharacterSet = $Ex->GetCharacterSet('tblTopic');
        if ($CharacterSet) {
            $Ex->CharacterSet = $CharacterSet;
        }

        $Ex->BeginExport('', 'Web Wiz Forums');
        $Ex->SourcePrefix = 'tbl';

//      // Permissions.
//      $Permission_Map = array(
//          'group_id' => 'RoleID',
//          'can_access_cp' => 'Garden.Settings.View',
//          'can_access_edit' => 'Vanilla.Discussions.Edit',
//          'can_edit_all_comments' => 'Vanilla.Comments.Edit',
//          'can_access_admin' => 'Garden.Settings.Manage',
//          'can_admin_members' => 'Garden.Users.Edit',
//          'can_moderate_comments' => 'Garden.Moderation.Manage',
//          'can_view_profiles' => 'Garden.Profiles.View',
//          'can_post_comments' => 'Vanilla.Comments.Add',
//          'can_view_online_system' => 'Vanilla.Discussions.View',
//          'can_sign_in' => 'Garden.SignIn.Allow',
//          'can_view_profiles3' => 'Garden.Activity.View',
//          'can_post_comments2' => 'Vanilla.Discussions.Add'
//      );
//      $Permission_Map = $Ex->FixPermissionColumns($Permission_Map);
//      foreach ($Permission_Map as $Column => &$Info) {
//         if (is_array($Info) && isset($Info['Column']))
//            $Info['Filter'] = array($this, 'Bool');
//      }
//
//      $Ex->ExportTable('Permission', "
//         select
//            g.can_view_profiles as can_view_profiles2,
//            g.can_view_profiles as can_view_profiles3,
//            g.can_post_comments as can_post_comments2,
//            g.can_post_comments as can_sign_in,
//            case when can_access_admin = 'y' then 'all' when can_view_online_system = 'y' then 'view' end as _Permissions,
//            g.*
//         from forum_member_groups g
//      ", $Permission_Map);


        // User.
        $User_Map = array(
            'Author_ID' => 'UserID',
            'Username' => array('Column' => 'Name', 'Filter' => 'HTMLDecoder'),
            'Real_name' => array('Column' => 'FullName', 'Type' => 'varchar(50)', 'Filter' => 'HTMLDecoder'),
            'Password2' => 'Password',
            'Gender2' => 'Gender',
            'Author_email' => 'Email',
            'Photo2' => array('Column' => 'Photo', 'Filter' => 'HTMLDecoder'),
            'Login_IP' => 'LastIPAddress',
            'Banned' => 'Banned',
            'Join_date' => array('Column' => 'DateInserted'),
            'Last_visit' => array('Column' => 'DateLastActive'),
            'Location' => array('Column' => 'Location', 'Filter' => 'HTMLDecoder'),
            'DOB' => 'DateOfBirth',
            'Show_email' => 'ShowEmail'
        );
        $Ex->ExportTable('User', "
         select
            concat(Salt, '$', Password) as Password2,
            case u.Gender when 'Male' then 'm' when 'Female' then 'f' else 'u' end as Gender2,
         case when Avatar like 'http%' then Avatar when Avatar > '' then concat('webwiz/', Avatar) else null end as Photo2,
            'webwiz' as HashMethod,
            u.*
         from tblAuthor u
         ", $User_Map);


        // Role.
        $Role_Map = array(
            'Group_ID' => 'RoleID',
            'Name' => 'Name'
        );
        $Ex->ExportTable('Role', "
         select *
         from tblGroup", $Role_Map);

        // User Role.
        $UserRole_Map = array(
            'Author_ID' => 'UserID',
            'Group_ID' => 'RoleID'
        );
        $Ex->ExportTable('UserRole', "
         select u.*
         from tblAuthor u", $UserRole_Map);

        // UserMeta
        $Ex->ExportTable('UserMeta', "
         select
            Author_ID as UserID,
            'Plugin.Signatures.Sig' as `Name`,
            Signature as `Value`
         from tblAuthor
         where Signature <> ''");

        // Category.
        $Category_Map = array(
            'Forum_ID' => 'CategoryID',
            'Forum_name' => 'Name',
            'Forum_description' => 'Description',
            'Parent_ID' => 'ParentCategoryID',
            'Forum_order' => 'Sort'
        );
        $Ex->ExportTable('Category', "
         select
            f.Forum_ID,
            f.Cat_ID * 1000 as Parent_ID,
            f.Forum_order,
            f.Forum_name,
            f.Forum_description
         from tblForum f

         union all

         select
            c.Cat_ID * 1000,
            null,
            c.Cat_order,
            c.Cat_name,
            null
         from tblCategory c
         ", $Category_Map);

        // Discussion.
        $Discussion_Map = array(
            'Topic_ID' => 'DiscussionID',
            'Forum_ID' => 'CategoryID',
            'Author_ID' => 'InsertUserID',
            'Subject' => array('Column' => 'Name', 'Filter' => 'HTMLDecoder'),
            'IP_addr' => 'InsertIPAddress',
            'Message' => array('Column' => 'Body'),
            'Format' => 'Format',
            'Message_date' => array('Column' => 'DateInserted'),
            'No_of_views' => 'CountViews',
            'Locked' => 'Closed',

        );
        $Ex->ExportTable('Discussion', "
         select
            th.Author_ID,
            th.Message,
            th.Message_date,
            th.IP_addr,
            'Html' as Format,
            t.*
         from tblTopic t
         join tblThread th
            on t.Start_Thread_ID = th.Thread_ID", $Discussion_Map);

        // Comment.
        $Comment_Map = array(
            'Thread_ID' => 'CommentID',
            'Topic_ID' => 'DiscussionID',
            'Author_ID' => 'InsertUserID',
            'IP_addr' => 'InsertIPAddress',
            'Message' => array('Column' => 'Body'),
            'Format' => 'Format',
            'Message_date' => array('Column' => 'DateInserted')
        );
        $Ex->ExportTable('Comment', "
      select
         th.*,
         'Html' as Format
      from tblThread th
      join tblTopic t
         on t.Topic_ID = th.Topic_ID
      where th.Thread_ID <> t.Start_Thread_ID", $Comment_Map);

        $this->ExportConversations();

        $Ex->EndExport();
    }

    public function ExportConversations() {
        $Ex = $this->Ex;

        $this->_ExportConversationTemps();

        // Conversation.
        $Conversation_Map = array(
            'PM_ID' => 'ConversationID',
            'Title' => array('Column' => 'Subject', 'Type' => 'varchar(255)'),
            'Author_ID' => 'InsertUserID',
            'PM_Message_Date' => array('Column' => 'DateInserted')
        );
        $Ex->ExportTable('Conversation', "
         select
            pm.*,
            g.Title
         from tblPMMessage pm
         join z_pmgroup g
            on pm.PM_ID = g.Group_ID;", $Conversation_Map);

        // User Conversation.
        $UserConversation_Map = array(
            'Group_ID' => 'ConversationID',
            'User_ID' => 'UserID'
        );
        $Ex->ExportTable('UserConversation', "
         select
            g.Group_ID,
            t.User_ID
         from z_pmto t
         join z_pmgroup g
            on g.Group_ID = t.PM_ID;", $UserConversation_Map);

        // Conversation Message.
        $Message_Map = array(
            'Group_ID' => 'ConversationID',
            'PM_ID' => 'MessageID',
            'PM_Message' => 'Body',
            'Format' => 'Format',
            'PM_Message_Date' => array('Column' => 'DateInserted'),
            'Author_ID' => 'InsertUserID'
        );
        $Ex->ExportTable('ConversationMessage', "
         select
            pm.*,
            pm2.Group_ID,
            'Html' as Format
          from tblPMMessage pm
          join z_pmtext pm2
            on pm.PM_ID = pm2.PM_ID;", $Message_Map);
    }

    protected function _ExportConversationTemps() {
        $Sql = "
         drop table if exists z_pmto;

         create table z_pmto (
            PM_ID int unsigned,
            User_ID int,
            primary key(PM_ID, User_ID)
            );

         insert ignore z_pmto (
            PM_ID,
            User_ID
         )
         select
            PM_ID,
            Author_ID
         from tblPMMessage;

         insert ignore z_pmto (
            PM_ID,
            User_ID
         )
         select
            PM_ID,
            From_ID
         from tblPMMessage;

         drop table if exists z_pmto2;
         create table z_pmto2 (
            PM_ID int unsigned,
             UserIDs varchar(250),
             primary key (PM_ID)
         );

         replace z_pmto2 (
            PM_ID,
            UserIDs
         )
         select
            PM_ID,
            group_concat(User_ID order by User_ID)
         from z_pmto
         group by PM_ID;

         drop table if exists z_pmtext;
         create table z_pmtext (
            PM_ID int unsigned,
            Title varchar(250),
             Title2 varchar(250),
             UserIDs varchar(250),
             Group_ID int unsigned
         );

         insert z_pmtext (
            PM_ID,
            Title,
            Title2
         )
         select
            PM_ID,
            PM_Tittle,
            case when PM_Tittle like 'Re:%' then trim(substring(PM_Tittle, 4)) else PM_Tittle end as Title2
         from tblPMMessage;

         create index z_idx_pmtext on z_pmtext (PM_ID);

         update z_pmtext pm
         join z_pmto2 t
            on pm.PM_ID = t.PM_ID
         set pm.UserIDs = t.UserIDs;

         drop table if exists z_pmgroup;

         create table z_pmgroup (
                 Group_ID int unsigned,
                 Title varchar(250),
                 UserIDs varchar(250)
               );

         insert z_pmgroup (
                 Group_ID,
                 Title,
                 UserIDs
               )
               select
                 min(pm.PM_ID),
                 pm.Title2,
                 t2.UserIDs
               from z_pmtext pm
               join z_pmto2 t2
                 on pm.PM_ID = t2.PM_ID
               group by pm.Title2, t2.UserIDs;

         create index z_idx_pmgroup on z_pmgroup (Title, UserIDs);
         create index z_idx_pmgroup2 on z_pmgroup (Group_ID);

         update z_pmtext pm
               join z_pmgroup g
                 on pm.Title2 = g.Title and pm.UserIDs = g.UserIDs
               set pm.Group_ID = g.Group_ID;";

        $this->Ex->QueryN($Sql);
    }
}

?>
<?php
/**
 * Xenforo exporter tool.
 *
 * To export avatars, provide ?avatars=1&folder=/path/to/avatars
 *
 * @copyright Vanilla Forums Inc. 2010
 * @license http://opensource.org/licenses/gpl-2.0.php GNU GPL2
 * @package VanillaPorter
 */
$Supported['xenforo'] = array('name' => 'Xenforo', 'prefix' => 'xf_');
$Supported['xenforo']['CommandLine'] = array(
    'avatarpath' => array('Full path of source avatars to process.', 'Sx' => ':', 'Field' => 'avatarpath'),
);
$Supported['xenforo']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'Avatars' => 1,
    'Passwords' => 1,
    'PrivateMessages' => 1,
    'Permissions' => 1,
    'Signatures' => 1,
);

class Xenforo extends ExportController {

    protected $Processed;
    protected $SourceFolder;
    protected $TargetFolder;
    protected $Folders;
    protected $Types;

    /**
     * Export avatars into vanilla-compatibles names
     */
    public function DoAvatars() {

        // Check source folder
        $this->SourceFolder = $this->Param('avatarpath');
        if (!is_dir($this->SourceFolder)) {
            trigger_error("Source avatar folder '{$this->SourceFolder}' does not exist.");
        }

        // Set up a target folder
        $this->TargetFolder = CombinePaths(array($this->SourceFolder, 'xf'));
        if (!is_dir($this->TargetFolder)) {
            @$Made = mkdir($this->TargetFolder, 0777, true);
            if (!$Made) {
                trigger_error("Target avatar folder '{$this->TargetFolder}' could not be created.");
            }
        }

        // Iterate
        $this->Folders = array(
            'Thumb' => 'm',
            'Profile' => 'l'
        );

        $this->Types = array(
            'Thumb' => 'n',
            'Profile' => 'p'
        );

        foreach ($this->Folders as $Type => $Folder) {

            $this->Processed = 0;
            $Errors = array();

            $TypeSourceFolder = CombinePaths(array($this->SourceFolder, $Folder));
            echo "Processing '{$Type}' files in {$TypeSourceFolder}:\n";
            $this->AvatarFolder($TypeSourceFolder, $Type, $Errors);

            $nErrors = sizeof($Errors);
            if ($nErrors) {
                echo "{$nErrors} errors:\n";
                foreach ($Errors as $Error) {
                    echo "{$Error}\n";
                }
            }

        }
    }

    protected function AvatarFolder($Folder, $Type, &$Errors) {
        if (!is_dir($Folder)) {
            trigger_error("Target avatar folder '{$Folder}' does not exist.");
        }
        $ResFolder = opendir($Folder);

        $Errors = array();
        while (($File = readdir($ResFolder)) !== false) {
            if ($File == '.' || $File == '..') {
                continue;
            }

            $FullPath = CombinePaths(array($Folder, $File));

            // Folder? Recurse
            if (is_dir($FullPath)) {
                $this->AvatarFolder($FullPath, $Type, $Errors);
                continue;
            }

            $this->Processed++;

            // Determine target paths and name
            $Photo = trim($File);
            $PhotoSrc = CombinePaths(array($Folder, $Photo));
            $PhotoFileName = basename($PhotoSrc);
            $PhotoPath = dirname($PhotoSrc);

            $StubFolder = GetValue($Type, $this->Folders);
            $TrimFolder = CombinePaths(array($this->SourceFolder, $StubFolder));
            $PhotoPath = str_replace($TrimFolder, '', $PhotoPath);
            $PhotoFolder = CombinePaths(array($this->TargetFolder, $PhotoPath));
            @mkdir($PhotoFolder, 0777, true);

            if (!file_exists($PhotoSrc)) {
                $Errors[] = "Missing file: {$PhotoSrc}";
                continue;
            }

            $TypePrefix = GetValue($Type, $this->Types);
            $PhotoDest = CombinePaths(array($PhotoFolder, "{$TypePrefix}{$PhotoFileName}"));
            $Copied = @copy($PhotoSrc, $PhotoDest);
            if (!$Copied) {
                $Errors[] = "! failed to copy photo '{$PhotoSrc}' (-> {$PhotoDest}).";
            }

            if (!($this->Processed % 100)) {
                echo " - processed {$this->Processed}\n";
            }
        }
    }

    /*
     * Forum-specific export format.
     * @param ExportModel $Ex
     */

    protected function ForumExport($Ex) {
        $this->Ex = $Ex;

        $Cdn = $this->CdnPrefix();

        // Get the characterset for the comments.
        $CharacterSet = $Ex->GetCharacterSet('posts');
        if ($CharacterSet) {
            $Ex->CharacterSet = $CharacterSet;
        }

        $Ex->SourcePrefix = 'xf_';
//      $Ex->UseCompression(FALSE);
        // Begin
        $Ex->BeginExport('', 'xenforo', array('HashMethod' => 'xenforo'));

        // Export avatars
        if ($this->Param('avatars')) {
            $this->DoAvatars();
        }

        // Users.
        $User_Map = array(
            'user_id' => 'UserID',
            'username' => 'Name',
            'email' => 'Email',
            'gender' => array(
                'Column' => 'Gender',
                'Filter' => function ($Value) {
                    switch ($Value) {
                        case 'male':
                            return 'm';
                        case 'female':
                            return 'f';
                        default:
                            return 'u';
                    }
                }
            ),
            'custom_title' => 'Title',
            'register_date' => array('Column' => 'DateInserted', 'Filter' => 'TimestampToDate'),
            'last_activity' => array('Column' => 'DateLastActive', 'Filter' => 'TimestampToDate'),
            'is_admin' => 'Admin',
            'is_banned' => 'Banned',
            'password' => 'Password',
            'hash_method' => 'HashMethod',
            'avatar' => 'Photo'
        );
        $Ex->ExportTable('User', "
         select
            u.*,
            ua.data as password,
            'xenforo' as hash_method,
            case when u.avatar_date > 0 then concat('{$Cdn}xf/', u.user_id div 1000, '/', u.user_id, '.jpg') else null end as avatar
         from xf_user u
         left join xf_user_authenticate ua
            on u.user_id = ua.user_id", $User_Map);

        // Roles.
        $Role_Map = array(
            'user_group_id' => 'RoleID',
            'title' => 'Name'
        );
        $Ex->ExportTable('Role', "
         select *
         from xf_user_group", $Role_Map);

        // User Roles.
        $UserRole_Map = array(
            'user_id' => 'UserID',
            'user_group_id' => 'RoleID'
        );

        $Ex->ExportTable('UserRole', "
         select user_id, user_group_id
         from xf_user

         union all

         select u.user_id, ua.user_group_id
         from xf_user u
         join xf_user_group ua
            on find_in_set(ua.user_group_id, u.secondary_group_ids)", $UserRole_Map);

        // Permission.
        $this->ExportPermissions();

        // User Meta.
        $this->ExportUserMeta();

        // Categories.
        $Category_Map = array(
            'node_id' => 'CategoryID',
            'title' => 'Name',
            'description' => 'Description',
            'parent_node_id' => array(
                'Column' => 'ParentCategoryID',
                'Filter' => function ($Value) {
                    return $Value ? $Value : null;
                }
            ),
            'display_order' => 'Sort',
            'display_in_list' => array('Column' => 'HideAllDiscussions', 'Filter' => 'NotFilter')
        );
        $Ex->ExportTable('Category', "
         select n.*
         from xf_node n
         ", $Category_Map);

        // Discussions.
        $Discussion_Map = array(
            'thread_id' => 'DiscussionID',
            'node_id' => 'CategoryID',
            'title' => 'Name',
            'view_count' => 'CountViews',
            'user_id' => 'InsertUserID',
            'post_date' => array('Column' => 'DateInserted', 'Filter' => 'TimestampToDate'),
            'sticky' => 'Announce',
            'discussion_open' => array('Column' => 'Closed', 'Filter' => 'NotFilter'),
            'last_post_date' => array('Column' => 'DateLastComment', 'Filter' => 'TimestampToDate'),
            'message' => 'Body',
            'format' => 'Format',
            'ip' => array('Column' => 'InsertIPAddress', 'Filter' => 'long2ipf')
        );
        $Ex->ExportTable('Discussion', "
         select
            t.*,
            p.message,
            'BBCode' as format,
            ip.ip
         from xf_thread t
         join xf_post p
            on t.first_post_id = p.post_id
         left join xf_ip ip
            on p.ip_id = ip.ip_id", $Discussion_Map);


        // Comments.
        $Comment_Map = array(
            'post_id' => 'CommentID',
            'thread_id' => 'DiscussionID',
            'user_id' => 'InsertUserID',
            'post_date' => array('Column' => 'DateInserted', 'Filter' => 'TimestampToDate'),
            'message' => 'Body',
            'format' => 'Format',
            'ip' => array('Column' => 'InsertIPAddress', 'Filter' => 'long2ipf')
        );
        $Ex->ExportTable('Comment', "
         select
            p.*,
            'BBCode' as format,
            ip.ip
         from xf_post p
         join xf_thread t
            on p.thread_id = t.thread_id
         left join xf_ip ip
            on p.ip_id = ip.ip_id
         where p.post_id <> t.first_post_id
            and message_state = 'visible'", $Comment_Map);

        // Conversation.
        $Conversation_Map = array(
            'conversation_id' => 'ConversationID',
            'title' => 'Subject',
            'user_id' => 'InsertUserID',
            'start_date' => array('Column' => 'DateInserted', 'Filter' => 'TimestampToDate')
        );
        $Ex->ExportTable('Conversation', "
         select *
         from xf_conversation_master", $Conversation_Map);

        $ConversationMessage_Map = array(
            'message_id' => 'MessageID',
            'conversation_id' => 'ConversationID',
            'message_date' => array('Column' => 'DateInserted', 'Filter' => 'TimestampToDate'),
            'user_id' => 'InsertUserID',
            'message' => 'Body',
            'format' => 'Format',
            'ip' => array('Column' => 'InsertIPAddress', 'Filter' => 'long2ipf')
        );
        $Ex->ExportTable('ConversationMessage', "
         select
            m.*,
            'BBCode' as format,
            ip.ip
         from xf_conversation_message m
         left join xf_ip ip
            on m.ip_id = ip.ip_id", $ConversationMessage_Map);

        $UserConversation_Map = array(
            'conversation_id' => 'ConversationID',
            'user_id' => 'UserID',
            'Deleted' => 'Deleted'
        );
        $Ex->ExportTable('UserConversation', "
         select
            r.conversation_id,
            user_id,
            case when r.recipient_state = 'deleted' then 1 else 0 end as Deleted
         from xf_conversation_recipient r

         union all

         select
            cu.conversation_id,
            cu.owner_user_id,
            0
         from xf_conversation_user cu
         ", $UserConversation_Map);

        $Ex->EndExport();
    }

    public function ExportPermissions() {
        $Ex = $this->Ex;

        $Permissions = array();

        // Export the global permissions.
        $r = $Ex->Query("
         select
            pe.*,
            g.title
         from xf_permission_entry pe
         join xf_user_group g
            on pe.user_group_id = g.user_group_id");
        $this->_ExportPermissions($r, $Permissions);

        $r = $Ex->Query("
          select
            pe.*,
            g.title
         from xf_permission_entry_content pe
         join xf_user_group g
            on pe.user_group_id = g.user_group_id");
        $this->_ExportPermissions($r, $Permissions);


        if (count($Permissions) == 0) {
            return;
        }

        $Permissions = array_values($Permissions);

        // Now that we have all of the permission in an array let's export them.
        $Columns = $this->_ExportPermissions(false);

        foreach ($Columns as $Index => $Column) {
            if (strpos($Column, '.') !== false) {
                $Columns[$Index] = array('Column' => $Column, 'Type' => 'tinyint');
            }
        }
        $Structure = $Ex->GetExportStructure($Columns, 'Permission', $Columns, 'Permission');
        $RevMappings = $Ex->FlipMappings($Columns);

        $Ex->WriteBeginTable($Ex->File, 'Permission', $Structure);
        $count = 0;
        foreach ($Permissions as $Row) {
            $Ex->WriteRow($Ex->File, $Row, $Structure, $RevMappings);
            $count++;
        }
        $Ex->WriteEndTable($Ex->File);
        $Ex->Comment("Exported Table: Permission ($count rows)");

//       var_export($Permissions);
    }

    public function ExportUserMeta() {
        $Ex = $this->Ex;

        $Sql = "
         select
           user_id as UserID,
           'Plugin.Signatures.Sig' as Name,
           signature as Value
         from xf_user_profile
         where nullif(signature, '') is not null

         union

         select
           user_id,
           'Plugin.Signatures.Format',
           'BBCode'
         from xf_user_profile
         where nullif(signature, '') is not null";

        $Ex->ExportTable('UserMeta', $Sql);
    }

    protected function _ExportPermissions($r, &$Perms = null) {
        $Map = array(
            'general.viewNode' => 'Vanilla.Discussions.View',
            'forum.deleteAnyPost' => 'Vanilla.Comments.Delete',
            'forum.deleteAnyThread' => 'Vanilla.Discussions.Delete',
            'forum.editAnyPost' => array('Vanilla.Discussions.Edit', 'Vanilla.Comments.Edit'),
            'forum.lockUnlockThread' => 'Vanilla.Discussions.Close',
            'forum.postReply' => array('Vanilla.Comments.Add'),
            'forum.postThread' => 'Vanilla.Discussions.Add',
            'forum.stickUnstickThread' => array('Vanilla.Discussions.Announce', 'Vanilla.Discussions.Sink'),
            'forum.uploadAttachment' => 'Plugins.Attachments.Upload.Allow',
            'forum.viewAttachment' => 'Plugins.Attachments.Download.Allow',
            'general.editSignature' => 'Plugins.Signatures.Edit',
            'general.viewProfile' => 'Garden.Profiles.View',
            'profilePost.deleteAny' => 'Garden.Activity.Delete',
            'profilePost.post' => array('Garden.Email.View', 'Garden.SignIn.Allow', 'Garden.Profiles.Edit')
        );

        if ($r === false) {
            $Result = array(
                'RoleID' => 'RoleID',
                'JunctionTable' => 'JunctionTable',
                'JunctionColumn' => 'JunctionColumn',
                'JunctionID' => 'JunctionID',
                '_Permissions' => '_Permissions',
                'Garden.Moderation.Manage' => 'Garden.Moderation.Manage'
            );

            // Return an array of fieldnames.
            foreach ($Map as $Columns) {
                $Columns = (array)$Columns;
                foreach ($Columns as $Column) {
                    $Result[$Column] = $Column;
                }
            }

            return $Result;
        }

        while ($row = mysql_fetch_assoc($r)) {
            $RoleID = $row['user_group_id'];

            $Perm = "{$row['permission_group_id']}.{$row['permission_id']}";

            if (!isset($Map[$Perm])) {
                continue;
            }

            $Names = (array)$Map[$Perm];

            foreach ($Names as $Name) {
                if (isset($row['content_id'])) {
                    if ($row['content_type'] != 'node') {
                        continue;
                    }

                    $CategoryID = $row['content_id'];
                } else {
                    $CategoryID = null;
                }

                // Is this a per-category permission?
                if (strpos($Name, 'Vanilla.Discussions.') !== false || strpos($Name, 'Vanilla.Comments.') !== false) {
                    if (!$CategoryID) {
                        $CategoryID = -1;
                    }
                } else {
                    $CategoryID = null;
                }


                $Key = "{$RoleID}_{$CategoryID}";

                $Perms[$Key]['RoleID'] = $RoleID;
                $PermRow = &$Perms[$Key];
                if ($CategoryID) {
                    $PermRow['JunctionTable'] = 'Category';
                    $PermRow['JunctionColumn'] = 'PermissionCategoryID';
                    $PermRow['JunctionID'] = $CategoryID;
                }

                $Title = $row['title'];
                $PermRow['Title'] = $Title;
                if (stripos($Title, 'Admin') !== false) {
                    $PermRow['_Permissions'] = 'all';
                }
                if (!$CategoryID && stripos($Title, 'Mod') !== false) {
                    $PermRow['Garden.Moderation.Manage'] = true;
                }

                // Set all of the permissions.
                $PermValue = $row['permission_value'];
                if ($PermValue == 'deny') {
                    $PermRow[$Name] = false;
                } elseif (in_array($PermValue, array('allow', 'content_allow'))) {
                    if (!isset($PermRow[$Name]) || $PermRow[$Name] !== false) {
                        $PermRow[$Name] = true;
                    }
                } elseif (!isset($PermRow[$Name])) {
                    $PermRow[$Name] = null;
                }
            }
        }
    }

}

?>
<?php
/**
 * YetAnotherForum.NET exporter tool
 *
 * @copyright Vanilla Forums Inc. 2010
 * @license Proprietary
 * @package VanillaPorter
 */

$Supported['yaf'] = array('name' => 'YAF.NET', 'prefix' => 'yaf_'); // (Yet Another Forum)
$Supported['yaf']['features'] = array(
    'Comments' => 1,
    'Discussions' => 1,
    'Users' => 1,
    'Categories' => 1,
    'Roles' => 1,
    'PrivateMessages' => 1,
    'Signatures' => 1,
    'Ranks' => 1,
    'Passwords' => 1,
);

class Yaf extends ExportController {
    static $PasswordFormats = array(0 => 'md5', 1 => 'sha1', 2 => 'sha256', 3 => 'sha384', 4 => 'sha512');

    /**
     *
     * @param ExportModel $Ex
     */
    public function ForumExport($Ex) {
        $CharacterSet = $Ex->GetCharacterSet('yaf_Topic');
        if ($CharacterSet) {
            $Ex->CharacterSet = $CharacterSet;
        }

        $Ex->BeginExport('', 'YAF.NET (Yet Another Forum)');
        $Ex->SourcePrefix = 'yaf_';

        // User.
        $User_Map = array(
            'UserID' => 'UserID',
            'Name' => 'Name',
            'Email' => 'Email',
            'Joined' => 'DateInserted',
            'LastVisit' => array('Column' => 'DateLastVisit', 'Type' => 'datetime'),
            'IP' => 'InsertIPAddress',
            'Avatar' => 'Photo',
            'RankID' => array('Column' => 'RankID', 'Type' => 'int'),
            'Points' => array('Column' => 'Points', 'Type' => 'int'),
            'LastActivity' => 'DateLastActive',
            'Password2' => array('Column' => 'Password', 'Filter' => array($this, 'ConvertPassword')),
            'HashMethod' => 'HashMethod'
        );
        $Ex->ExportTable('User', "
         select
            u.*,
            m.Password as Password2,
            m.PasswordSalt,
            m.PasswordFormat,
            m.LastActivity,
            'yaf' as HashMethod
         from yaf_User u
         left join yaf_prov_Membership m
            on u.ProviderUserKey = m.UserID;", $User_Map);

        // Role.
        $Role_Map = array(
            'GroupID' => 'RoleID',
            'Name' => 'Name'
        );
        $Ex->ExportTable('Role', "
         select *
         from yaf_Group;", $Role_Map);

        // UserRole.
        $UserRole_Map = array(
            'UserID' => 'UserID',
            'GroupID' => 'RoleID'
        );
        $Ex->ExportTable('UserRole', 'select * from yaf_UserGroup', $UserRole_Map);

        // Rank.
        $Rank_Map = array(
            'RankID' => 'RankID',
            'Level' => 'Level',
            'Name' => 'Name',
            'Label' => 'Label'
        );
        $Ex->ExportTable('Rank', "
         select
            r.*,
            RankID as Level,
            Name as Label
         from yaf_Rank r;", $Rank_Map);

        // Signatures.
        $Ex->ExportTable('UserMeta', "
         select
            UserID,
            'Plugin.Signatures.Sig' as `Name`,
            Signature as `Value`
         from yaf_User
         where Signature <> ''

         union all

         select
            UserID,
            'Plugin.Signatures.Format' as `Name`,
            'BBCode' as `Value`
         from yaf_User
         where Signature <> '';");

        // Category.
        $Category_Map = array(
            'ForumID' => 'CategoryID',
            'ParentID' => 'ParentCategoryID',
            'Name' => 'Name',
            'Description' => 'Description',
            'SortOrder' => 'Sort'
        );

        $Ex->ExportTable('Category', "
         select
            f.ForumID,
            case when f.ParentID = 0 then f.CategoryID * 1000 else f.ParentID end as ParentID,
            f.Name,
            f.Description,
            f.SortOrder
         from yaf_Forum f

         union all

         select
            c.CategoryID * 1000,
            null,
            c.Name,
            null,
            c.SortOrder
         from yaf_Category c;", $Category_Map);

        // Discussion.
        $Discussion_Map = array(
            'TopicID' => 'DiscussionID',
            'ForumID' => 'CategoryID',
            'UserID' => 'InsertUserID',
            'Posted' => 'DateInserted',
            'Topic' => 'Name',
            'Views' => 'CountViews',
            'Announce' => 'Announce'
        );
        $Ex->ExportTable('Discussion', "
         select
            case when t.Priority > 0 then 1 else 0 end as Announce,
            t.Flags & 1 as Closed,
            t.*
         from yaf_Topic t
         where t.IsDeleted = 0;", $Discussion_Map);

        // Comment.
        $Comment_Map = array(
            'MessageID' => 'CommentID',
            'TopicID' => 'DiscussionID',
            'ReplyTo' => array('Column' => 'ReplyToCommentID', 'Type' => 'int'),
            'UserID' => 'InsertUserID',
            'Posted' => 'DateInserted',
            'Message' => 'Body',
            'Format' => 'Format',
            'IP' => 'InsertIPAddress',
            'Edited' => array('Column' => 'DateUpdated', 'Filter' => array($this, 'CleanDate')),
            'EditedBy' => 'UpdateUserID'
        );
        $Ex->ExportTable('Comment', "
         select
            case when m.Flags & 1 = 1 then 'Html' else 'BBCode' end as Format,
            m.*
         from yaf_Message m
         where IsDeleted = 0;", $Comment_Map);

        // Conversation.
        $this->_ExportConversationTemps();

        $Conversation_Map = array(
            'PMessageID' => 'ConversationID',
            'FromUserID' => 'InsertUserID',
            'Created' => 'DateInserted',
            'Title' => array('Column' => 'Subject', 'Type' => 'varchar(512)')
        );
        $Ex->ExportTable('Conversation', "
         select
            pm.*,
            g.Title
         from z_pmgroup g
         join yaf_PMessage pm
            on g.Group_ID = pm.PMessageID;", $Conversation_Map);

        // UserConversation.
        $UserConversation_Map = array(
            'PM_ID' => 'ConversationID',
            'User_ID' => 'UserID',
            'Deleted' => 'Deleted'
        );
        $Ex->ExportTable('UserConversation', "
         select pto.*
         from z_pmto pto
         join z_pmgroup g
            on pto.PM_ID = g.Group_ID;", $UserConversation_Map);

        // ConversationMessage.
        $ConversationMessage_Map = array(
            'PMessageID' => 'MessageID',
            'Group_ID' => 'ConversationID',
            'FromUserID' => 'InsertUserID',
            'Created' => 'DateInserted',
            'Body' => 'Body',
            'Format' => 'Format'
        );
        $Ex->ExportTable('ConversationMessage', "
         select
            pm.*,
            case when pm.Flags & 1 = 1 then 'Html' else 'BBCode' end as Format,
            t.Group_ID
         from yaf_PMessage pm
         join z_pmtext t
            on t.PM_ID = pm.PMessageID;", $ConversationMessage_Map);

        $Ex->EndExport();
    }

    public function CleanDate($Value) {
        if (!$Value) {
            return null;
        }
        if (substr($Value, 0, 4) == '0000') {
            return null;
        }

        return $Value;
    }

    public function ConvertPassword($Hash, $ColumnName, &$Row) {
        $Salt = $Row['PasswordSalt'];
        $Hash = $Row['Password2'];
        $Method = $Row['PasswordFormat'];
        if (isset(self::$PasswordFormats[$Method])) {
            $Method = self::$PasswordFormats[$Method];
        } else {
            $Method = 'sha1';
        }
        $Result = $Method . '$' . $Salt . '$' . $Hash . '$';

        return $Result;
    }

    protected function _ExportConversationTemps() {
        $Sql = "
         drop table if exists z_pmto;

         create table z_pmto (
            PM_ID int unsigned,
            User_ID int,
            Deleted tinyint,
            primary key(PM_ID, User_ID)
            );

         insert ignore z_pmto (
            PM_ID,
            User_ID,
            Deleted
         )
         select
            PMessageID,
            FromUserID,
            0
         from yaf_PMessage;

         replace z_pmto (
            PM_ID,
            User_ID,
            Deleted
         )
         select
            PMessageID,
            UserID,
            IsDeleted
         from yaf_UserPMessage;

         drop table if exists z_pmto2;
         create table z_pmto2 (
            PM_ID int unsigned,
             UserIDs varchar(250),
             primary key (PM_ID)
         );

         replace z_pmto2 (
            PM_ID,
            UserIDs
         )
         select
            PM_ID,
            group_concat(User_ID order by User_ID)
         from z_pmto
         group by PM_ID;

         drop table if exists z_pmtext;
         create table z_pmtext (
            PM_ID int unsigned,
            Title varchar(250),
             Title2 varchar(250),
             UserIDs varchar(250),
             Group_ID int unsigned
         );

         insert z_pmtext (
            PM_ID,
            Title,
            Title2
         )
         select
            PMessageID,
            Subject,
            case when Subject like 'Re:%' then trim(substring(Subject, 4)) else Subject end as Title2
         from yaf_PMessage;

         create index z_idx_pmtext on z_pmtext (PM_ID);

         update z_pmtext pm
         join z_pmto2 t
            on pm.PM_ID = t.PM_ID
         set pm.UserIDs = t.UserIDs;

         drop table if exists z_pmgroup;

         create table z_pmgroup (
                 Group_ID int unsigned,
                 Title varchar(250),
                 UserIDs varchar(250)
               );

         insert z_pmgroup (
                 Group_ID,
                 Title,
                 UserIDs
               )
               select
                 min(pm.PM_ID),
                 pm.Title2,
                 t2.UserIDs
               from z_pmtext pm
               join z_pmto2 t2
                 on pm.PM_ID = t2.PM_ID
               group by pm.Title2, t2.UserIDs;

         create index z_idx_pmgroup on z_pmgroup (Title, UserIDs);
         create index z_idx_pmgroup2 on z_pmgroup (Group_ID);

         update z_pmtext pm
               join z_pmgroup g
                 on pm.Title2 = g.Title and pm.UserIDs = g.UserIDs
               set pm.Group_ID = g.Group_ID;";

        $this->Ex->QueryN($Sql);
    }
}

?>
<?php 

// If running from cli, execute its command.
if (defined('CONSOLE')) {
    ParseCommandLine();
}

// Instantiate the appropriate controller or display the input page.
$Method = 'DoExport';
if (isset($_REQUEST['features'])) {
    // Feature list or table.
    $Set = (isset($_REQUEST['cloud'])) ? array('core', 'addons', 'cloud') : false;
    $Set = VanillaFeatures($Set);

    if (isset($_REQUEST['type'])) {
        ViewFeatureList($_REQUEST['type'], $Set);
    } else {
        ViewFeatureTable($Set);
    }
} elseif (isset($_POST['type']) && array_key_exists($_POST['type'], $Supported)) {
    // Mini-Factory for conducting exports.
    $class = ucwords($_POST['type']);
    $Controller = new $class();
    if (!method_exists($Controller, $Method)) {
        echo "This datasource type does not support {$Method}.\n";
        exit();
    }
    $Controller->$Method();
} else {
    // Show the web UI to start an export.
    $CanWrite = TestWrite();
    ViewForm(array('Supported' => $Supported, 'CanWrite' => $CanWrite));
}

// Console output should end in newline.
if (defined('CONSOLE')) {
    echo "\n";
}
